// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IncdOnboarding
import AVFoundation
import AVKit
import CommonCrypto
import CoreGraphics
import CoreLocation
import CoreMotion
import CoreTelephony
import CryptoKit
import Foundation
import OpenTok
import PDFKit
import Photos
import ReplayKit
import Swift
import UIKit.UIGeometry
import UIKit
import Vision
public protocol BaseCellType : AnyObject {
  var height: (() -> CoreGraphics.CGFloat)? { get }
  func setup()
  func update()
  func didSelect()
  func cellCanBecomeFirstResponder() -> Swift.Bool
  func cellBecomeFirstResponder(withDirection: IncdOnboarding.Direction) -> Swift.Bool
  func cellResignFirstResponder() -> Swift.Bool
  func formViewController() -> IncdOnboarding.FormViewController?
}
public protocol TypedCellType : IncdOnboarding.BaseCellType {
  associatedtype Value : Swift.Equatable
  var row: IncdOnboarding.RowOf<Self.Value>! { get set }
}
public protocol CellType : IncdOnboarding.TypedCellType {
}
@objc @_inheritsConvenienceInitializers open class BaseCell : UIKit.UITableViewCell, IncdOnboarding.BaseCellType {
  public var baseRow: IncdOnboarding.BaseRow! {
    get
  }
  public var height: (() -> CoreGraphics.CGFloat)?
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  public func formViewController() -> IncdOnboarding.FormViewController?
  open func setup()
  open func update()
  open func didSelect()
  open func cellCanBecomeFirstResponder() -> Swift.Bool
  @discardableResult
  open func cellBecomeFirstResponder(withDirection: IncdOnboarding.Direction = .down) -> Swift.Bool
  @discardableResult
  open func cellResignFirstResponder() -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class Cell<T> : IncdOnboarding.BaseCell, IncdOnboarding.TypedCellType where T : Swift.Equatable {
  public typealias Value = T
  weak public var row: IncdOnboarding.RowOf<T>!
  @objc override dynamic open var inputAccessoryView: UIKit.UIView? {
    @objc get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  override open func setup()
  override open func update()
  override open func didSelect()
  @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @objc override dynamic open func tintColorDidChange()
  override public var baseRow: IncdOnboarding.BaseRow! {
    get
  }
  @objc deinit
}
public protocol BaseInlineRowType {
  func expandInlineRow()
  func collapseInlineRow()
  func toggleInlineRow()
}
public protocol InlineRowType : IncdOnboarding.BaseInlineRowType, IncdOnboarding.TypedRowType {
  associatedtype InlineRow : IncdOnboarding.BaseRow, IncdOnboarding.RowType
  func setupInlineRow(_ inlineRow: Self.InlineRow)
}
extension InlineRowType where Self : IncdOnboarding.BaseRow, Self.Cell.Value == Self.InlineRow.Cell.Value {
  public var inlineRow: Self.InlineRow? {
    get
  }
  public func expandInlineRow()
  public func collapseInlineRow()
  public func toggleInlineRow()
  @discardableResult
  public func onExpandInlineRow(_ callback: @escaping (Self.Cell, Self, Self.InlineRow) -> Swift.Void) -> Self
  @discardableResult
  public func onCollapseInlineRow(_ callback: @escaping (Self.Cell, Self, Self.InlineRow) -> Swift.Void) -> Self
  public var onCollapseInlineRowCallback: ((Self.Cell, Self, Self.InlineRow) -> Swift.Void)? {
    get
  }
  public var onExpandInlineRowCallback: ((Self.Cell, Self, Self.InlineRow) -> Swift.Void)? {
    get
  }
  public var isExpanded: Swift.Bool {
    get
  }
  public var isCollapsed: Swift.Bool {
    get
  }
}
public protocol PresenterRowType : IncdOnboarding.TypedRowType {
  associatedtype PresentedControllerType : UIKit.UIViewController, IncdOnboarding.TypedRowControllerType
  var presentationMode: IncdOnboarding.PresentationMode<Self.PresentedControllerType>? { get set }
  var onPresentCallback: ((IncdOnboarding.FormViewController, Self.PresentedControllerType) -> Swift.Void)? { get set }
}
extension PresenterRowType {
  @discardableResult
  public func onPresent(_ callback: ((IncdOnboarding.FormViewController, Self.PresentedControllerType) -> Swift.Void)?) -> Self
}
extension UIView {
  public func findFirstResponder() -> UIKit.UIView?
  public func formCell() -> IncdOnboarding.BaseCell?
}
open class BaseRow : IncdOnboarding.BaseRowType {
  public var validationOptions: IncdOnboarding.ValidationOptions
  public var validationErrors: [IncdOnboarding.ValidationError] {
    get
  }
  public var wasBlurred: Swift.Bool {
    get
  }
  public var wasChanged: Swift.Bool {
    get
  }
  public var isValid: Swift.Bool {
    get
  }
  public var isHighlighted: Swift.Bool
  public var title: Swift.String?
  public var cellStyle: UIKit.UITableViewCell.CellStyle
  public var tag: Swift.String?
  public var baseCell: IncdOnboarding.BaseCell! {
    get
  }
  public var baseValue: Any? {
    get
    set
  }
  open func validate(quietly: Swift.Bool = false) -> [IncdOnboarding.ValidationError]
  open func cleanValidationErrors()
  public static var estimatedRowHeight: CoreGraphics.CGFloat
  public var disabled: IncdOnboarding.Condition? {
    get
    set
  }
  public var hidden: IncdOnboarding.Condition? {
    get
    set
  }
  public var isDisabled: Swift.Bool {
    get
  }
  public var isHidden: Swift.Bool {
    get
  }
  weak open var section: IncdOnboarding.Section?
  public var trailingSwipe: IncdOnboarding.SwipeConfiguration {
    get
    set
  }
  @available(iOS 11, *)
  public var leadingSwipe: IncdOnboarding.SwipeConfiguration {
    get
    set
  }
  required public init(tag: Swift.String? = nil)
  open func updateCell()
  open func didSelect()
  open func prepare(for segue: UIKit.UIStoryboardSegue)
  open var destinationScrollPosition: UIKit.UITableView.ScrollPosition?
  final public var indexPath: Foundation.IndexPath? {
    get
  }
  @objc deinit
}
extension BaseRow {
  final public func evaluateHidden()
  final public func evaluateDisabled()
}
extension BaseRow : Swift.Equatable {
}
extension BaseRow {
  public func reload(with rowAnimation: UIKit.UITableView.RowAnimation = .none)
  public func deselect(animated: Swift.Bool = true)
  public func select(animated: Swift.Bool = false, scrollPosition: UIKit.UITableView.ScrollPosition = .none)
}
public func == (lhs: IncdOnboarding.BaseRow, rhs: IncdOnboarding.BaseRow) -> Swift.Bool
public protocol TypedRowControllerType : IncdOnboarding.RowControllerType {
  associatedtype RowValue : Swift.Equatable
  var row: IncdOnboarding.RowOf<Self.RowValue>! { get set }
}
public protocol HeaderFooterViewRepresentable {
  func viewForSection(_ section: IncdOnboarding.Section, type: IncdOnboarding.HeaderFooterType) -> UIKit.UIView?
  var title: Swift.String? { get set }
  var height: (() -> CoreGraphics.CGFloat)? { get set }
}
public enum HeaderFooterProvider<ViewType> where ViewType : UIKit.UIView {
  case `class`
  case callback(() -> ViewType)
  case nibFile(name: Swift.String, bundle: Foundation.Bundle?)
}
public enum HeaderFooterType {
  case header, footer
  public static func == (a: IncdOnboarding.HeaderFooterType, b: IncdOnboarding.HeaderFooterType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct HeaderFooterView<ViewType> : Swift.ExpressibleByStringLiteral, IncdOnboarding.HeaderFooterViewRepresentable where ViewType : UIKit.UIView {
  public var title: Swift.String?
  public var viewProvider: IncdOnboarding.HeaderFooterProvider<ViewType>?
  public var onSetupView: ((ViewType, IncdOnboarding.Section) -> Swift.Void)?
  public var height: (() -> CoreGraphics.CGFloat)?
  public func viewForSection(_ section: IncdOnboarding.Section, type: IncdOnboarding.HeaderFooterType) -> UIKit.UIView?
  public init?(title: Swift.String?)
  public init(_ provider: IncdOnboarding.HeaderFooterProvider<ViewType>)
  public init(unicodeScalarLiteral value: Swift.String)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public init(stringLiteral value: Swift.String)
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
public typealias SwipeActionHandler = (IncdOnboarding.SwipeAction, IncdOnboarding.BaseRow, ((Swift.Bool) -> Swift.Void)?) -> Swift.Void
public class SwipeAction {
  public var actionBackgroundColor: UIKit.UIColor?
  public var image: UIKit.UIImage?
  public var title: Swift.String?
  @available(*, deprecated, message: "Use actionBackgroundColor instead")
  public var backgroundColor: UIKit.UIColor? {
    get
    set
  }
  public init(style: IncdOnboarding.SwipeAction.Style, title: Swift.String?, handler: @escaping IncdOnboarding.SwipeActionHandler)
  public enum Style {
    case normal
    case destructive
    public static func == (a: IncdOnboarding.SwipeAction.Style, b: IncdOnboarding.SwipeAction.Style) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  @objc deinit
}
public struct SwipeConfiguration {
  public var performsFirstActionWithFullSwipe: Swift.Bool
  public var actions: [IncdOnboarding.SwipeAction]
}
extension UITableViewRowAction {
  public var image: UIKit.UIImage? {
    get
    set
  }
  public var actionBackgroundColor: UIKit.UIColor? {
    get
    set
  }
}
@available(iOS 11.0, *)
extension UIContextualAction {
  public var actionBackgroundColor: UIKit.UIColor? {
    get
    set
  }
}
public protocol ContextualStyle {
}
extension UITableViewRowAction.Style : IncdOnboarding.ContextualStyle {
}
@available(iOS 11.0, *)
extension UIContextualAction.Style : IncdOnboarding.ContextualStyle {
}
public protocol RowControllerType : ObjectiveC.NSObjectProtocol {
  var onDismissCallback: ((UIKit.UIViewController) -> Swift.Void)? { get set }
}
public protocol KeyboardReturnHandler : IncdOnboarding.BaseRowType {
  var keyboardReturnType: IncdOnboarding.KeyboardReturnTypeConfiguration? { get set }
}
public protocol Taggable : AnyObject {
  var tag: Swift.String? { get set }
}
public protocol BaseRowType : IncdOnboarding.Taggable {
  var baseCell: IncdOnboarding.BaseCell! { get }
  var section: IncdOnboarding.Section? { get }
  var cellStyle: UIKit.UITableViewCell.CellStyle { get set }
  var title: Swift.String? { get set }
  func updateCell()
  func didSelect()
  func validate(quietly: Swift.Bool) -> [IncdOnboarding.ValidationError]
}
public protocol TypedRowType : IncdOnboarding.BaseRowType {
  associatedtype Cell : IncdOnboarding.BaseCell, IncdOnboarding.TypedCellType
  var cell: Self.Cell! { get }
  var value: Self.Cell.Value? { get set }
  func add<Rule>(rule: Rule) where Rule : IncdOnboarding.RuleType, Rule.RowValueType == Self.Cell.Value
  func remove(ruleWithIdentifier: Swift.String)
}
public protocol RowType : IncdOnboarding.TypedRowType {
  init(_ tag: Swift.String?, _ initializer: (Self) -> Swift.Void)
}
extension RowType where Self : IncdOnboarding.BaseRow {
  public init(_ tag: Swift.String? = nil, _ initializer: (Self) -> Swift.Void = { _ in })
}
extension RowType where Self : IncdOnboarding.BaseRow {
  public static var defaultCellUpdate: ((Self.Cell, Self) -> Swift.Void)? {
    get
    set
  }
  public static var defaultCellSetup: ((Self.Cell, Self) -> Swift.Void)? {
    get
    set
  }
  public static var defaultOnCellHighlightChanged: ((Self.Cell, Self) -> Swift.Void)? {
    get
    set
  }
  public static var defaultRowInitializer: ((Self) -> Swift.Void)? {
    get
    set
  }
  public static var defaultOnRowValidationChanged: ((Self.Cell, Self) -> Swift.Void)? {
    get
    set
  }
  @discardableResult
  public func onChange(_ callback: @escaping (Self) -> Swift.Void) -> Self
  @discardableResult
  public func cellUpdate(_ callback: @escaping ((Self.Cell, Self) -> Swift.Void)) -> Self
  @discardableResult
  public func cellSetup(_ callback: @escaping ((Self.Cell, Self) -> Swift.Void)) -> Self
  @discardableResult
  public func onCellSelection(_ callback: @escaping ((Self.Cell, Self) -> Swift.Void)) -> Self
  @discardableResult
  public func onCellHighlightChanged(_ callback: @escaping (Self.Cell, Self) -> Swift.Void) -> Self
  @discardableResult
  public func onRowValidationChanged(_ callback: @escaping (Self.Cell, Self) -> Swift.Void) -> Self
}
precedencegroup FormPrecedence {
  associativity: left
  higherThan: LogicalConjunctionPrecedence
}
precedencegroup SectionPrecedence {
  associativity: left
  higherThan: FormPrecedence
}
infix operator +++ : FormPrecedence
@discardableResult
public func +++ (left: IncdOnboarding.Form, right: IncdOnboarding.Section) -> IncdOnboarding.Form
@discardableResult
public func +++ (left: IncdOnboarding.Form, right: IncdOnboarding.BaseRow) -> IncdOnboarding.Form
@discardableResult
public func +++ (left: IncdOnboarding.Section, right: IncdOnboarding.Section) -> IncdOnboarding.Form
@discardableResult
public func +++ (left: IncdOnboarding.Section, right: IncdOnboarding.BaseRow) -> IncdOnboarding.Form
@discardableResult
public func +++ (left: IncdOnboarding.BaseRow, right: IncdOnboarding.BaseRow) -> IncdOnboarding.Form
infix operator <<< : SectionPrecedence
@discardableResult
public func <<< (left: IncdOnboarding.Section, right: IncdOnboarding.BaseRow) -> IncdOnboarding.Section
@discardableResult
public func <<< (left: IncdOnboarding.BaseRow, right: IncdOnboarding.BaseRow) -> IncdOnboarding.Section
public func += <C>(lhs: inout IncdOnboarding.Section, rhs: C) where C : Swift.Collection, C.Element == IncdOnboarding.BaseRow
public func += <C>(lhs: inout IncdOnboarding.Form, rhs: C) where C : Swift.Collection, C.Element == IncdOnboarding.Section
public struct ValidationError : Swift.Equatable {
  public let msg: Swift.String
  public init(msg: Swift.String)
}
public func == (lhs: IncdOnboarding.ValidationError, rhs: IncdOnboarding.ValidationError) -> Swift.Bool
public protocol BaseRuleType {
  var id: Swift.String? { get set }
  var validationError: IncdOnboarding.ValidationError { get set }
}
public protocol RuleType : IncdOnboarding.BaseRuleType {
  associatedtype RowValueType
  func isValid(value: Self.RowValueType?) -> IncdOnboarding.ValidationError?
}
public struct ValidationOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let validatesOnDemand: IncdOnboarding.ValidationOptions
  public static let validatesOnChange: IncdOnboarding.ValidationOptions
  public static let validatesOnBlur: IncdOnboarding.ValidationOptions
  public static let validatesOnChangeAfterBlurred: IncdOnboarding.ValidationOptions
  public static let validatesAlways: IncdOnboarding.ValidationOptions
  public typealias Element = IncdOnboarding.ValidationOptions
  public typealias ArrayLiteralElement = IncdOnboarding.ValidationOptions
  public typealias RawValue = Swift.Int
}
public struct ValidationRuleHelper<T> where T : Swift.Equatable {
}
public struct RuleSet<T> where T : Swift.Equatable {
  public init()
  public mutating func add<Rule>(rule: Rule) where T == Rule.RowValueType, Rule : IncdOnboarding.RuleType
  public mutating func remove(ruleWithIdentifier identifier: Swift.String)
  public mutating func removeAllRules()
}
public enum SelectionType {
  case multipleSelection
  case singleSelection(enableDeselection: Swift.Bool)
}
public protocol SelectableSectionType : Swift.Collection {
  associatedtype SelectableRow : IncdOnboarding.BaseRow, IncdOnboarding.SelectableRowType
  var selectionType: IncdOnboarding.SelectionType { get set }
  var onSelectSelectableRow: ((Self.SelectableRow.Cell, Self.SelectableRow) -> Swift.Void)? { get set }
  func selectedRow() -> Self.SelectableRow?
  func selectedRows() -> [Self.SelectableRow]
}
extension SelectableSectionType where Self : AnyObject, Self.Element == IncdOnboarding.BaseRow {
  public func selectedRow() -> Self.SelectableRow?
  public func selectedRows() -> [Self.SelectableRow]
}
open class SelectableSection<Row> : IncdOnboarding.Section, IncdOnboarding.SelectableSectionType where Row : IncdOnboarding.BaseRow, Row : IncdOnboarding.SelectableRowType {
  public typealias SelectableRow = Row
  public var selectionType: IncdOnboarding.SelectionType
  public var onSelectSelectableRow: ((Row.Cell, Row) -> Swift.Void)?
  override public init(_ initializer: @escaping (IncdOnboarding.SelectableSection<Row>) -> Swift.Void)
  public init(_ header: Swift.String?, selectionType: IncdOnboarding.SelectionType, _ initializer: @escaping (IncdOnboarding.SelectableSection<Row>) -> Swift.Void = { _ in })
  public init(header: Swift.String?, footer: Swift.String?, selectionType: IncdOnboarding.SelectionType, _ initializer: @escaping (IncdOnboarding.SelectableSection<Row>) -> Swift.Void = { _ in })
  required public init()
  required public init<S>(_ elements: S) where S : Swift.Sequence, S.Element == IncdOnboarding.BaseRow
  override open func rowsHaveBeenAdded(_ rows: [IncdOnboarding.BaseRow], at: Foundation.IndexSet)
  @objc deinit
  override public init(_ header: Swift.String?, _ initializer: @escaping (IncdOnboarding.Section) -> Swift.Void = super)
  override public init(header: Swift.String?, footer: Swift.String?, _ initializer: (IncdOnboarding.Section) -> Swift.Void = super)
  override public init(footer: Swift.String?, _ initializer: (IncdOnboarding.Section) -> Swift.Void = super)
}
public protocol SectionDelegate : AnyObject {
  func rowsHaveBeenAdded(_ rows: [IncdOnboarding.BaseRow], at: Foundation.IndexSet)
  func rowsHaveBeenRemoved(_ rows: [IncdOnboarding.BaseRow], at: Foundation.IndexSet)
  func rowsHaveBeenReplaced(oldRows: [IncdOnboarding.BaseRow], newRows: [IncdOnboarding.BaseRow], at: Foundation.IndexSet)
}
extension Section : Swift.Equatable {
}
public func == (lhs: IncdOnboarding.Section, rhs: IncdOnboarding.Section) -> Swift.Bool
extension Section : IncdOnboarding.SectionDelegate {
}
extension Section {
  public func reload(with rowAnimation: UIKit.UITableView.RowAnimation = .none)
}
extension Section {
  public func rowBy<Row>(tag: Swift.String) -> Row? where Row : IncdOnboarding.RowType
}
open class Section : IncdOnboarding.Taggable {
  public var tag: Swift.String?
  weak public var form: IncdOnboarding.Form? {
    get
  }
  public var header: IncdOnboarding.HeaderFooterViewRepresentable? {
    get
    set
  }
  public var footer: IncdOnboarding.HeaderFooterViewRepresentable? {
    get
    set
  }
  public var index: Swift.Int? {
    get
  }
  public var hidden: IncdOnboarding.Condition? {
    get
    set
  }
  public var isHidden: Swift.Bool {
    get
  }
  public var allRows: [IncdOnboarding.BaseRow] {
    get
  }
  required public init()
  required public init<S>(_ elements: S) where S : Swift.Sequence, S.Element == IncdOnboarding.BaseRow
  public init(_ initializer: @escaping (IncdOnboarding.Section) -> Swift.Void)
  public init(_ header: Swift.String?, _ initializer: @escaping (IncdOnboarding.Section) -> Swift.Void = { _ in })
  public init(header: Swift.String?, footer: Swift.String?, _ initializer: (IncdOnboarding.Section) -> Swift.Void = { _ in })
  public init(footer: Swift.String?, _ initializer: (IncdOnboarding.Section) -> Swift.Void = { _ in })
  open func rowsHaveBeenAdded(_ rows: [IncdOnboarding.BaseRow], at: Foundation.IndexSet)
  open func rowsHaveBeenRemoved(_ rows: [IncdOnboarding.BaseRow], at: Foundation.IndexSet)
  open func rowsHaveBeenReplaced(oldRows: [IncdOnboarding.BaseRow], newRows: [IncdOnboarding.BaseRow], at: Foundation.IndexSet)
  @objc deinit
}
extension Section : Swift.MutableCollection, Swift.BidirectionalCollection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> IncdOnboarding.BaseRow {
    get
    set
  }
  public subscript(range: Swift.Range<Swift.Int>) -> Swift.ArraySlice<IncdOnboarding.BaseRow> {
    get
    set
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public func index(before i: Swift.Int) -> Swift.Int
  public typealias Element = IncdOnboarding.BaseRow
  public typealias Index = Swift.Int
  public typealias Iterator = Swift.IndexingIterator<IncdOnboarding.Section>
  public typealias SubSequence = Swift.ArraySlice<IncdOnboarding.BaseRow>
  public typealias Indices = Swift.DefaultIndices<IncdOnboarding.Section>
}
extension Section : Swift.RangeReplaceableCollection {
  public func append(_ formRow: IncdOnboarding.BaseRow)
  public func append<S>(contentsOf newElements: S) where S : Swift.Sequence, S.Element == IncdOnboarding.BaseRow
  public func replaceSubrange<C>(_ subrange: Swift.Range<Swift.Int>, with newElements: C) where C : Swift.Collection, C.Element == IncdOnboarding.BaseRow
  public func removeAll(keepingCapacity keepCapacity: Swift.Bool = false)
  @discardableResult
  public func remove(at position: Swift.Int) -> IncdOnboarding.BaseRow
}
extension Section {
  final public func evaluateHidden()
}
extension Section {
  public func insert(row newRow: IncdOnboarding.BaseRow, after previousRow: IncdOnboarding.BaseRow) throws
}
public struct MultivaluedOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let None: IncdOnboarding.MultivaluedOptions
  public static let Insert: IncdOnboarding.MultivaluedOptions
  public static let Delete: IncdOnboarding.MultivaluedOptions
  public static let Reorder: IncdOnboarding.MultivaluedOptions
  public typealias Element = IncdOnboarding.MultivaluedOptions
  public typealias ArrayLiteralElement = IncdOnboarding.MultivaluedOptions
  public typealias RawValue = Swift.Int
}
open class BaseMultivaluedSection : IncdOnboarding.Section {
  public var multivaluedOptions: IncdOnboarding.MultivaluedOptions
  public var showInsertIconInAddButton: Swift.Bool
  public var multivaluedRowToInsertAt: ((Swift.Int) -> IncdOnboarding.BaseRow)?
  required public init(multivaluedOptions: IncdOnboarding.MultivaluedOptions = MultivaluedOptions.Insert.union(.Delete), header: Swift.String? = nil, footer: Swift.String? = nil, _ initializer: (IncdOnboarding.BaseMultivaluedSection) -> Swift.Void = { _ in })
  required public init()
  required public init<S>(_ elements: S) where S : Swift.Sequence, S.Element == IncdOnboarding.BaseRow
  public func values() -> [Any?]
  @objc deinit
  override public init(_ initializer: @escaping (IncdOnboarding.Section) -> Swift.Void)
  override public init(_ header: Swift.String?, _ initializer: @escaping (IncdOnboarding.Section) -> Swift.Void = super)
  override public init(header: Swift.String?, footer: Swift.String?, _ initializer: (IncdOnboarding.Section) -> Swift.Void = super)
  override public init(footer: Swift.String?, _ initializer: (IncdOnboarding.Section) -> Swift.Void = super)
}
@_inheritsConvenienceInitializers open class GenericMultivaluedSection<AddButtonType> : IncdOnboarding.BaseMultivaluedSection where AddButtonType : IncdOnboarding.BaseRow, AddButtonType : IncdOnboarding.RowType {
  public var addButtonProvider: ((IncdOnboarding.GenericMultivaluedSection<AddButtonType>) -> AddButtonType)!
  required public init(multivaluedOptions: IncdOnboarding.MultivaluedOptions = MultivaluedOptions.Insert.union(.Delete), header: Swift.String? = nil, footer: Swift.String? = nil, _ initializer: (IncdOnboarding.GenericMultivaluedSection<AddButtonType>) -> Swift.Void = { _ in })
  required public init()
  required public init<S>(_ elements: S) where S : Swift.Sequence, S.Element == IncdOnboarding.BaseRow
  @objc deinit
}
@_inheritsConvenienceInitializers open class MultivaluedSection : IncdOnboarding.GenericMultivaluedSection<IncdOnboarding.ButtonRow> {
  @objc deinit
  required public init(multivaluedOptions: IncdOnboarding.MultivaluedOptions = super, header: Swift.String? = super, footer: Swift.String? = super, _ initializer: (IncdOnboarding.GenericMultivaluedSection<IncdOnboarding.ButtonRow>) -> Swift.Void = super)
  required public init()
  required public init<S>(_ elements: S) where S : Swift.Sequence, S.Element == IncdOnboarding.BaseRow
}
public protocol FormDelegate : AnyObject {
  func sectionsHaveBeenAdded(_ sections: [IncdOnboarding.Section], at: Foundation.IndexSet)
  func sectionsHaveBeenRemoved(_ sections: [IncdOnboarding.Section], at: Foundation.IndexSet)
  func sectionsHaveBeenReplaced(oldSections: [IncdOnboarding.Section], newSections: [IncdOnboarding.Section], at: Foundation.IndexSet)
  func rowsHaveBeenAdded(_ rows: [IncdOnboarding.BaseRow], at: [Foundation.IndexPath])
  func rowsHaveBeenRemoved(_ rows: [IncdOnboarding.BaseRow], at: [Foundation.IndexPath])
  func rowsHaveBeenReplaced(oldRows: [IncdOnboarding.BaseRow], newRows: [IncdOnboarding.BaseRow], at: [Foundation.IndexPath])
  func valueHasBeenChanged(for row: IncdOnboarding.BaseRow, oldValue: Any?, newValue: Any?)
}
final public class Form {
  public static var defaultNavigationOptions: IncdOnboarding.RowNavigationOptions
  public static var defaultInlineRowHideOptions: IncdOnboarding.InlineRowHideOptions
  final public var inlineRowHideOptions: IncdOnboarding.InlineRowHideOptions?
  public static var defaultKeyboardReturnType: IncdOnboarding.KeyboardReturnTypeConfiguration
  final public var keyboardReturnType: IncdOnboarding.KeyboardReturnTypeConfiguration?
  weak final public var delegate: IncdOnboarding.FormDelegate?
  public init()
  final public subscript(indexPath: Foundation.IndexPath) -> IncdOnboarding.BaseRow {
    get
  }
  final public func rowBy<T>(tag: Swift.String) -> IncdOnboarding.RowOf<T>? where T : Swift.Equatable
  final public func rowBy<Row>(tag: Swift.String) -> Row? where Row : IncdOnboarding.RowType
  final public func rowBy(tag: Swift.String) -> IncdOnboarding.BaseRow?
  final public func sectionBy(tag: Swift.String) -> IncdOnboarding.Section?
  final public func values(includeHidden: Swift.Bool = false) -> [Swift.String : Any?]
  final public func setValues(_ values: [Swift.String : Any?])
  final public var rows: [IncdOnboarding.BaseRow] {
    get
  }
  final public var allRows: [IncdOnboarding.BaseRow] {
    get
  }
  final public var allSections: [IncdOnboarding.Section] {
    get
  }
  final public func hideInlineRows()
  @objc deinit
}
extension Form : Swift.Collection {
  final public var startIndex: Swift.Int {
    get
  }
  final public var endIndex: Swift.Int {
    get
  }
  public typealias Element = IncdOnboarding.Section
  public typealias Index = Swift.Int
  public typealias Iterator = Swift.IndexingIterator<IncdOnboarding.Form>
  public typealias SubSequence = Swift.Slice<IncdOnboarding.Form>
  public typealias Indices = Swift.DefaultIndices<IncdOnboarding.Form>
}
extension Form : Swift.MutableCollection {
  final public subscript(position: Swift.Int) -> IncdOnboarding.Section {
    get
    set
  }
  final public func index(after i: Swift.Int) -> Swift.Int
  final public func index(before i: Swift.Int) -> Swift.Int
  final public var last: IncdOnboarding.Section? {
    get
  }
}
extension Form : Swift.RangeReplaceableCollection {
  final public func append(_ formSection: IncdOnboarding.Section)
  final public func append<S>(contentsOf newElements: S) where S : Swift.Sequence, S.Element == IncdOnboarding.Section
  final public func replaceSubrange<C>(_ subRange: Swift.Range<Swift.Int>, with newElements: C) where C : Swift.Collection, C.Element == IncdOnboarding.Section
  final public func removeAll(keepingCapacity keepCapacity: Swift.Bool = false)
}
extension Form {
  @discardableResult
  final public func validate(includeHidden: Swift.Bool = false, includeDisabled: Swift.Bool = true, quietly: Swift.Bool = false) -> [IncdOnboarding.ValidationError]
  final public func cleanValidationErrors()
}
public protocol SelectableRowType : IncdOnboarding.RowType {
  var selectableValue: Self.Cell.Value? { get set }
}
public struct CellProvider<Cell> where Cell : IncdOnboarding.BaseCell, Cell : IncdOnboarding.CellType {
  public var nibName: Swift.String? {
    get
  }
  public var bundle: Foundation.Bundle! {
    get
  }
  public init()
  public init(nibName: Swift.String, bundle: Foundation.Bundle? = nil)
}
public enum ControllerProvider<VCType> where VCType : UIKit.UIViewController {
  case callback(builder: (() -> VCType))
  case nibFile(name: Swift.String, bundle: Foundation.Bundle?)
  case storyBoard(storyboardId: Swift.String, storyboardName: Swift.String, bundle: Foundation.Bundle?)
}
public enum PresentationMode<VCType> where VCType : UIKit.UIViewController {
  case show(controllerProvider: IncdOnboarding.ControllerProvider<VCType>, onDismiss: ((UIKit.UIViewController) -> Swift.Void)?)
  case presentModally(controllerProvider: IncdOnboarding.ControllerProvider<VCType>, onDismiss: ((UIKit.UIViewController) -> Swift.Void)?)
  case segueName(segueName: Swift.String, onDismiss: ((UIKit.UIViewController) -> Swift.Void)?)
  case segueClass(segueClass: UIKit.UIStoryboardSegue.Type, onDismiss: ((UIKit.UIViewController) -> Swift.Void)?)
  case popover(controllerProvider: IncdOnboarding.ControllerProvider<VCType>, onDismiss: ((UIKit.UIViewController) -> Swift.Void)?)
  public var onDismissCallback: ((UIKit.UIViewController) -> Swift.Void)? {
    get
  }
  public func present(_ viewController: VCType!, row: IncdOnboarding.BaseRow, presentingController: IncdOnboarding.FormViewController)
  public func makeController() -> VCType?
}
public protocol FormatterProtocol {
  func getNewPosition(forPosition: UIKit.UITextPosition, inTextInput textInput: UIKit.UITextInput, oldValue: Swift.String?, newValue: Swift.String?) -> UIKit.UITextPosition
}
public enum Condition {
  case function([Swift.String], (IncdOnboarding.Form) -> Swift.Bool)
  case predicate(Foundation.NSPredicate)
}
extension Condition : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.Bool)
  public typealias BooleanLiteralType = Swift.Bool
}
extension Condition : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.String)
  public init(unicodeScalarLiteral value: Swift.String)
  public init(extendedGraphemeClusterLiteral value: Swift.String)
  public typealias StringLiteralType = Swift.String
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
public enum EurekaError : Swift.Error {
  case duplicatedTag(tag: Swift.String)
  case rowNotInSection(row: IncdOnboarding.BaseRow)
}
public protocol FormViewControllerProtocol {
  var tableView: UIKit.UITableView! { get }
  func beginEditing<T>(of: IncdOnboarding.Cell<T>) where T : Swift.Equatable
  func endEditing<T>(of: IncdOnboarding.Cell<T>) where T : Swift.Equatable
  func insertAnimation(forRows rows: [IncdOnboarding.BaseRow]) -> UIKit.UITableView.RowAnimation
  func deleteAnimation(forRows rows: [IncdOnboarding.BaseRow]) -> UIKit.UITableView.RowAnimation
  func reloadAnimation(oldRows: [IncdOnboarding.BaseRow], newRows: [IncdOnboarding.BaseRow]) -> UIKit.UITableView.RowAnimation
  func insertAnimation(forSections sections: [IncdOnboarding.Section]) -> UIKit.UITableView.RowAnimation
  func deleteAnimation(forSections sections: [IncdOnboarding.Section]) -> UIKit.UITableView.RowAnimation
  func reloadAnimation(oldSections: [IncdOnboarding.Section], newSections: [IncdOnboarding.Section]) -> UIKit.UITableView.RowAnimation
}
public struct RowNavigationOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let Disabled: IncdOnboarding.RowNavigationOptions
  public static let Enabled: IncdOnboarding.RowNavigationOptions
  public static let StopDisabledRow: IncdOnboarding.RowNavigationOptions
  public static let SkipCanNotBecomeFirstResponderRow: IncdOnboarding.RowNavigationOptions
  public typealias Element = IncdOnboarding.RowNavigationOptions
  public typealias ArrayLiteralElement = IncdOnboarding.RowNavigationOptions
  public typealias RawValue = Swift.Int
}
public struct KeyboardReturnTypeConfiguration {
  public var nextKeyboardType: UIKit.UIReturnKeyType
  public var defaultKeyboardType: UIKit.UIReturnKeyType
  public init()
  public init(nextKeyboardType: UIKit.UIReturnKeyType, defaultKeyboardType: UIKit.UIReturnKeyType)
}
public struct InlineRowHideOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let Never: IncdOnboarding.InlineRowHideOptions
  public static let AnotherInlineRowIsShown: IncdOnboarding.InlineRowHideOptions
  public static let FirstResponderChanges: IncdOnboarding.InlineRowHideOptions
  public typealias Element = IncdOnboarding.InlineRowHideOptions
  public typealias ArrayLiteralElement = IncdOnboarding.InlineRowHideOptions
  public typealias RawValue = Swift.Int
}
@objc @_inheritsConvenienceInitializers open class FormViewController : UIKit.UIViewController, IncdOnboarding.FormViewControllerProtocol, IncdOnboarding.FormDelegate {
  @objc @IBOutlet public var tableView: UIKit.UITableView!
  public var form: IncdOnboarding.Form {
    get
    set
  }
  open var rowKeyboardSpacing: CoreGraphics.CGFloat
  open var animateScroll: Swift.Bool
  open var customNavigationAccessoryView: (UIKit.UIView & IncdOnboarding.NavigationAccessory)? {
    get
  }
  public var navigationOptions: IncdOnboarding.RowNavigationOptions?
  public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  open func inputAccessoryView(for row: IncdOnboarding.BaseRow) -> UIKit.UIView?
  final public func beginEditing<T>(of cell: IncdOnboarding.Cell<T>) where T : Swift.Equatable
  final public func endEditing<T>(of cell: IncdOnboarding.Cell<T>) where T : Swift.Equatable
  open func insertAnimation(forRows rows: [IncdOnboarding.BaseRow]) -> UIKit.UITableView.RowAnimation
  open func deleteAnimation(forRows rows: [IncdOnboarding.BaseRow]) -> UIKit.UITableView.RowAnimation
  open func reloadAnimation(oldRows: [IncdOnboarding.BaseRow], newRows: [IncdOnboarding.BaseRow]) -> UIKit.UITableView.RowAnimation
  open func insertAnimation(forSections sections: [IncdOnboarding.Section]) -> UIKit.UITableView.RowAnimation
  open func deleteAnimation(forSections sections: [IncdOnboarding.Section]) -> UIKit.UITableView.RowAnimation
  open func reloadAnimation(oldSections: [IncdOnboarding.Section], newSections: [IncdOnboarding.Section]) -> UIKit.UITableView.RowAnimation
  open func textInputShouldBeginEditing<T>(_ textInput: UIKit.UITextInput, cell: IncdOnboarding.Cell<T>) -> Swift.Bool where T : Swift.Equatable
  open func textInputDidBeginEditing<T>(_ textInput: UIKit.UITextInput, cell: IncdOnboarding.Cell<T>) where T : Swift.Equatable
  open func textInputShouldEndEditing<T>(_ textInput: UIKit.UITextInput, cell: IncdOnboarding.Cell<T>) -> Swift.Bool where T : Swift.Equatable
  open func textInputDidEndEditing<T>(_ textInput: UIKit.UITextInput, cell: IncdOnboarding.Cell<T>) where T : Swift.Equatable
  open func textInput<T>(_ textInput: UIKit.UITextInput, shouldChangeCharactersInRange range: Foundation.NSRange, replacementString string: Swift.String, cell: IncdOnboarding.Cell<T>) -> Swift.Bool where T : Swift.Equatable
  open func textInputShouldClear<T>(_ textInput: UIKit.UITextInput, cell: IncdOnboarding.Cell<T>) -> Swift.Bool where T : Swift.Equatable
  open func textInputShouldReturn<T>(_ textInput: UIKit.UITextInput, cell: IncdOnboarding.Cell<T>) -> Swift.Bool where T : Swift.Equatable
  open func valueHasBeenChanged(for: IncdOnboarding.BaseRow, oldValue: Any?, newValue: Any?)
  @objc open func tableView(_ tableView: UIKit.UITableView, willBeginReorderingRowAtIndexPath indexPath: Foundation.IndexPath)
  open func sectionsHaveBeenAdded(_ sections: [IncdOnboarding.Section], at indexes: Foundation.IndexSet)
  open func sectionsHaveBeenRemoved(_ sections: [IncdOnboarding.Section], at indexes: Foundation.IndexSet)
  open func sectionsHaveBeenReplaced(oldSections: [IncdOnboarding.Section], newSections: [IncdOnboarding.Section], at indexes: Foundation.IndexSet)
  open func rowsHaveBeenAdded(_ rows: [IncdOnboarding.BaseRow], at indexes: [Foundation.IndexPath])
  open func rowsHaveBeenRemoved(_ rows: [IncdOnboarding.BaseRow], at indexes: [Foundation.IndexPath])
  open func rowsHaveBeenReplaced(oldRows: [IncdOnboarding.BaseRow], newRows: [IncdOnboarding.BaseRow], at indexes: [Foundation.IndexPath])
  @objc deinit
}
extension FormViewController : UIKit.UITableViewDelegate {
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, willSelectRowAt indexPath: Foundation.IndexPath) -> Foundation.IndexPath?
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForHeaderInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, canEditRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, commit editingStyle: UIKit.UITableViewCell.EditingStyle, forRowAt indexPath: Foundation.IndexPath)
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, canMoveRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, targetIndexPathForMoveFromRowAt sourceIndexPath: Foundation.IndexPath, toProposedIndexPath proposedDestinationIndexPath: Foundation.IndexPath) -> Foundation.IndexPath
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, moveRowAt sourceIndexPath: Foundation.IndexPath, to destinationIndexPath: Foundation.IndexPath)
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, editingStyleForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, shouldIndentWhileEditingRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @available(iOS 11, *)
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, leadingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @available(iOS 11, *)
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @available(iOS, deprecated: 13, message: "UITableViewRowAction is deprecated, use leading/trailingSwipe actions instead")
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, editActionsForRowAt indexPath: Foundation.IndexPath) -> [UIKit.UITableViewRowAction]?
}
extension FormViewController : UIKit.UITableViewDataSource {
  @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, titleForFooterInSection section: Swift.Int) -> Swift.String?
  @objc dynamic open func sectionIndexTitles(for tableView: UIKit.UITableView) -> [Swift.String]?
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, sectionForSectionIndexTitle title: Swift.String, at index: Swift.Int) -> Swift.Int
}
extension FormViewController : UIKit.UIScrollViewDelegate {
  @objc dynamic open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
}
extension FormViewController {
  @objc dynamic open func keyboardWillShow(_ notification: Foundation.Notification)
  @objc dynamic open func keyboardWillHide(_ notification: Foundation.Notification)
}
public enum Direction {
  case up, down
  public static func == (a: IncdOnboarding.Direction, b: IncdOnboarding.Direction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension FormViewController {
  public func navigateTo(direction: IncdOnboarding.Direction)
}
@_inheritsConvenienceInitializers open class RowOf<T> : IncdOnboarding.BaseRow where T : Swift.Equatable {
  open var value: T? {
    get
    set(newValue)
  }
  open var resetValue: T?
  override public var baseValue: Any? {
    get
    set
  }
  public var displayValueFor: ((T?) -> Swift.String?)?
  required public init(tag: Swift.String?)
  public var rules: [IncdOnboarding.ValidationRuleHelper<T>] {
    get
  }
  @discardableResult
  override open func validate(quietly: Swift.Bool = false) -> [IncdOnboarding.ValidationError]
  public func resetRowValue()
  public func add<Rule>(rule: Rule) where T == Rule.RowValueType, Rule : IncdOnboarding.RuleType
  public func add(ruleSet: IncdOnboarding.RuleSet<T>)
  public func remove(ruleWithIdentifier identifier: Swift.String)
  public func removeAllRules()
  @objc deinit
}
@_inheritsConvenienceInitializers open class Row<Cell> : IncdOnboarding.RowOf<Cell.Value>, IncdOnboarding.TypedRowType where Cell : IncdOnboarding.BaseCell, Cell : IncdOnboarding.CellType {
  public var cellProvider: IncdOnboarding.CellProvider<Cell>
  final public let cellType: Cell.Type!
  public var cell: Cell! {
    get
  }
  override public var baseCell: IncdOnboarding.BaseCell {
    get
  }
  required public init(tag: Swift.String?)
  override open func updateCell()
  override open func didSelect()
  open func customDidSelect()
  open func customUpdateCell()
  @objc deinit
}
public protocol NavigationAccessory {
  var doneClosure: (() -> ())? { get set }
  var nextClosure: (() -> ())? { get set }
  var previousClosure: (() -> ())? { get set }
  var previousEnabled: Swift.Bool { get set }
  var nextEnabled: Swift.Bool { get set }
}
@objc @_inheritsConvenienceInitializers open class NavigationAccessoryView : UIKit.UIToolbar, IncdOnboarding.NavigationAccessory {
  open var previousButton: UIKit.UIBarButtonItem!
  open var nextButton: UIKit.UIBarButtonItem!
  open var doneButton: UIKit.UIBarButtonItem
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  public var doneClosure: (() -> ())?
  public var nextClosure: (() -> ())?
  public var previousClosure: (() -> ())?
  public var previousEnabled: Swift.Bool {
    get
    set
  }
  public var nextEnabled: Swift.Bool {
    get
    set
  }
  @objc deinit
}
public struct RuleEqualsToRow<T> : IncdOnboarding.RuleType where T : Swift.Equatable {
  public init(form: IncdOnboarding.Form, tag: Swift.String, msg: Swift.String = "Fields don't match!", id: Swift.String? = nil)
  public init(row: IncdOnboarding.RowOf<T>, msg: Swift.String = "Fields don't match!", id: Swift.String? = nil)
  public var id: Swift.String?
  public var validationError: IncdOnboarding.ValidationError
  weak public var form: IncdOnboarding.Form?
  public var tag: Swift.String?
  weak public var row: IncdOnboarding.RowOf<T>?
  public func isValid(value: T?) -> IncdOnboarding.ValidationError?
  public typealias RowValueType = T
}
public struct RuleGreaterThan<T> : IncdOnboarding.RuleType where T : Swift.Comparable {
  public var id: Swift.String?
  public var validationError: IncdOnboarding.ValidationError
  public init(min: T, msg: Swift.String? = nil, id: Swift.String? = nil)
  public func isValid(value: T?) -> IncdOnboarding.ValidationError?
  public typealias RowValueType = T
}
public struct RuleGreaterOrEqualThan<T> : IncdOnboarding.RuleType where T : Swift.Comparable {
  public var id: Swift.String?
  public var validationError: IncdOnboarding.ValidationError
  public init(min: T, msg: Swift.String? = nil, id: Swift.String? = nil)
  public func isValid(value: T?) -> IncdOnboarding.ValidationError?
  public typealias RowValueType = T
}
public struct RuleSmallerThan<T> : IncdOnboarding.RuleType where T : Swift.Comparable {
  public var id: Swift.String?
  public var validationError: IncdOnboarding.ValidationError
  public init(max: T, msg: Swift.String? = nil, id: Swift.String? = nil)
  public func isValid(value: T?) -> IncdOnboarding.ValidationError?
  public typealias RowValueType = T
}
public struct RuleSmallerOrEqualThan<T> : IncdOnboarding.RuleType where T : Swift.Comparable {
  public var id: Swift.String?
  public var validationError: IncdOnboarding.ValidationError
  public init(max: T, msg: Swift.String? = nil, id: Swift.String? = nil)
  public func isValid(value: T?) -> IncdOnboarding.ValidationError?
  public typealias RowValueType = T
}
public struct RuleMinLength : IncdOnboarding.RuleType {
  public var id: Swift.String?
  public var validationError: IncdOnboarding.ValidationError
  public init(minLength: Swift.UInt, msg: Swift.String? = nil, id: Swift.String? = nil)
  public func isValid(value: Swift.String?) -> IncdOnboarding.ValidationError?
  public typealias RowValueType = Swift.String
}
public struct RuleMaxLength : IncdOnboarding.RuleType {
  public var id: Swift.String?
  public var validationError: IncdOnboarding.ValidationError
  public init(maxLength: Swift.UInt, msg: Swift.String? = nil, id: Swift.String? = nil)
  public func isValid(value: Swift.String?) -> IncdOnboarding.ValidationError?
  public typealias RowValueType = Swift.String
}
public struct RuleExactLength : IncdOnboarding.RuleType {
  public var id: Swift.String?
  public var validationError: IncdOnboarding.ValidationError
  public init(exactLength: Swift.UInt, msg: Swift.String? = nil, id: Swift.String? = nil)
  public func isValid(value: Swift.String?) -> IncdOnboarding.ValidationError?
  public typealias RowValueType = Swift.String
}
public struct RuleRequired<T> : IncdOnboarding.RuleType where T : Swift.Equatable {
  public init(msg: Swift.String = "Field required!", id: Swift.String? = nil)
  public var id: Swift.String?
  public var validationError: IncdOnboarding.ValidationError
  public func isValid(value: T?) -> IncdOnboarding.ValidationError?
  public typealias RowValueType = T
}
public struct RuleURL : IncdOnboarding.RuleType {
  public init(allowsEmpty: Swift.Bool = true, requiresProtocol: Swift.Bool = false, msg: Swift.String = "Field value must be an URL!", id: Swift.String? = nil)
  public var id: Swift.String?
  public var allowsEmpty: Swift.Bool
  public var requiresProtocol: Swift.Bool
  public var validationError: IncdOnboarding.ValidationError
  public func isValid(value: Foundation.URL?) -> IncdOnboarding.ValidationError?
  public typealias RowValueType = Foundation.URL
}
public class RuleEmail : IncdOnboarding.RuleRegExp {
  public init(msg: Swift.String = "Field value should be a valid email!", id: Swift.String? = nil)
  @objc deinit
  override public init(regExpr: Swift.String, allowsEmpty: Swift.Bool = super, msg: Swift.String = super, id: Swift.String? = super)
}
public enum RegExprPattern : Swift.String {
  case EmailAddress
  case URL
  case ContainsNumber
  case ContainsCapital
  case ContainsLowercase
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
open class RuleRegExp : IncdOnboarding.RuleType {
  public var regExpr: Swift.String
  public var id: Swift.String?
  public var validationError: IncdOnboarding.ValidationError
  public var allowsEmpty: Swift.Bool
  public init(regExpr: Swift.String, allowsEmpty: Swift.Bool = true, msg: Swift.String = "Invalid field value!", id: Swift.String? = nil)
  public func isValid(value: Swift.String?) -> IncdOnboarding.ValidationError?
  @objc deinit
  public typealias RowValueType = Swift.String
}
extension IncdFaceDetector {
  public var faceDetectorConfigViewController: UIKit.UIViewController {
    get
  }
  public var timeoutDuration: Foundation.TimeInterval {
    get
    set
  }
  public var drawFaceLandmarks: Swift.Bool {
    get
    set
  }
  public var allowMultipleFaces: Swift.Bool {
    get
    set
  }
  public var allowWhileAdjustingCamera: Swift.Bool {
    get
    set
  }
  public var faceCaptureQualityThreshold: Swift.Float {
    get
    set
  }
  public var minFaceSize: Swift.Double {
    get
    set
  }
  public var maxFaceAreaCheck: Swift.Bool {
    get
    set
  }
  public var maxFaceArea: Swift.Double {
    get
    set
  }
  public var closedEyeCheck: Swift.Bool {
    get
    set
  }
  public var closedEyeThreshold: CoreGraphics.CGFloat {
    get
    set
  }
  public var brightnessCheck: Swift.Bool {
    get
    set
  }
  public var brightnessThreshold: Swift.Float {
    get
    set
  }
  public var blurrinessCheck: Swift.Bool {
    get
    set
  }
  public var blurrinessThreshold: Swift.Float {
    get
    set
  }
  public var faceAngleCheck: Swift.Bool {
    get
    set
  }
  public var faceXAngleMinThreshold: Swift.Float {
    get
    set
  }
  public var faceXAngleMaxThreshold: Swift.Float {
    get
    set
  }
  public var faceYAngleMinThreshold: Swift.Float {
    get
    set
  }
  public var faceYAngleMaxThreshold: Swift.Float {
    get
    set
  }
  public var faceZAngleThreshold: Swift.Float {
    get
    set
  }
  public var lensesCheck: Swift.Bool {
    get
    set
  }
  public var localSpoofCheck: Swift.Bool {
    get
    set
  }
  public var localSpoofThreshold: Swift.Float {
    get
    set
  }
}
public struct RuleClosure<T> : IncdOnboarding.RuleType where T : Swift.Equatable {
  public var id: Swift.String?
  public var validationError: IncdOnboarding.ValidationError
  public var closure: (T?) -> IncdOnboarding.ValidationError?
  public func isValid(value: T?) -> IncdOnboarding.ValidationError?
  public init(validationError: IncdOnboarding.ValidationError = ValidationError(msg: "Field validation fails.."), id: Swift.String? = nil, closure: @escaping ((T?) -> IncdOnboarding.ValidationError?))
  public typealias RowValueType = T
}
@_inheritsConvenienceInitializers open class _MultipleSelectorRow<T, Cell> : IncdOnboarding.GenericMultipleSelectorRow<T, Cell> where T : Swift.Hashable, Cell : IncdOnboarding.BaseCell, Cell : IncdOnboarding.CellType, Cell.Value == Swift.Set<T> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class MultipleSelectorRow<T> : IncdOnboarding._MultipleSelectorRow<T, IncdOnboarding.PushSelectorCell<Swift.Set<T>>>, IncdOnboarding.RowType where T : Swift.Hashable {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SliderCell : IncdOnboarding.Cell<Swift.Float>, IncdOnboarding.CellType {
  @objc @IBOutlet weak open var titleLabel: UIKit.UILabel!
  @objc @IBOutlet weak open var valueLabel: UIKit.UILabel!
  @objc @IBOutlet weak open var slider: UIKit.UISlider!
  open var formatter: Foundation.NumberFormatter?
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  override open func update()
  @objc override dynamic open func updateConstraints()
  open var dynamicConstraints: [UIKit.NSLayoutConstraint]
  open func customConstraints()
}
@_inheritsConvenienceInitializers final public class SliderRow : IncdOnboarding.Row<IncdOnboarding.SliderCell>, IncdOnboarding.RowType {
  final public var steps: Swift.UInt
  final public var shouldHideValue: Swift.Bool
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class LabelCellOf<T> : IncdOnboarding.Cell<T>, IncdOnboarding.CellType where T : Swift.Equatable {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
}
public typealias LabelCell = IncdOnboarding.LabelCellOf<Swift.String>
@_inheritsConvenienceInitializers open class _LabelRow : IncdOnboarding.Row<IncdOnboarding.LabelCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class LabelRow : IncdOnboarding._LabelRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class StepperCell : IncdOnboarding.Cell<Swift.Double>, IncdOnboarding.CellType {
  @objc @IBOutlet weak open var stepper: UIKit.UIStepper!
  @objc @IBOutlet weak open var valueLabel: UIKit.UILabel!
  @objc @IBOutlet weak open var titleLabel: UIKit.UILabel!
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  open func setupValueLabel()
  override open func update()
  @objc deinit
  @objc override dynamic open func updateConstraints()
  open var dynamicConstraints: [UIKit.NSLayoutConstraint]
  open func customConstraints()
}
@_inheritsConvenienceInitializers open class _StepperRow : IncdOnboarding.Row<IncdOnboarding.StepperCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class StepperRow : IncdOnboarding._StepperRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class PickerInlineCell<T> : IncdOnboarding.Cell<T>, IncdOnboarding.CellType where T : Swift.Equatable {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  override open func update()
  override open func didSelect()
  @objc deinit
}
@_inheritsConvenienceInitializers open class _PickerInlineRow<T> : IncdOnboarding.Row<IncdOnboarding.PickerInlineCell<T>>, IncdOnboarding.NoValueDisplayTextConformance where T : Swift.Equatable {
  public typealias InlineRow = IncdOnboarding.PickerRow<T>
  open var options: [T]
  open var noValueDisplayText: Swift.String?
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class PickerInlineRow<T> : IncdOnboarding._PickerInlineRow<T>, IncdOnboarding.RowType, IncdOnboarding.InlineRowType where T : Swift.Equatable {
  required public init(tag: Swift.String?)
  override final public func customDidSelect()
  final public func setupInlineRow(_ inlineRow: IncdOnboarding.PickerInlineRow<T>.InlineRow)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _DoublePickerInlineRow<A, B> : IncdOnboarding.Row<IncdOnboarding.PickerInlineCell<IncdOnboarding.Tuple<A, B>>>, IncdOnboarding.NoValueDisplayTextConformance where A : Swift.Equatable, B : Swift.Equatable {
  public typealias InlineRow = IncdOnboarding.DoublePickerRow<A, B>
  public var firstOptions: () -> [A]
  public var secondOptions: (A) -> [B]
  public var noValueDisplayText: Swift.String?
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class DoublePickerInlineRow<A, B> : IncdOnboarding._DoublePickerInlineRow<A, B>, IncdOnboarding.RowType, IncdOnboarding.InlineRowType where A : Swift.Equatable, B : Swift.Equatable {
  required public init(tag: Swift.String?)
  override final public func customDidSelect()
  final public func setupInlineRow(_ inlineRow: IncdOnboarding.DoublePickerInlineRow<A, B>.InlineRow)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _TriplePickerInlineRow<A, B, C> : IncdOnboarding.Row<IncdOnboarding.PickerInlineCell<IncdOnboarding.Tuple3<A, B, C>>>, IncdOnboarding.NoValueDisplayTextConformance where A : Swift.Equatable, B : Swift.Equatable, C : Swift.Equatable {
  public typealias InlineRow = IncdOnboarding.TriplePickerRow<A, B, C>
  public var firstOptions: () -> [A]
  public var secondOptions: (A) -> [B]
  public var thirdOptions: (A, B) -> [C]
  open var noValueDisplayText: Swift.String?
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class TriplePickerInlineRow<A, B, C> : IncdOnboarding._TriplePickerInlineRow<A, B, C>, IncdOnboarding.RowType, IncdOnboarding.InlineRowType where A : Swift.Equatable, B : Swift.Equatable, C : Swift.Equatable {
  required public init(tag: Swift.String?)
  override final public func customDidSelect()
  final public func setupInlineRow(_ inlineRow: IncdOnboarding.TriplePickerInlineRow<A, B, C>.InlineRow)
  @objc deinit
}
@_inheritsConvenienceInitializers open class SegmentedCell<T> : IncdOnboarding.Cell<T>, IncdOnboarding.CellType where T : Swift.Equatable {
  @objc @IBOutlet weak public var segmentedControl: UIKit.UISegmentedControl!
  @objc @IBOutlet weak public var titleLabel: UIKit.UILabel?
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func awakeFromNib()
  @objc deinit
  override open func setup()
  override open func update()
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc override dynamic open func updateConstraints()
}
@_inheritsConvenienceInitializers final public class SegmentedRow<T> : IncdOnboarding.OptionsRow<IncdOnboarding.SegmentedCell<T>>, IncdOnboarding.RowType where T : Swift.Equatable {
  required public init(tag: Swift.String?)
  @objc deinit
}
public enum TextAreaHeight {
  case fixed(cellHeight: CoreGraphics.CGFloat)
  case dynamic(initialTextViewHeight: CoreGraphics.CGFloat)
}
public enum TextAreaMode {
  case normal
  case readOnly
  public static func == (a: IncdOnboarding.TextAreaMode, b: IncdOnboarding.TextAreaMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol AreaCell : IncdOnboarding.TextInputCell {
  var textView: UIKit.UITextView! { get }
}
extension AreaCell {
  public var textInput: UIKit.UITextInput {
    get
  }
}
@_inheritsConvenienceInitializers open class _TextAreaCell<T> : IncdOnboarding.Cell<T>, UIKit.UITextViewDelegate, IncdOnboarding.AreaCell where T : IncdOnboarding.InputTypeInitiable, T : Swift.Equatable {
  @objc @IBOutlet weak public var textView: UIKit.UITextView!
  @objc @IBOutlet weak public var placeholderLabel: UIKit.UILabel?
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func awakeFromNib()
  open var dynamicConstraints: [UIKit.NSLayoutConstraint]
  override open func setup()
  @objc deinit
  override open func update()
  override open func cellCanBecomeFirstResponder() -> Swift.Bool
  override open func cellBecomeFirstResponder(withDirection: IncdOnboarding.Direction) -> Swift.Bool
  override open func cellResignFirstResponder() -> Swift.Bool
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc open func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @objc open func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @objc open func textViewDidChange(_ textView: UIKit.UITextView)
  @objc open func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @objc open func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @objc open func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @objc override dynamic open func updateConstraints()
  open func customConstraints()
}
@_inheritsConvenienceInitializers open class TextAreaCell : IncdOnboarding._TextAreaCell<Swift.String>, IncdOnboarding.CellType {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers open class AreaRow<Cell> : IncdOnboarding.FormatteableRow<Cell> where Cell : IncdOnboarding.BaseCell, Cell : IncdOnboarding.AreaCell, Cell : IncdOnboarding.CellType {
  open var placeholder: Swift.String?
  open var textAreaHeight: IncdOnboarding.TextAreaHeight
  open var textAreaMode: IncdOnboarding.TextAreaMode
  open var titlePercentage: CoreGraphics.CGFloat?
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _TextAreaRow : IncdOnboarding.AreaRow<IncdOnboarding.TextAreaCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class TextAreaRow : IncdOnboarding._TextAreaRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _AlertRow<Cell> : IncdOnboarding.AlertOptionsRow<Cell>, IncdOnboarding.PresenterRowType where Cell : IncdOnboarding.BaseCell, Cell : IncdOnboarding.CellType {
  public typealias PresentedController = IncdOnboarding.SelectorAlertController<IncdOnboarding._AlertRow<Cell>>
  open var onPresentCallback: ((IncdOnboarding.FormViewController, IncdOnboarding._AlertRow<Cell>.PresentedController) -> Swift.Void)?
  open var presentationMode: IncdOnboarding.PresentationMode<IncdOnboarding._AlertRow<Cell>.PresentedController>? {
    get
    set
  }
  required public init(tag: Swift.String?)
  override open func customDidSelect()
  @objc deinit
  public typealias PresentedControllerType = IncdOnboarding.SelectorAlertController<IncdOnboarding._AlertRow<Cell>>
}
@_inheritsConvenienceInitializers final public class AlertRow<T> : IncdOnboarding._AlertRow<IncdOnboarding.AlertSelectorCell<T>>, IncdOnboarding.RowType where T : Swift.Equatable {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class ListCheckCell<T> : IncdOnboarding.Cell<T>, IncdOnboarding.CellType where T : Swift.Equatable {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func update()
  override open func setup()
  override open func didSelect()
  @objc deinit
}
@_inheritsConvenienceInitializers final public class ListCheckRow<T> : IncdOnboarding.Row<IncdOnboarding.ListCheckCell<T>>, IncdOnboarding.SelectableRowType, IncdOnboarding.RowType where T : Swift.Equatable {
  final public var selectableValue: T?
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _DateRow : IncdOnboarding._DateFieldRow {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _TimeRow : IncdOnboarding._DateFieldRow {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _DateTimeRow : IncdOnboarding._DateFieldRow {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _CountDownRow : IncdOnboarding._DateFieldRow {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class DateRow : IncdOnboarding._DateRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class TimeRow : IncdOnboarding._TimeRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class DateTimeRow : IncdOnboarding._DateTimeRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class CountDownRow : IncdOnboarding._CountDownRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class PushSelectorCell<T> : IncdOnboarding.Cell<T>, IncdOnboarding.CellType where T : Swift.Equatable {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func update()
  @objc deinit
}
@_inheritsConvenienceInitializers open class SelectorRow<Cell> : IncdOnboarding.OptionsRow<Cell>, IncdOnboarding.PresenterRowType where Cell : IncdOnboarding.BaseCell, Cell : IncdOnboarding.CellType {
  open var presentationMode: IncdOnboarding.PresentationMode<IncdOnboarding.SelectorViewController<IncdOnboarding.SelectorRow<Cell>>>?
  open var onPresentCallback: ((IncdOnboarding.FormViewController, IncdOnboarding.SelectorViewController<IncdOnboarding.SelectorRow<Cell>>) -> Swift.Void)?
  required public init(tag: Swift.String?)
  override open func customDidSelect()
  override open func prepare(for segue: UIKit.UIStoryboardSegue)
  @objc deinit
  public typealias PresentedControllerType = IncdOnboarding.SelectorViewController<IncdOnboarding.SelectorRow<Cell>>
}
@_inheritsConvenienceInitializers open class DateInlineCell : IncdOnboarding.Cell<Foundation.Date>, IncdOnboarding.CellType {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  override open func update()
  override open func didSelect()
  @objc deinit
}
@_inheritsConvenienceInitializers open class _DateInlineFieldRow : IncdOnboarding.Row<IncdOnboarding.DateInlineCell>, IncdOnboarding.DatePickerRowProtocol, IncdOnboarding.NoValueDisplayTextConformance {
  open var minimumDate: Foundation.Date?
  open var maximumDate: Foundation.Date?
  open var minuteInterval: Swift.Int?
  open var dateFormatter: Foundation.DateFormatter?
  open var noValueDisplayText: Swift.String?
  required public init(tag: Swift.String?)
  @objc deinit
}
public protocol DatePickerRowProtocol : AnyObject {
  var minimumDate: Foundation.Date? { get set }
  var maximumDate: Foundation.Date? { get set }
  var minuteInterval: Swift.Int? { get set }
}
@_inheritsConvenienceInitializers open class DateCell : IncdOnboarding.Cell<Foundation.Date>, IncdOnboarding.CellType {
  public var datePicker: UIKit.UIDatePicker
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
  override open func update()
  override open func didSelect()
  @objc override dynamic open var inputView: UIKit.UIView? {
    @objc get
  }
  override open func cellCanBecomeFirstResponder() -> Swift.Bool
  @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
}
@_inheritsConvenienceInitializers open class _DateFieldRow : IncdOnboarding.Row<IncdOnboarding.DateCell>, IncdOnboarding.DatePickerRowProtocol, IncdOnboarding.NoValueDisplayTextConformance {
  open var minimumDate: Foundation.Date?
  open var maximumDate: Foundation.Date?
  open var minuteInterval: Swift.Int?
  open var dateFormatter: Foundation.DateFormatter?
  open var noValueDisplayText: Swift.String?
  required public init(tag: Swift.String?)
  @objc deinit
}
public protocol InputTypeInitiable {
  init?(string stringValue: Swift.String)
}
public protocol FieldRowConformance : IncdOnboarding.FormatterConformance {
  var titlePercentage: CoreGraphics.CGFloat? { get set }
  var placeholder: Swift.String? { get set }
  var placeholderColor: UIKit.UIColor? { get set }
}
extension Int : IncdOnboarding.InputTypeInitiable {
  public init?(string stringValue: Swift.String)
}
extension Float : IncdOnboarding.InputTypeInitiable {
  public init?(string stringValue: Swift.String)
}
extension String : IncdOnboarding.InputTypeInitiable {
  public init?(string stringValue: Swift.String)
}
extension URL : IncdOnboarding.InputTypeInitiable {
}
extension Double : IncdOnboarding.InputTypeInitiable {
  public init?(string stringValue: Swift.String)
}
@_inheritsConvenienceInitializers open class FormatteableRow<Cell> : IncdOnboarding.Row<Cell>, IncdOnboarding.FormatterConformance where Cell : IncdOnboarding.BaseCell, Cell : IncdOnboarding.CellType, Cell : IncdOnboarding.TextInputCell {
  open var formatter: Foundation.Formatter?
  open var useFormatterDuringInput: Swift.Bool
  open var useFormatterOnDidBeginEditing: Swift.Bool?
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class FieldRow<Cell> : IncdOnboarding.FormatteableRow<Cell>, IncdOnboarding.FieldRowConformance, IncdOnboarding.KeyboardReturnHandler where Cell : IncdOnboarding.BaseCell, Cell : IncdOnboarding.CellType, Cell : IncdOnboarding.TextFieldCell {
  open var keyboardReturnType: IncdOnboarding.KeyboardReturnTypeConfiguration?
  @available(*, deprecated, message: "Use titlePercentage instead")
  open var textFieldPercentage: CoreGraphics.CGFloat? {
    get
    set
  }
  open var titlePercentage: CoreGraphics.CGFloat?
  open var placeholder: Swift.String?
  open var placeholderColor: UIKit.UIColor?
  required public init(tag: Swift.String?)
  @objc deinit
}
public protocol TextInputCell {
  var textInput: UIKit.UITextInput { get }
}
public protocol TextFieldCell : IncdOnboarding.TextInputCell {
  var textField: UIKit.UITextField! { get }
}
extension TextFieldCell {
  public var textInput: UIKit.UITextInput {
    get
  }
}
@_inheritsConvenienceInitializers open class _FieldCell<T> : IncdOnboarding.Cell<T>, UIKit.UITextFieldDelegate, IncdOnboarding.TextFieldCell where T : IncdOnboarding.InputTypeInitiable, T : Swift.Equatable {
  @objc @IBOutlet weak public var textField: UIKit.UITextField!
  @objc @IBOutlet weak public var titleLabel: UIKit.UILabel?
  open var dynamicConstraints: [UIKit.NSLayoutConstraint]
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func awakeFromNib()
  @objc deinit
  override open func setup()
  override open func update()
  override open func cellCanBecomeFirstResponder() -> Swift.Bool
  override open func cellBecomeFirstResponder(withDirection: IncdOnboarding.Direction) -> Swift.Bool
  override open func cellResignFirstResponder() -> Swift.Bool
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  open func customConstraints()
  @objc override dynamic open func updateConstraints()
  @objc open func textFieldDidChange(_ textField: UIKit.UITextField)
  @objc open func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @objc open func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @objc open func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc open func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc open func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc open func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc override dynamic open func layoutSubviews()
}
@objc @_inheritsConvenienceInitializers open class DecimalFormatter : Foundation.NumberFormatter, IncdOnboarding.FormatterProtocol {
  @objc override dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func getObjectValue(_ obj: Swift.AutoreleasingUnsafeMutablePointer<Swift.AnyObject?>?, for string: Swift.String, range rangep: Swift.UnsafeMutablePointer<Foundation.NSRange>?) throws
  open func getNewPosition(forPosition position: UIKit.UITextPosition, inTextInput textInput: UIKit.UITextInput, oldValue: Swift.String?, newValue: Swift.String?) -> UIKit.UITextPosition
  @objc deinit
}
public protocol FormatterConformance : AnyObject {
  var formatter: Foundation.Formatter? { get set }
  var useFormatterDuringInput: Swift.Bool { get set }
  var useFormatterOnDidBeginEditing: Swift.Bool? { get set }
}
public protocol NoValueDisplayTextConformance : AnyObject {
  var noValueDisplayText: Swift.String? { get set }
}
@_inheritsConvenienceInitializers open class AlertOptionsRow<Cell> : IncdOnboarding.OptionsRow<Cell>, IncdOnboarding.AlertOptionsProviderRow where Cell : IncdOnboarding.BaseCell, Cell : IncdOnboarding.CellType {
  open var cancelTitle: Swift.String?
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class OptionsRow<Cell> : IncdOnboarding.Row<Cell>, IncdOnboarding.NoValueDisplayTextConformance, IncdOnboarding.OptionsProviderRow where Cell : IncdOnboarding.BaseCell, Cell : IncdOnboarding.CellType {
  open var optionsProvider: IncdOnboarding.OptionsProvider<Cell.Value>?
  open var selectorTitle: Swift.String?
  open var noValueDisplayText: Swift.String?
  required public init(tag: Swift.String?)
  public typealias OptionsProviderType = IncdOnboarding.OptionsProvider<Cell.Value>
  @objc deinit
}
public struct OmniLogin1toNConfirmResponse : Swift.Decodable {
  public let customerId: Swift.String?
  public let token: Swift.String?
  public let interviewId: Swift.String?
  public let interviewToken: Swift.String?
  public let transactionId: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniLogin1toNConfirm(verificationCode: Swift.String, transactionId: Swift.String, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniLogin1toNConfirmResponse>) -> Swift.Void)
}
@_inheritsConvenienceInitializers open class GenericMultipleSelectorRow<T, Cell> : IncdOnboarding.Row<Cell>, IncdOnboarding.PresenterRowType, IncdOnboarding.NoValueDisplayTextConformance, IncdOnboarding.OptionsProviderRow where T : Swift.Hashable, Cell : IncdOnboarding.BaseCell, Cell : IncdOnboarding.CellType, Cell.Value == Swift.Set<T> {
  public typealias PresentedController = IncdOnboarding.MultipleSelectorViewController<IncdOnboarding.GenericMultipleSelectorRow<T, Cell>>
  open var presentationMode: IncdOnboarding.PresentationMode<IncdOnboarding.GenericMultipleSelectorRow<T, Cell>.PresentedController>?
  open var onPresentCallback: ((IncdOnboarding.FormViewController, IncdOnboarding.GenericMultipleSelectorRow<T, Cell>.PresentedController) -> Swift.Void)?
  open var selectorTitle: Swift.String?
  open var noValueDisplayText: Swift.String?
  open var optionsProvider: IncdOnboarding.OptionsProvider<T>?
  required public init(tag: Swift.String?)
  override open func customDidSelect()
  override open func prepare(for segue: UIKit.UIStoryboardSegue)
  @objc deinit
  public typealias OptionsProviderType = IncdOnboarding.OptionsProvider<T>
  public typealias PresentedControllerType = IncdOnboarding.MultipleSelectorViewController<IncdOnboarding.GenericMultipleSelectorRow<T, Cell>>
}
@_inheritsConvenienceInitializers open class CheckCell : IncdOnboarding.Cell<Swift.Bool>, IncdOnboarding.CellType {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func update()
  override open func setup()
  override open func didSelect()
  @objc deinit
}
@_inheritsConvenienceInitializers open class _CheckRow : IncdOnboarding.Row<IncdOnboarding.CheckCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class CheckRow : IncdOnboarding._CheckRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class TextCell : IncdOnboarding._FieldCell<Swift.String>, IncdOnboarding.CellType {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
}
@_inheritsConvenienceInitializers open class IntCell : IncdOnboarding._FieldCell<Swift.Int>, IncdOnboarding.CellType {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
}
@_inheritsConvenienceInitializers open class PhoneCell : IncdOnboarding._FieldCell<Swift.String>, IncdOnboarding.CellType {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
}
@_inheritsConvenienceInitializers open class NameCell : IncdOnboarding._FieldCell<Swift.String>, IncdOnboarding.CellType {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
}
@_inheritsConvenienceInitializers open class EmailCell : IncdOnboarding._FieldCell<Swift.String>, IncdOnboarding.CellType {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
}
@_inheritsConvenienceInitializers open class PasswordCell : IncdOnboarding._FieldCell<Swift.String>, IncdOnboarding.CellType {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
}
@_inheritsConvenienceInitializers open class DecimalCell : IncdOnboarding._FieldCell<Swift.Double>, IncdOnboarding.CellType {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
}
@_inheritsConvenienceInitializers open class URLCell : IncdOnboarding._FieldCell<Foundation.URL>, IncdOnboarding.CellType {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
}
@_inheritsConvenienceInitializers open class TwitterCell : IncdOnboarding._FieldCell<Swift.String>, IncdOnboarding.CellType {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
}
@_inheritsConvenienceInitializers open class AccountCell : IncdOnboarding._FieldCell<Swift.String>, IncdOnboarding.CellType {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
}
@_inheritsConvenienceInitializers open class ZipCodeCell : IncdOnboarding._FieldCell<Swift.String>, IncdOnboarding.CellType {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func update()
  @objc deinit
}
@_inheritsConvenienceInitializers open class _TextRow : IncdOnboarding.FieldRow<IncdOnboarding.TextCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _IntRow : IncdOnboarding.FieldRow<IncdOnboarding.IntCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _PhoneRow : IncdOnboarding.FieldRow<IncdOnboarding.PhoneCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _NameRow : IncdOnboarding.FieldRow<IncdOnboarding.NameCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _EmailRow : IncdOnboarding.FieldRow<IncdOnboarding.EmailCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _PasswordRow : IncdOnboarding.FieldRow<IncdOnboarding.PasswordCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _DecimalRow : IncdOnboarding.FieldRow<IncdOnboarding.DecimalCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _URLRow : IncdOnboarding.FieldRow<IncdOnboarding.URLCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _TwitterRow : IncdOnboarding.FieldRow<IncdOnboarding.TwitterCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _AccountRow : IncdOnboarding.FieldRow<IncdOnboarding.AccountCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _ZipCodeRow : IncdOnboarding.FieldRow<IncdOnboarding.ZipCodeCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class TextRow : IncdOnboarding._TextRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class NameRow : IncdOnboarding._NameRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class PasswordRow : IncdOnboarding._PasswordRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class EmailRow : IncdOnboarding._EmailRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class TwitterRow : IncdOnboarding._TwitterRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class AccountRow : IncdOnboarding._AccountRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class ZipCodeRow : IncdOnboarding._ZipCodeRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class IntRow : IncdOnboarding._IntRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class DecimalRow : IncdOnboarding._DecimalRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class URLRow : IncdOnboarding._URLRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class PhoneRow : IncdOnboarding._PhoneRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class DoublePickerInputCell<A, B> : IncdOnboarding._PickerInputCell<IncdOnboarding.Tuple<A, B>> where A : Swift.Equatable, B : Swift.Equatable {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func update()
  @objc override open func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @objc override open func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @objc override open func pickerView(_ pickerView: UIKit.UIPickerView, titleForRow row: Swift.Int, forComponent component: Swift.Int) -> Swift.String?
  @objc override open func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow row: Swift.Int, inComponent component: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _DoublePickerInputRow<A, B> : IncdOnboarding.Row<IncdOnboarding.DoublePickerInputCell<A, B>>, IncdOnboarding.NoValueDisplayTextConformance where A : Swift.Equatable, B : Swift.Equatable {
  open var noValueDisplayText: Swift.String?
  public var firstOptions: () -> [A]
  public var secondOptions: (A) -> [B]
  public var displayValueForFirstRow: (A) -> (Swift.String)
  public var displayValueForSecondRow: (B) -> (Swift.String)
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class DoublePickerInputRow<A, B> : IncdOnboarding._DoublePickerInputRow<A, B>, IncdOnboarding.RowType where A : Swift.Equatable, B : Swift.Equatable {
  required public init(tag: Swift.String?)
  @objc deinit
}
public struct Tuple<A, B> where A : Swift.Equatable, B : Swift.Equatable {
  public let a: A
  public let b: B
  public init(a: A, b: B)
}
extension Tuple : Swift.Equatable {
}
public func == <A, B>(lhs: IncdOnboarding.Tuple<A, B>, rhs: IncdOnboarding.Tuple<A, B>) -> Swift.Bool where A : Swift.Equatable, B : Swift.Equatable
@_inheritsConvenienceInitializers open class DoublePickerCell<A, B> : IncdOnboarding._PickerCell<IncdOnboarding.Tuple<A, B>> where A : Swift.Equatable, B : Swift.Equatable {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func update()
  @objc override open func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @objc override open func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @objc override open func pickerView(_ pickerView: UIKit.UIPickerView, titleForRow row: Swift.Int, forComponent component: Swift.Int) -> Swift.String?
  @objc override open func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow row: Swift.Int, inComponent component: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _DoublePickerRow<A, B> : IncdOnboarding.Row<IncdOnboarding.DoublePickerCell<A, B>> where A : Swift.Equatable, B : Swift.Equatable {
  public var firstOptions: () -> [A]
  public var secondOptions: (A) -> [B]
  public var displayValueForFirstRow: (A) -> (Swift.String)
  public var displayValueForSecondRow: (B) -> (Swift.String)
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class DoublePickerRow<A, B> : IncdOnboarding._DoublePickerRow<A, B>, IncdOnboarding.RowType where A : Swift.Equatable, B : Swift.Equatable {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _DateInlineRow : IncdOnboarding._DateInlineFieldRow {
  public typealias InlineRow = IncdOnboarding.DatePickerRow
  required public init(tag: Swift.String?)
  open func setupInlineRow(_ inlineRow: IncdOnboarding.DatePickerRow)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _TimeInlineRow : IncdOnboarding._DateInlineFieldRow {
  public typealias InlineRow = IncdOnboarding.TimePickerRow
  required public init(tag: Swift.String?)
  open func setupInlineRow(_ inlineRow: IncdOnboarding.TimePickerRow)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _DateTimeInlineRow : IncdOnboarding._DateInlineFieldRow {
  public typealias InlineRow = IncdOnboarding.DateTimePickerRow
  required public init(tag: Swift.String?)
  open func setupInlineRow(_ inlineRow: IncdOnboarding.DateTimePickerRow)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _CountDownInlineRow : IncdOnboarding._DateInlineFieldRow {
  public typealias InlineRow = IncdOnboarding.CountDownPickerRow
  required public init(tag: Swift.String?)
  public func setupInlineRow(_ inlineRow: IncdOnboarding.CountDownPickerRow)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class DateInlineRow_<T> : IncdOnboarding._DateInlineRow, IncdOnboarding.RowType, IncdOnboarding.InlineRowType {
  required public init(tag: Swift.String?)
  override final public func customDidSelect()
  @objc deinit
}
public typealias DateInlineRow = IncdOnboarding.DateInlineRow_<Foundation.Date>
@_inheritsConvenienceInitializers final public class DateTimeInlineRow_<T> : IncdOnboarding._DateTimeInlineRow, IncdOnboarding.RowType, IncdOnboarding.InlineRowType {
  required public init(tag: Swift.String?)
  override final public func customDidSelect()
  @objc deinit
}
public typealias DateTimeInlineRow = IncdOnboarding.DateTimeInlineRow_<Foundation.Date>
@_inheritsConvenienceInitializers final public class TimeInlineRow_<T> : IncdOnboarding._TimeInlineRow, IncdOnboarding.RowType, IncdOnboarding.InlineRowType {
  required public init(tag: Swift.String?)
  override final public func customDidSelect()
  @objc deinit
}
public typealias TimeInlineRow = IncdOnboarding.TimeInlineRow_<Foundation.Date>
@_inheritsConvenienceInitializers final public class CountDownInlineRow_<T> : IncdOnboarding._CountDownInlineRow, IncdOnboarding.RowType, IncdOnboarding.InlineRowType {
  required public init(tag: Swift.String?)
  override final public func customDidSelect()
  @objc deinit
}
public typealias CountDownInlineRow = IncdOnboarding.CountDownInlineRow_<Foundation.Date>
@_inheritsConvenienceInitializers open class TriplePickerInputCell<A, B, C> : IncdOnboarding._PickerInputCell<IncdOnboarding.Tuple3<A, B, C>> where A : Swift.Equatable, B : Swift.Equatable, C : Swift.Equatable {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func update()
  @objc override open func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @objc override open func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @objc override open func pickerView(_ pickerView: UIKit.UIPickerView, titleForRow row: Swift.Int, forComponent component: Swift.Int) -> Swift.String?
  @objc override open func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow row: Swift.Int, inComponent component: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _TriplePickerInputRow<A, B, C> : IncdOnboarding.Row<IncdOnboarding.TriplePickerInputCell<A, B, C>>, IncdOnboarding.NoValueDisplayTextConformance where A : Swift.Equatable, B : Swift.Equatable, C : Swift.Equatable {
  open var noValueDisplayText: Swift.String?
  public var firstOptions: () -> [A]
  public var secondOptions: (A) -> [B]
  public var thirdOptions: (A, B) -> [C]
  public var displayValueForFirstRow: (A) -> (Swift.String)
  public var displayValueForSecondRow: (B) -> (Swift.String)
  public var displayValueForThirdRow: (C) -> (Swift.String)
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class TriplePickerInputRow<A, B, C> : IncdOnboarding._TriplePickerInputRow<A, B, C>, IncdOnboarding.RowType where A : Swift.Equatable, B : Swift.Equatable, C : Swift.Equatable {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class DatePickerCell : IncdOnboarding.Cell<Foundation.Date>, IncdOnboarding.CellType {
  @objc @IBOutlet weak public var datePicker: UIKit.UIDatePicker!
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
  override open func update()
}
@_inheritsConvenienceInitializers open class _DatePickerRow : IncdOnboarding.Row<IncdOnboarding.DatePickerCell>, IncdOnboarding.DatePickerRowProtocol {
  open var minimumDate: Foundation.Date?
  open var maximumDate: Foundation.Date?
  open var minuteInterval: Swift.Int?
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class DatePickerRow : IncdOnboarding._DatePickerRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class TimePickerRow : IncdOnboarding._DatePickerRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class DateTimePickerRow : IncdOnboarding._DatePickerRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class CountDownPickerRow : IncdOnboarding._DatePickerRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class AlertSelectorCell<T> : IncdOnboarding.Cell<T>, IncdOnboarding.CellType where T : Swift.Equatable {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func update()
  override open func didSelect()
  @objc deinit
}
@_inheritsConvenienceInitializers open class _ActionSheetRow<Cell> : IncdOnboarding.AlertOptionsRow<Cell>, IncdOnboarding.PresenterRowType where Cell : IncdOnboarding.BaseCell, Cell : IncdOnboarding.CellType {
  public typealias ProviderType = IncdOnboarding.SelectorAlertController<IncdOnboarding._ActionSheetRow<Cell>>
  public var onPresentCallback: ((IncdOnboarding.FormViewController, IncdOnboarding._ActionSheetRow<Cell>.ProviderType) -> Swift.Void)?
  public var presentationMode: IncdOnboarding.PresentationMode<IncdOnboarding._ActionSheetRow<Cell>.ProviderType>? {
    get
    set
  }
  required public init(tag: Swift.String?)
  override open func customDidSelect()
  @objc deinit
  public typealias PresentedControllerType = IncdOnboarding.SelectorAlertController<IncdOnboarding._ActionSheetRow<Cell>>
}
@_inheritsConvenienceInitializers final public class ActionSheetRow<T> : IncdOnboarding._ActionSheetRow<IncdOnboarding.AlertSelectorCell<T>>, IncdOnboarding.RowType where T : Swift.Equatable {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _PickerCell<T> : IncdOnboarding.Cell<T>, IncdOnboarding.CellType, UIKit.UIPickerViewDataSource, UIKit.UIPickerViewDelegate where T : Swift.Equatable {
  @objc @IBOutlet weak public var picker: UIKit.UIPickerView!
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  override open func update()
  @objc deinit
  open var pickerTextAttributes: [Foundation.NSAttributedString.Key : Any]?
  @objc open func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @objc open func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @objc open func pickerView(_ pickerView: UIKit.UIPickerView, titleForRow row: Swift.Int, forComponent component: Swift.Int) -> Swift.String?
  @objc open func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow row: Swift.Int, inComponent component: Swift.Int)
  @objc open func pickerView(_ pickerView: UIKit.UIPickerView, attributedTitleForRow row: Swift.Int, forComponent component: Swift.Int) -> Foundation.NSAttributedString?
}
@_inheritsConvenienceInitializers open class PickerCell<T> : IncdOnboarding._PickerCell<T> where T : Swift.Equatable {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  override open func update()
  @objc deinit
}
@_inheritsConvenienceInitializers open class _PickerRow<T> : IncdOnboarding.Row<IncdOnboarding.PickerCell<T>> where T : Swift.Equatable {
  open var options: [T]
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class PickerRow<T> : IncdOnboarding._PickerRow<T>, IncdOnboarding.RowType where T : Swift.Equatable {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _PopoverSelectorRow<Cell> : IncdOnboarding.SelectorRow<Cell> where Cell : IncdOnboarding.BaseCell, Cell : IncdOnboarding.CellType {
  required public init(tag: Swift.String?)
  override open func didSelect()
  @objc deinit
}
@_inheritsConvenienceInitializers final public class PopoverSelectorRow<T> : IncdOnboarding._PopoverSelectorRow<IncdOnboarding.PushSelectorCell<T>>, IncdOnboarding.RowType where T : Swift.Equatable {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class ButtonCellOf<T> : IncdOnboarding.Cell<T>, IncdOnboarding.CellType where T : Swift.Equatable {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func update()
  override open func didSelect()
  @objc deinit
}
public typealias ButtonCell = IncdOnboarding.ButtonCellOf<Swift.String>
@_inheritsConvenienceInitializers open class _ButtonRowOf<T> : IncdOnboarding.Row<IncdOnboarding.ButtonCellOf<T>> where T : Swift.Equatable {
  open var presentationMode: IncdOnboarding.PresentationMode<UIKit.UIViewController>?
  required public init(tag: Swift.String?)
  override open func customDidSelect()
  override open func customUpdateCell()
  override open func prepare(for segue: UIKit.UIStoryboardSegue)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class ButtonRowOf<T> : IncdOnboarding._ButtonRowOf<T>, IncdOnboarding.RowType where T : Swift.Equatable {
  required public init(tag: Swift.String?)
  @objc deinit
}
public typealias ButtonRow = IncdOnboarding.ButtonRowOf<Swift.String>
@_inheritsConvenienceInitializers open class SwitchCell : IncdOnboarding.Cell<Swift.Bool>, IncdOnboarding.CellType {
  @objc @IBOutlet weak public var switchControl: UIKit.UISwitch!
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
  override open func update()
}
@_inheritsConvenienceInitializers open class _SwitchRow : IncdOnboarding.Row<IncdOnboarding.SwitchCell> {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class SwitchRow : IncdOnboarding._SwitchRow, IncdOnboarding.RowType {
  required public init(tag: Swift.String?)
  @objc deinit
}
public struct Tuple3<A, B, C> where A : Swift.Equatable, B : Swift.Equatable, C : Swift.Equatable {
  public let a: A
  public let b: B
  public let c: C
  public init(a: A, b: B, c: C)
}
extension Tuple3 : Swift.Equatable {
}
public func == <A, B, C>(lhs: IncdOnboarding.Tuple3<A, B, C>, rhs: IncdOnboarding.Tuple3<A, B, C>) -> Swift.Bool where A : Swift.Equatable, B : Swift.Equatable, C : Swift.Equatable
@_inheritsConvenienceInitializers open class TriplePickerCell<A, B, C> : IncdOnboarding._PickerCell<IncdOnboarding.Tuple3<A, B, C>> where A : Swift.Equatable, B : Swift.Equatable, C : Swift.Equatable {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func update()
  @objc override open func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @objc override open func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @objc override open func pickerView(_ pickerView: UIKit.UIPickerView, titleForRow row: Swift.Int, forComponent component: Swift.Int) -> Swift.String?
  @objc override open func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow row: Swift.Int, inComponent component: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _TriplePickerRow<A, B, C> : IncdOnboarding.Row<IncdOnboarding.TriplePickerCell<A, B, C>> where A : Swift.Equatable, B : Swift.Equatable, C : Swift.Equatable {
  public var firstOptions: () -> [A]
  public var secondOptions: (A) -> [B]
  public var thirdOptions: (A, B) -> [C]
  public var displayValueForFirstRow: (A) -> (Swift.String)
  public var displayValueForSecondRow: (B) -> (Swift.String)
  public var displayValueForThirdRow: (C) -> (Swift.String)
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class TriplePickerRow<A, B, C> : IncdOnboarding._TriplePickerRow<A, B, C>, IncdOnboarding.RowType where A : Swift.Equatable, B : Swift.Equatable, C : Swift.Equatable {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class _PushRow<Cell> : IncdOnboarding.SelectorRow<Cell> where Cell : IncdOnboarding.BaseCell, Cell : IncdOnboarding.CellType {
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class PushRow<T> : IncdOnboarding._PushRow<IncdOnboarding.PushSelectorCell<T>>, IncdOnboarding.RowType where T : Swift.Equatable {
  required public init(tag: Swift.String?)
  @objc deinit
}
open class _MultipleSelectorViewController<Row, OptionsRow> : IncdOnboarding.FormViewController, IncdOnboarding.TypedRowControllerType where Row : IncdOnboarding.BaseRow, Row : IncdOnboarding.SelectableRowType, OptionsRow : IncdOnboarding.OptionsProviderRow, Row.Cell.Value : Swift.Hashable, Row.Cell.Value == OptionsRow.OptionsProviderType.Option {
  public var row: IncdOnboarding.RowOf<Swift.Set<Row.Cell.Value>>!
  public var selectableRowSetup: ((Row) -> Swift.Void)?
  public var selectableRowCellSetup: ((Row.Cell, Row) -> Swift.Void)?
  public var selectableRowCellUpdate: ((Row.Cell, Row) -> Swift.Void)?
  public var onDismissCallback: ((UIKit.UIViewController) -> Swift.Void)?
  public var sectionKeyForValue: ((Row.Cell.Value) -> (Swift.String))?
  public var sectionHeaderTitleForKey: ((Swift.String) -> Swift.String?)?
  public var sectionFooterTitleForKey: ((Swift.String) -> Swift.String?)?
  public var optionsProviderRow: OptionsRow {
    get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  convenience public init(_ callback: ((UIKit.UIViewController) -> Swift.Void)?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  open func setupForm()
  open func setupForm(with options: [OptionsRow.OptionsProviderType.Option])
  open func optionsBySections(with options: [OptionsRow.OptionsProviderType.Option]) -> [(Swift.String, [Row.Cell.Value])]?
  override public init(style: UIKit.UITableView.Style)
  public typealias RowValue = Swift.Set<Row.Cell.Value>
  @objc deinit
}
@_inheritsConvenienceInitializers open class MultipleSelectorViewController<OptionsRow> : IncdOnboarding._MultipleSelectorViewController<IncdOnboarding.ListCheckRow<OptionsRow.OptionsProviderType.Option>, OptionsRow> where OptionsRow : IncdOnboarding.OptionsProviderRow, OptionsRow.OptionsProviderType.Option : Swift.Hashable {
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String? = nil, bundle nibBundleOrNil: Foundation.Bundle? = nil)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol OptionsProviderRow : IncdOnboarding.TypedRowType {
  associatedtype OptionsProviderType : IncdOnboarding.OptionsProviderConformance
  var optionsProvider: Self.OptionsProviderType? { get set }
  var cachedOptionsData: [Self.OptionsProviderType.Option]? { get set }
}
extension OptionsProviderRow where Self : IncdOnboarding.BaseRow {
  public var options: [Self.OptionsProviderType.Option]? {
    get
    set(newValue)
  }
  public var cachedOptionsData: [Self.OptionsProviderType.Option]? {
    get
    set
  }
}
public protocol OptionsProviderConformance : Swift.ExpressibleByArrayLiteral {
  associatedtype Option : Swift.Equatable
  init(array: [Self.Option]?)
  func options(for selectorViewController: IncdOnboarding.FormViewController, completion: @escaping ([Self.Option]?) -> Swift.Void)
  var optionsArray: [Self.Option]? { get }
}
public enum OptionsProvider<T> : IncdOnboarding.OptionsProviderConformance where T : Swift.Equatable {
  case array([T]?)
  case lazy((IncdOnboarding.FormViewController, ([T]?) -> Swift.Void) -> Swift.Void)
  public init(array: [T]?)
  public init(arrayLiteral elements: T...)
  public func options(for selectorViewController: IncdOnboarding.FormViewController, completion: @escaping ([T]?) -> Swift.Void)
  public var optionsArray: [T]? {
    get
  }
  public typealias Option = T
  public typealias ArrayLiteralElement = T
}
@_inheritsConvenienceInitializers open class _SelectorViewController<Row, OptionsRow> : IncdOnboarding.FormViewController, IncdOnboarding.TypedRowControllerType where Row : IncdOnboarding.BaseRow, Row : IncdOnboarding.SelectableRowType, OptionsRow : IncdOnboarding.OptionsProviderRow, Row.Cell.Value == OptionsRow.OptionsProviderType.Option {
  public var row: IncdOnboarding.RowOf<Row.Cell.Value>!
  public var enableDeselection: Swift.Bool
  public var dismissOnSelection: Swift.Bool
  public var dismissOnChange: Swift.Bool
  public var selectableRowSetup: ((Row) -> Swift.Void)?
  public var selectableRowCellUpdate: ((Row.Cell, Row) -> Swift.Void)?
  public var selectableRowCellSetup: ((Row.Cell, Row) -> Swift.Void)?
  public var onDismissCallback: ((UIKit.UIViewController) -> Swift.Void)?
  public var sectionKeyForValue: ((Row.Cell.Value) -> (Swift.String))?
  public var sectionHeaderTitleForKey: ((Swift.String) -> Swift.String?)?
  public var sectionFooterTitleForKey: ((Swift.String) -> Swift.String?)?
  public var optionsProviderRow: OptionsRow {
    get
  }
  override public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  convenience public init(_ callback: ((UIKit.UIViewController) -> Swift.Void)?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  open func setupForm()
  open func setupForm(with options: [Row.Cell.Value])
  public typealias RowValue = Row.Cell.Value
  @objc deinit
}
@_inheritsConvenienceInitializers open class SelectorViewController<OptionsRow> : IncdOnboarding._SelectorViewController<IncdOnboarding.ListCheckRow<OptionsRow.OptionsProviderType.Option>, OptionsRow> where OptionsRow : IncdOnboarding.OptionsProviderRow {
  override public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol AlertOptionsProviderRow : IncdOnboarding.OptionsProviderRow {
  var cancelTitle: Swift.String? { get set }
}
@_inheritsConvenienceInitializers open class SelectorAlertController<AlertOptionsRow> : UIKit.UIAlertController, IncdOnboarding.TypedRowControllerType where AlertOptionsRow : IncdOnboarding.BaseRow, AlertOptionsRow : IncdOnboarding.AlertOptionsProviderRow, AlertOptionsRow.Cell.Value == AlertOptionsRow.OptionsProviderType.Option {
  public var row: IncdOnboarding.RowOf<AlertOptionsRow.Cell.Value>!
  @available(*, deprecated, message: "Use AlertOptionsRow.cancelTitle instead.")
  public var cancelTitle: Swift.String
  public var onDismissCallback: ((UIKit.UIViewController) -> Swift.Void)?
  public var optionsProviderRow: AlertOptionsRow {
    get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  convenience public init(_ callback: ((UIKit.UIViewController) -> Swift.Void)?)
  @objc override dynamic open func viewDidLoad()
  public typealias RowValue = AlertOptionsRow.Cell.Value
  @objc deinit
}
@_inheritsConvenienceInitializers open class _ButtonRowWithPresent<VCType> : IncdOnboarding.Row<IncdOnboarding.ButtonCellOf<VCType.RowValue>>, IncdOnboarding.PresenterRowType where VCType : UIKit.UIViewController, VCType : IncdOnboarding.TypedRowControllerType {
  open var presentationMode: IncdOnboarding.PresentationMode<VCType>?
  open var onPresentCallback: ((IncdOnboarding.FormViewController, VCType) -> Swift.Void)?
  required public init(tag: Swift.String?)
  override open func customUpdateCell()
  override open func customDidSelect()
  override open func prepare(for segue: UIKit.UIStoryboardSegue)
  @objc deinit
  public typealias PresentedControllerType = VCType
}
@_inheritsConvenienceInitializers final public class ButtonRowWithPresent<VCType> : IncdOnboarding._ButtonRowWithPresent<VCType>, IncdOnboarding.RowType where VCType : UIKit.UIViewController, VCType : IncdOnboarding.TypedRowControllerType {
  required public init(tag: Swift.String?)
  @objc deinit
}
public struct HelloDetectSpoofWithEyesResponse : Swift.Decodable {
  public let confidence: Swift.Float?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func helloDetectSpoofWithEyes(image: UIKit.UIImage, facePoints: [Swift.String : Any], secure: Swift.Bool = true, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.HelloDetectSpoofWithEyesResponse>) -> Swift.Void)
}
@_inheritsConvenienceInitializers open class _PickerInputCell<T> : IncdOnboarding.Cell<T>, IncdOnboarding.CellType, UIKit.UIPickerViewDataSource, UIKit.UIPickerViewDelegate where T : Swift.Equatable {
  public var picker: UIKit.UIPickerView {
    get
    set
  }
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func setup()
  @objc deinit
  override open func update()
  override open func didSelect()
  @objc override dynamic open var inputView: UIKit.UIView? {
    @objc get
  }
  override open func cellCanBecomeFirstResponder() -> Swift.Bool
  @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc open func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @objc open func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @objc open func pickerView(_ pickerView: UIKit.UIPickerView, titleForRow row: Swift.Int, forComponent component: Swift.Int) -> Swift.String?
  @objc open func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow rowNumber: Swift.Int, inComponent component: Swift.Int)
}
@_inheritsConvenienceInitializers open class PickerInputCell<T> : IncdOnboarding._PickerInputCell<T> where T : Swift.Equatable {
  @objc required dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override open func update()
  @objc deinit
}
@_inheritsConvenienceInitializers open class _PickerInputRow<T> : IncdOnboarding.Row<IncdOnboarding.PickerInputCell<T>>, IncdOnboarding.NoValueDisplayTextConformance where T : Swift.Equatable {
  open var noValueDisplayText: Swift.String?
  open var options: [T]
  required public init(tag: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers final public class PickerInputRow<T> : IncdOnboarding._PickerInputRow<T>, IncdOnboarding.RowType where T : Swift.Equatable {
  required public init(tag: Swift.String?)
  @objc deinit
}
@objc public class IncdFaceDetectionConfigViewController : IncdOnboarding.FormViewController {
  weak public var objectToConfigure: IncdOnboarding.IncdFaceDetector?
  @objc override dynamic public func viewDidLoad()
  public init(objectToConfigure incdFD: IncdOnboarding.IncdFaceDetector)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  override public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class KeychainHelper {
  @objc deinit
}
public struct NetworkManager {
  public static var baseURL: Swift.String?
  public static var apiKey: Swift.String?
  public static var token: Swift.String? {
    get
    set
  }
  public static var logRequests: Swift.Bool
  public init()
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoder {
  func encode(urlRequest: inout Foundation.URLRequest, with parameters: IncdOnboarding.Parameters) throws
}
public enum ParameterEncoding {
  case urlEncoding
  case jsonEncoding
  case imageEncoding
  case rawDataEncoding
  case multipartImageEncoding
  case audioEncoding
  case urlAndJsonEncoding
  public func encode(urlRequest: inout Foundation.URLRequest, bodyParameters: IncdOnboarding.Parameters?, urlParameters: IncdOnboarding.Parameters?) throws
  public static func == (a: IncdOnboarding.ParameterEncoding, b: IncdOnboarding.ParameterEncoding) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum EncodingError : Swift.String, Swift.Error {
  case missingParameter
  case encodingFailed
  case badURL
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct AudioParameterEncoder : IncdOnboarding.ParameterEncoder {
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: IncdOnboarding.Parameters) throws
}
public struct URLParameterEncoder : IncdOnboarding.ParameterEncoder {
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: IncdOnboarding.Parameters) throws
}
public struct JSONParameterEncoder : IncdOnboarding.ParameterEncoder {
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: IncdOnboarding.Parameters) throws
}
public struct ImageParameterEncoder : IncdOnboarding.ParameterEncoder {
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: IncdOnboarding.Parameters) throws
}
public struct MultipartImageParameterEncoder : IncdOnboarding.ParameterEncoder {
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: IncdOnboarding.Parameters) throws
}
extension UIDevice {
  public static let modelName: Swift.String
}
public enum IncdAPIError : Swift.String {
  case phoneAlreadyExistsOnServer
  case userWithCardNumberAlreadyExists
  case customerWithEmployeeIdExists
  public func errorKey() -> Swift.String?
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension UIImage {
  public var jpegEncoded: Swift.String {
    get
  }
  public func imageUsing(rect: CoreGraphics.CGRect) -> UIKit.UIImage?
}
extension Data {
  public func parseJSON<T>(into: T.Type) throws -> T? where T : Swift.Decodable
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
public enum HTTPMethod : Swift.String {
  case get
  case post
  case put
  case patch
  case delete
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public typealias NetworkRouterCompletion = (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> ()
public typealias NetworkRouterProgress = (Swift.Float?) -> ()
public typealias NetworkRedirectEvent = (Swift.Bool?) -> ()
public class IncdLivenessDetector {
  public var severityLevel: Swift.Int32
  public init(withModelName name: Swift.String, forceCPU: Swift.Bool? = nil, severityLevel: Swift.Int32? = nil)
  public func livenessDetection(onFrame frame: UIKit.UIImage, forCroppedFace croppedFace: UIKit.UIImage, completion: @escaping (Swift.Float?) -> Swift.Void)
  @objc deinit
}
public struct IncdDefaultResponse : Swift.Decodable {
  public let success: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func validateIneURL(urlString: Swift.String, redirect: @escaping (Swift.Bool?) -> (), completion: @escaping (Swift.String?, Swift.String?) -> ())
}
public struct HealthIDAuthenticateScannerResponse : Swift.Decodable {
  public let token: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func healthIDAuthenticateScanner(organizationId: Swift.Int, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.HealthIDAuthenticateScannerResponse>) -> Swift.Void)
}
public struct HealthIDCustomerGetScoreResponse : Swift.Decodable {
  public let value: Swift.Float?
  public let requiredScore: Swift.Float?
  public let status: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func healthIDCustomerGetScore(customerID: Swift.String, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.HealthIDCustomerGetScoreResponse>) -> Swift.Void)
}
public enum HealthIDEventType : Swift.String, Swift.Codable {
  case mask
  case temperature
  case hands
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension NetworkManager {
  public func healthIDCustomerAddEvent(customerID: Swift.String, eventType: IncdOnboarding.HealthIDEventType, value: Swift.Float, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public struct HealthIDCustomerGetQuestionnaireResultResponse : Swift.Decodable {
  public let value: Swift.Float?
  public let status: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func healthIDCustomerGetQuestionnaireResult(customerID: Swift.String, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.HealthIDCustomerGetQuestionnaireResultResponse>) -> Swift.Void)
}
public enum RiskLevel : Swift.String, Swift.Codable {
  case veryLow
  case low
  case moderate
  case high
  case veryHigh
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct HealthIDCustomerGetInfoResponse : Swift.Decodable {
  public let riskLevel: IncdOnboarding.RiskLevel
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func healthIDCustomerGetInfo(completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.HealthIDCustomerGetInfoResponse>) -> Swift.Void)
}
public struct HealthIDCustomerGetEmployeeDataResponse : Swift.Decodable {
  public let firstName: Swift.String?
  public let middleName: Swift.String?
  public let lastName: Swift.String?
  public let externalId: Swift.String?
  public let expireDate: Swift.Int?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func healthIDCustomerGetEmployeeData(customerID: Swift.String, organizationID: Swift.Int, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.HealthIDCustomerGetEmployeeDataResponse>) -> Swift.Void)
}
public struct HealthEndpointResponse : Swift.Decodable {
  public let status: IncdOnboarding.HealthEndpointStatus
  public init(from decoder: Swift.Decoder) throws
}
public enum HealthEndpointStatus : Swift.String, Swift.Decodable {
  case up
  case down
  public init(from decoder: Swift.Decoder) throws
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension NetworkManager {
  public func health(completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.HealthEndpointResponse>) -> Swift.Void)
}
extension NetworkManager {
  public func sendSMS(completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public enum StatementInstitution : Swift.String, Swift.Encodable {
  case santander
  case axtel
  case cfe
  case gasnaturalfernosa
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension NetworkManager {
  public func omniThirdPartyLogin(username: Swift.String, password: Swift.String, institution: IncdOnboarding.StatementInstitution, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public struct OmniGenerateVideoSelfieURLResponse : Swift.Decodable {
  public let url: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniGenerateVideoSelfieURL(completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniGenerateVideoSelfieURLResponse>) -> Swift.Void)
}
public struct OmniGetPostProcessingFinishedResponse : Swift.Decodable {
  public let finished: Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniGetPostProcessingFinished(completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniGetPostProcessingFinishedResponse>) -> Swift.Void)
}
public struct OmniAddFaceResponse : Swift.Decodable {
  public let confidence: Swift.Float?
  public let hasLenses: Swift.Bool?
  public let isBright: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
}
public enum OmniAddFaceType : Swift.String, Swift.Encodable {
  case selfie
  case videoSelfie
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct OmniFlow : Swift.Codable, Swift.Equatable {
  public let id: Swift.String?
  public let apiKey: Swift.String?
  public var name: Swift.String?
  public var region: Swift.String?
  public var active: Swift.Bool?
  public let numberOfSessions: Swift.Int?
  public var modules: [IncdOnboarding.OmniFlowsModule]?
  public let checks: [Swift.String]?
  public let defaultConfiguration: Swift.Bool?
  public var liveness: IncdOnboarding.OmniLivenessSeverity?
  public let severityLevel: IncdOnboarding.OmniLivenessSeverity?
  public let signatureProvider: Swift.String?
  public let idSecurityLevel: Swift.Double?
  public let acuant: Swift.Bool?, idValidation: Swift.Bool?, governmentValidation: Swift.Bool?, manualCorrection: Swift.Bool?
  public let autoApproveEnabled: Swift.Bool?
  public let autoApproveLevel: IncdOnboarding.AutoApproveLevel?
  public let redirectURL: Swift.String?
  public let checkTutorials: Swift.Bool?, checkAuthorization: Swift.Bool?, checkLiveness: Swift.Bool?, checkIdScan: Swift.Bool?, checkDocumentScan: Swift.Bool?, checkVoiceConsent: Swift.Bool?
  public let companyName: Swift.String?
  public let questionsCount: Swift.String?
  public init(name: Swift.String, id: Swift.String, region: Swift.String, active: Swift.Bool, modules: [IncdOnboarding.OmniFlowsModule], liveness: IncdOnboarding.OmniLivenessSeverity)
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: IncdOnboarding.OmniFlow, rhs: IncdOnboarding.OmniFlow) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
public struct OmniFlowsModule : Swift.Codable, Swift.Equatable {
  public let id: Swift.String?
  public let apiKey: Swift.String?
  public let name: IncdOnboarding.OmniFlowModuleType?
  public let moduleDescription: Swift.String?
  public let videoURL: Swift.String?
  public let categoryID: Swift.String?
  public let conversion: Swift.Double?
  public let security: Swift.Double?
  public let price: Swift.Double?
  public let active: Swift.Bool?
  public let relatedModules: [Swift.String]?
  public let alternativeModules: [Swift.String]?
  public let configurations: [IncdOnboarding.OmniFlowModuleType]?
  public init(type: IncdOnboarding.OmniFlowModuleType, configurations: [IncdOnboarding.OmniFlowModuleType])
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: IncdOnboarding.OmniFlowsModule, rhs: IncdOnboarding.OmniFlowsModule) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
public enum OmniFlowModuleType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case phoneCapture
  case phone
  case idCaptureTutorial
  case idCapture
  case idValidation
  case videoSelfie
  case videoSelfieAsSelfie
  case selfie
  case selfieTutorial
  case ineValidation
  case signature
  case address
  case conference
  case secondID
  case medicalCard
  case thirdID
  case geolocation
  case deviceFingerprint
  case ipAddress
  case curpValidation
  case ocrOnIDS
  case secure
  case medium
  case conversion
  case faceMatch
  case otp
  case results
  case intro
  case qrScan
  case unsupported
  public init(from decoder: Swift.Decoder) throws
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [IncdOnboarding.OmniFlowModuleType]
  public static var allCases: [IncdOnboarding.OmniFlowModuleType] {
    get
  }
}
public enum OmniLivenessSeverity : Swift.String, Swift.Codable {
  case low
  case medium
  case high
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum AutoApproveLevel : Swift.String, Swift.Codable {
  case conversion
  case medium
  case secure
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum OmniDocumentType : Swift.String, Swift.Codable {
  case signature
  case document
  case creditCard
  case medicalDoc
  case thirdId
  case contract
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct OmniAddDocumentResponse : Swift.Decodable {
  public struct AdditionalInformation : Swift.Codable {
    public init(from decoder: Swift.Decoder) throws
    public func encode(to encoder: Swift.Encoder) throws
  }
  public let success: Swift.Bool?
  public let additionalInformation: IncdOnboarding.OmniAddDocumentResponse.AdditionalInformation?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniAddDocument(imageData: Swift.String, title: Swift.String? = nil, type: IncdOnboarding.OmniDocumentType, secure: Swift.Bool = false, progressChanged: IncdOnboarding.NetworkRouterProgress? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniAddDocumentResponse>) -> Swift.Void)
}
public struct GeolocationData : Swift.Encodable {
  public let longitude: Swift.Float
  public let latitude: Swift.Float
  public let location: Swift.String?
  public let adminArea: Swift.String?
  public let subAdminArea: Swift.String?
  public let locality: Swift.String?
  public let subLocality: Swift.String?
  public let thoroughfare: Swift.String?
  public let subThoroughfare: Swift.String?
  public let postalCode: Swift.String?
  public let countryCode: Swift.String?
  public let countryName: Swift.String?
  public init(longitude: Swift.Float, latitude: Swift.Float, location: Swift.String? = nil, adminArea: Swift.String? = nil, subAdminArea: Swift.String? = nil, locality: Swift.String? = nil, subLocality: Swift.String? = nil, thoroughfare: Swift.String? = nil, subThoroughfare: Swift.String? = nil, postalCode: Swift.String? = nil, countryCode: Swift.String? = nil, countryName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
extension NetworkManager {
  public func omniAddGeolocation(geolocationData: IncdOnboarding.GeolocationData, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public struct OmniGetDataResponse : Swift.Decodable {
  public let id: Swift.String?
  public let createdAt: Swift.Int?, updatedAt: Swift.Int?
  public let apiKey: Swift.String?, name: Swift.String?, phone: Swift.String?, birthDate: Swift.String?
  public let address: Swift.String?, gender: Swift.String?, typeOfID: Swift.String?, countryCode: Swift.String?
  public let cic: Swift.String?, numeroEmisionCredencial: Swift.String?, deviceType: Swift.String?, acuantID: Swift.String?
  public let tamperedConfidence: Swift.Double?
  public let idValidationScore: Swift.String?
  public let fakeIDConfidence: Swift.Double?
  public let paperFrontConfidence: Swift.Int?
  public let screenFrontConfidence: Swift.Double?
  public let paperBackConfidence: Swift.Int?
  public let screenBackConfidence: Swift.Double?, retouchFrontConfidence: Swift.Double?
  public let classification: Swift.Int?, frontSharpness: Swift.Int?, frontGlare: Swift.Int?
  public let frontShadowConfidence: Swift.Double?
  public let backSharpness: Swift.Int?, backGlare: Swift.Int?
  public let backShadowConfidence: Swift.Double?
  public let issueDate: Swift.Int?, expirationDate: Swift.Int?
  public let croppedIDFaceRef: Swift.String?, fullFrameFrontIDRef: Swift.String?, fullFrameBackIDRef: Swift.String?
  public let frontIDAttempts: Swift.Int?, backIDAttempts: Swift.Int?, slefieAttempts: Swift.Int?
  public let proofOfAddress: Swift.String?
  public let addressStatementTimestamp: Swift.Int?
  public let documentType: Swift.String?
  public let proofOfAddressScore: Swift.Double?
  public let fullAddress: Swift.Bool?
  public let governmentRecognitionConfidence: Swift.Double?
  public let governmentValidationStatus: Swift.String?
  public let idValidationFinished: Swift.Bool?, paternalLastNameValid: Swift.Bool?, maternalLastNameValid: Swift.Bool?, nameValid: Swift.Bool?
  public let curpValid: Swift.Bool?, ocrValid: Swift.Bool?, claveDeElectorValid: Swift.Bool?, numeroEmisionCredencialValid: Swift.Bool?
  public let registrationDateValid: Swift.Bool?, issueDateValid: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniGetData(ID: Swift.String? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniGetDataResponse>) -> Swift.Void)
}
public struct OmniProcessGovernmentValidationResponse : Swift.Decodable {
  public let statusCode: IncdOnboarding.GovernmentValidationStatus
  public init(from decoder: Swift.Decoder) throws
}
public enum GovernmentValidationStatus : Swift.Int, Swift.Decodable {
  case startedSuccessfully
  case ok
  case validationError
  case ineConnectionError
  case ineInfrastructureError
  case moduleNotSupported
  case missingDocumentId
  case missingSelfie
  case userNotFound
  case userNotFoundInIneDB
  case notEnoughData
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension NetworkManager {
  public func omniProcessGovernmentValidation(completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniProcessGovernmentValidationResponse>) -> Swift.Void)
}
@frozen public struct UserConsentResult {
  public var success: Swift.Bool?
  public var error: IncdOnboarding.IncdError?
  public init(_ success: Swift.Bool? = nil, error: IncdOnboarding.IncdError? = nil)
}
public enum UserConsentError {
  case error(_: IncdOnboarding.IncdError)
  case declinedToGiveUserConsent
  public var rawValue: Swift.String {
    get
  }
}
public struct OmniAddConfigurationResponse : Swift.Decodable {
  public let configurationID: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniAddConfiguration(configuration: IncdOnboarding.OmniConfiguration, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniAddConfigurationResponse>) -> Swift.Void)
}
public struct OmniGetMedicalOCRDataResponse : Swift.Decodable {
  public let name: Swift.String?
  public let mentions: Swift.String?
  public let restrictions: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniGetMedicalOCRData(completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniGetMedicalOCRDataResponse>) -> Swift.Void)
}
extension NetworkManager {
  public func omniAddSpeech(audioData: Swift.String, audioOnly: Swift.Bool = true, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
extension NetworkManager {
  public func omniAddPhone(phone: Swift.String, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
extension NetworkManager {
  public func omniEditConfiguration(configID: Swift.String, description: Swift.String? = nil, platforms: [IncdOnboarding.OmniConfigurationPlatform]? = nil, active: Swift.Bool? = nil, modules: [IncdOnboarding.OmniConfigurationModuleType]? = nil, livenessSeverity: IncdOnboarding.OmniLivenessSeverity? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public struct OmniGetAllConfigurationsResponse : Swift.Decodable {
  public let configurations: [IncdOnboarding.OmniConfiguration]?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniGetAllConfigurations(apiKey: Swift.String? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniGetAllConfigurationsResponse>) -> Swift.Void)
}
extension NetworkManager {
  public func omniUpdate(manualIdCheckNeeded: Swift.Bool? = nil, manualSelfieCheckNeeded: Swift.Bool? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public struct OmniRecognizeResponse : Swift.Decodable {
  public let customerId: Swift.String?
  public let token: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniRecognize(template: Swift.String, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniRecognizeResponse>) -> Swift.Void)
}
public struct OmniGetConfigurationResponse : Swift.Decodable {
  public let modules: [IncdOnboarding.OmniConfigurationModuleType]
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniGetConfiguration(ID: Swift.String, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniGetConfigurationResponse>) -> Swift.Void)
}
public struct OmniGetVideoSelfieQuestionsResponse : Swift.Decodable {
  public let questionAndAnswers: [IncdOnboarding.VideoSelfieQuestion]
  public init(from decoder: Swift.Decoder) throws
}
public struct VideoSelfieQuestion : Swift.Decodable {
  public let question: Swift.String?
  public let answer: Swift.String?
  public let id: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniGetVideoSelfieQuestions(numberOfQuestions: Swift.Int, returnVoiceConsentQuestion: Swift.Bool = true, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniGetVideoSelfieQuestionsResponse>) -> Swift.Void)
}
public struct OmniConfiguration : Swift.Codable, Swift.Equatable {
  public let id: Swift.String?
  public let apiKey: Swift.String?
  public let name: Swift.String?
  public var description: Swift.String?
  public var modules: [IncdOnboarding.OmniConfigurationModuleType]?
  public var livenessSeverity: IncdOnboarding.OmniLivenessSeverity?
  public let numberOfSessions: Swift.Int?
  public let platforms: [IncdOnboarding.OmniConfigurationPlatform]?
  public var active: Swift.Bool?
  public let signatureProvider: Swift.String?
  public init(name: Swift.String, description: Swift.String, platforms: [IncdOnboarding.OmniConfigurationPlatform], active: Swift.Bool, modules: [IncdOnboarding.OmniConfigurationModuleType], livenessSeverity: IncdOnboarding.OmniLivenessSeverity)
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (lhs: IncdOnboarding.OmniConfiguration, rhs: IncdOnboarding.OmniConfiguration) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
public enum OmniConfigurationModuleType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case phone
  case intro
  case id
  case qrScan
  case passportScan
  case address
  case selfie
  case faceMatch
  case ineValidation
  case medicalCard
  case signature
  case userConsent
  case conference
  case results
  case approve
  case otp
  case acceptVideoRecording
  case videoOnboarding
  case geolocation
  case ipAddress
  case ineOCRValidation
  case signNom151
  case tutorialID
  case tutorialSelfie
  case idOCR
  case editableOCR
  case secondID
  case thirdID
  case backID
  case tutorialBackID
  case deviceFingerprint
  case showPreview
  case score
  case documentScan
  case curpValidation
  case unknown
  public init(from decoder: Swift.Decoder) throws
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [IncdOnboarding.OmniConfigurationModuleType]
  public static var allCases: [IncdOnboarding.OmniConfigurationModuleType] {
    get
  }
}
public enum OmniConfigurationPlatform : Swift.String, Swift.Codable {
  case iOS
  case android
  case webApp
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum OmniGetImagesType : Swift.String, Swift.Codable {
  case selfie
  case croppedFace
  case croppedIDFace
  case document
  case signature
  case fullFrameFrontID
  case fullFrameBackID
  case croppedFrontID
  case croppedBackID
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct OmniGetImagesResponse : Swift.Decodable {
  public let selfie: Swift.String?
  public let croppedFace: Swift.String?
  public let croppedIDFace: Swift.String?
  public let document: Swift.String?
  public let signature: Swift.String?
  public let fullFrameFrontID: Swift.String?
  public let fullFrameBackID: Swift.String?
  public let croppedFrontID: Swift.String?
  public let croppedBackID: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniGetImages(idCategory: IncdOnboarding.IDCategory = .primary, customerID: Swift.String? = nil, types: [IncdOnboarding.OmniGetImagesType], completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniGetImagesResponse>) -> Swift.Void)
}
extension NetworkManager {
  public func omniAddDocumentID(documentID: Swift.String, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public struct OmniConferenceAddToQueueResponse : Swift.Decodable {
  public let waitingTimeInSeconds: Swift.Int
  public let success: Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniConferenceAddToQueue(queue: IncdOnboarding.ConferenceQueue? = nil, interviewCode: Swift.String? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniConferenceAddToQueueResponse>) -> Swift.Void)
}
public struct OmniIdentifyResponse : Swift.Decodable {
  public let customerId: Swift.String?
  public let interviewId: Swift.String?
  public let externalId: Swift.String?
  public let token: Swift.String?
  public let spoofConfidence: Swift.Double?
  public let secondFactor: Swift.Bool?
  public let fullName: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public struct OmniIdentifyFaceCoordinates : Swift.Encodable {
  public let leftEyeX: Swift.Double
  public let leftEyeY: Swift.Double
  public let rightEyeX: Swift.Double
  public let rightEyeY: Swift.Double
  public let x: Swift.Double
  public let y: Swift.Double
  public let width: Swift.Double
  public let height: Swift.Double
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FrameSize : Swift.Encodable {
  public let width: Swift.Int, height: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
}
public struct OmniIdentifyClientInfo : Swift.Encodable {
  public let deviceType: Swift.String
  public let deviceName: Swift.String
  public let version: Swift.Int
  public let frameSize: IncdOnboarding.FrameSize
  public let buildNumber: Swift.Int
  public let type: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
}
public struct OmniIdentifySelfie : Swift.Encodable {
  public let template: Swift.String?
  public let base64Image: Swift.String?
  public let faceCoordinates: IncdOnboarding.OmniIdentifyFaceCoordinates?
  public let clientInfo: IncdOnboarding.OmniIdentifyClientInfo?
  public init(base64Image: Swift.String?, faceCoordinates: IncdOnboarding.OmniIdentifyFaceCoordinates?, template: Swift.String?, clientInfo: IncdOnboarding.OmniIdentifyClientInfo?)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct OmniIdentifyBody : Swift.Encodable {
  public let type: Swift.String
  public let selfie: IncdOnboarding.OmniIdentifySelfie
  public let returnFirst: Swift.Bool?
  public init(selfie: IncdOnboarding.OmniIdentifySelfie, returnFirst: Swift.Bool?)
  public func encode(to encoder: Swift.Encoder) throws
}
extension NetworkManager {
  public func omniIdentify(body: IncdOnboarding.OmniIdentifyBody, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniIdentifyResponse>) -> Swift.Void)
}
extension NetworkManager {
  public func omniConferenceCodeVerify(interviewCode: Swift.String, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
extension NetworkManager {
  public func omniAddUserConsent(title: Swift.String, content: Swift.String, status: Swift.Bool, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public struct OmniProcessFaceResponse : Swift.Decodable {
  public let confidence: Swift.Float?
  public let existingUser: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniProcessFace(idCategory: IncdOnboarding.IDCategory = .primary, imageType: IncdOnboarding.OmniAddFaceType? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniProcessFaceResponse>) -> Swift.Void)
}
public struct OmniGetScoreResponse : Swift.Decodable {
  public let idValidation: IncdOnboarding.IDValidation?
  public let liveness: IncdOnboarding.Liveness?
  public let faceRecognition: IncdOnboarding.FaceRecognition?
  public let governmentValidation: IncdOnboarding.GovernmentValidation?
  public let overall: IncdOnboarding.Result?
  public init(from decoder: Swift.Decoder) throws
}
public struct Result : Swift.Decodable {
  public let value: Swift.String?
  public let status: IncdOnboarding.Status?
  public init(value: Swift.String? = nil, status: IncdOnboarding.Status? = nil)
  public init(from decoder: Swift.Decoder) throws
}
public enum Status : Swift.String, Swift.Decodable {
  case ok
  case warning
  case fail
  case unknown
  case manual
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct IDValidation : Swift.Decodable {
  public let overall: IncdOnboarding.Result?
  public let photoSecurityAndQuality: [IncdOnboarding.IDCheck]?, idSpecific: [IncdOnboarding.IDCheck]?
  public init(overall: IncdOnboarding.Result? = nil, photoSecurityAndQuality: [IncdOnboarding.IDCheck]? = nil, idSpecific: [IncdOnboarding.IDCheck]?)
  public init(from decoder: Swift.Decoder) throws
}
public struct IDCheck : Swift.Decodable {
  public let value: Swift.String?, key: Swift.String?
  public let status: IncdOnboarding.Status?
  public init(value: Swift.String? = nil, key: Swift.String? = nil, status: IncdOnboarding.Status? = nil)
  public init(from decoder: Swift.Decoder) throws
}
public struct Liveness : Swift.Decodable {
  public let overall: IncdOnboarding.Result?
  public let livenessScore: IncdOnboarding.Result?
  public let photoQuality: IncdOnboarding.PhotoQuality?
  public init(overall: IncdOnboarding.Result? = nil, livenessScore: IncdOnboarding.Result? = nil, photoQuality: IncdOnboarding.PhotoQuality? = nil)
  public init(from decoder: Swift.Decoder) throws
}
public struct PhotoQuality : Swift.Decodable {
  public let value: Swift.String?
  public init(value: Swift.String? = nil)
  public init(from decoder: Swift.Decoder) throws
}
public struct FaceRecognition : Swift.Decodable {
  public let overall: IncdOnboarding.Result?
  public let croppedFace: Swift.String?, croppedIDFace: Swift.String?
  public let existingUser: Swift.Bool?
  public init(overall: IncdOnboarding.Result? = nil, croppedFace: Swift.String? = nil, croppedIDFace: Swift.String? = nil, existingUser: Swift.Bool? = nil)
  public init(from decoder: Swift.Decoder) throws
}
public struct GovernmentValidation : Swift.Decodable {
  public let overall: IncdOnboarding.Result?
  public let recognitionConfidence: IncdOnboarding.Result?
  public let validationStatus: IncdOnboarding.IDCheck?
  public let ocrValidation: [IncdOnboarding.IDCheck]?
  public init(overall: IncdOnboarding.Result? = nil, recognitionConfidence: IncdOnboarding.Result? = nil, validationStatus: IncdOnboarding.IDCheck? = nil, ocrValidation: [IncdOnboarding.IDCheck]? = nil)
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniGetScore(ID: Swift.String? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniGetScoreResponse>) -> Swift.Void)
}
public struct OmniGetRegionsResponse : Swift.Decodable {
  public let regions: [IncdOnboarding.OmniRegion]
  public init(from decoder: Swift.Decoder) throws
}
@frozen public struct OmniRegion : Swift.Decodable, Swift.Equatable {
  public let label: Swift.String?
  public let emoji: Swift.String?
  public let code: Swift.String?
  public init(label: Swift.String? = nil, emoji: Swift.String? = nil, code: Swift.String? = nil)
  public static func == (r1: IncdOnboarding.OmniRegion, r2: IncdOnboarding.OmniRegion) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniGetRegions(completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniGetRegionsResponse>) -> Swift.Void)
}
public struct OmniAttachSignatureToPDFResponse : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniAttachSignatureToPDF(_ pdf: Foundation.Data, x: Swift.Int, y: Swift.Int, height: Swift.Int, pageNumber: Swift.Int = 1, completion: @escaping (Swift.Bool) -> Swift.Void)
}
extension NetworkManager {
  public func omniAddDeviceFingerprint(hash: Swift.String, ip: Swift.String, data: Swift.String, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public struct OmniAddIDResponse : Swift.Decodable {
  public let classification: Swift.Bool?
  public let readability: Swift.Bool?
  public let sharpness: Swift.Int?
  public let glare: Swift.Int?
  public let shadowConfidence: Swift.Float?
  public let typeOfId: IncdOnboarding.TypeOfID?
  public init(from decoder: Swift.Decoder) throws
}
public enum TypeOfID : Swift.String, Swift.Decodable {
  case idCard
  case driversLicense
  case voterIdentification
  case birthCertificate
  case passport
  case currency
  case permit
  case residenceDocument
  case travelDocument
  case tribalIdentification
  case vehicleRegistration
  case visa
  case weaponLicense
  case other
  case unknown
  public init(from decoder: Swift.Decoder) throws
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum IDCategory : Swift.String {
  case primary
  case secondary
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum IDType {
  case id
  case passport
  public static func == (a: IncdOnboarding.IDType, b: IncdOnboarding.IDType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct OmniFinishStatusResponse : Swift.Decodable {
  public let redirectionUrl: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniFinishStatus(completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniFinishStatusResponse>) -> Swift.Void)
}
extension NetworkManager {
  public func omniDeleteConfiguration(configID: Swift.String, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public struct OmniConferenceInterviewerInfoResponse : Swift.Decodable {
  public let interviewerName: Swift.String?
  public let interviewToken: Swift.String?
  public let sessionId: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniConferenceInterviewerInfo(completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniConferenceInterviewerInfoResponse>) -> Swift.Void)
}
public enum ConferenceQueue : Swift.String, Swift.Codable, Swift.CaseIterable {
  case aristotle
  case buddha
  case confucius
  case diogenes
  case defaultQueue
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
  public typealias AllCases = [IncdOnboarding.ConferenceQueue]
  public static var allCases: [IncdOnboarding.ConferenceQueue] {
    get
  }
}
extension NetworkManager {
  public func omniProcessID(idCategory: IncdOnboarding.IDCategory = .primary, queue: IncdOnboarding.ConferenceQueue? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public struct OmniGetOnboardingStatusResponse : Swift.Decodable {
  public let onboardingStatus: IncdOnboarding.OnboardingStatus?
  public init(from decoder: Swift.Decoder) throws
}
public enum OnboardingStatus : Swift.String, Swift.Decodable {
  case idValidationFinished
  case postProcessingFinished
  case faceValidationFinished
  case onboardingFinished
  case unknown
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension NetworkManager {
  public func omniGetOnboardingStatus(ID: Swift.String? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniGetOnboardingStatusResponse>) -> Swift.Void)
}
public struct OmniConferenceQueueIndexResponse : Swift.Decodable {
  public let index: Swift.Int
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniConferenceQueueIndex(queue: IncdOnboarding.ConferenceQueue? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniConferenceQueueIndexResponse>) -> Swift.Void)
}
extension NetworkManager {
  public func omniAddSpeechV1(audioData: Foundation.Data, audioOnly: Swift.Bool = true, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public struct OCRDataName : Swift.Codable {
  public init(fullName: Swift.String?, firstName: Swift.String?, paternalLastName: Swift.String?, maternalLastName: Swift.String?)
  public let fullName: Swift.String?
  public let firstName: Swift.String?
  public let paternalLastName: Swift.String?
  public let maternalLastName: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct OCRDataAddress : Swift.Codable {
  public let street: Swift.String?
  public let colony: Swift.String?
  public let postalCode: Swift.String?
  public let city: Swift.String?
  public let state: Swift.String?
  public init(street: Swift.String? = nil, colony: Swift.String? = nil, postalCode: Swift.String? = nil, city: Swift.String? = nil, state: Swift.String? = nil)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct OmniGetOCRDataResponse : Swift.Codable {
  public let name: IncdOnboarding.OCRDataName?
  public let address: Swift.String?
  public let addressFields: IncdOnboarding.OCRDataAddress?
  public let addressFromStatement: Swift.String?
  public let addressFieldsFromStatement: IncdOnboarding.OCRDataAddress?
  public let addressStatementEmissionDate: Swift.Int?
  public let exteriorNumber: Swift.String?
  public let interiorNumber: Swift.String?
  public let typeOfId: Swift.String?
  public let fullAddress: Swift.Bool?
  public let birthDate: Swift.Int?
  public let gender: Swift.String?
  public let claveDeElector: Swift.String?
  public let curp: Swift.String?
  public let registrationDate: Swift.Int?, expirationDate: Swift.Int?, issueDate: Swift.Int?
  public let numeroEmisionCredencial: Swift.String?
  public let cic: Swift.String?
  public let ocr: Swift.String?
  public let notExtracted: Swift.Int?
  public let notExtractedDetails: [Swift.String]?
  public let fullNameMrz: Swift.String?
  public init(name: IncdOnboarding.OCRDataName?, address: Swift.String?, addressFields: IncdOnboarding.OCRDataAddress?, birthDate: Swift.Int?, gender: Swift.String?, claveDeElector: Swift.String?, curp: Swift.String?, registrationDate: Swift.Int?, expirationDate: Swift.Int?, issueDate: Swift.Int?, numeroEmisionCredencial: Swift.String?, cic: Swift.String?, ocr: Swift.String?, notExtracted: Swift.Int?, notExtractedDetails: [Swift.String]?, fullNameMrz: Swift.String?)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension NetworkManager {
  public func omniGetOCRData(customerID: Swift.String? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniGetOCRDataResponse>) -> Swift.Void)
}
public struct OmniConferenceCodeGenerateResponse : Swift.Decodable {
  public let interviewCode: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniConferenceCodeGenerate(completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniConferenceCodeGenerateResponse>) -> Swift.Void)
}
public struct OmniProcessApproveResponse : Swift.Decodable {
  public let uuid: Swift.String
  public let token: Swift.String
  public let success: Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
public enum ApproveComponent : Swift.String, Swift.Decodable {
  case liveness
  case faceRecognition
  case id
  case governmentValidation
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension NetworkManager {
  public func omniProcessApprove(interviewID: Swift.String? = nil, approveComponents: [IncdOnboarding.ApproveComponent]? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniProcessApproveResponse>) -> Swift.Void)
}
public enum Event : Swift.String, Swift.Encodable {
  case startVideoSelfie
  case tutorialVideoSelfie
  case videoSelfieSelfieMatched
  case videoSelfieVideoLinkGenerated
  case videoSelfieVideoUploaded
  case idFrontDetected
  case idBackDetected
  case poaScanned
  case questionAnswered
  case tosAccepted
  case continueBtn
  case startIdCapture
  case tutorialFrontId
  case cameraFrontId
  case switchToManualCaptureFrontId
  case manualCaptureFrontId
  case needHelpFrontId
  case closeNeedHelpFrontId
  case needHelpBackId
  case closeNeedHelpBackId
  case tutorialBackId
  case cameraBackId
  case switchToManualCaptureBackId
  case manualCaptureBackId
  case tutorialPassport
  case cameraPassport
  case manualCapturePassport
  case startSecondIdCapture
  case tutorialFrontSecondId
  case cameraFrontSecondId
  case switchToManualCaptureFrontSecondId
  case manualCaptureFrontSecondId
  case needHelpFrontSecondId
  case closeNeedHelpFrontSecondId
  case needHelpBackSecondId
  case closeNeedHelpBackSecondId
  case tutorialBackSecondId
  case cameraBackSecondId
  case switchToManualCaptureBackSecondId
  case manualCaptureBackSecondId
  case tutorialSecondPassport
  case cameraSecondPassport
  case manualCaptureSecondPassport
  case startSelfie
  case tutorialSelfie
  case cameraSelfie
  case switchToManualCaptureSelfie
  case manualCaptureSelfie
  case startDocumentValidation
  case skipDocumentValidation
  case tutorialDocumentValidation
  case startOtp
  case startVideoConference
  case userFirstInQueue
  case userStreamShown
  case webExecutiveStreamShown
  case sdkInfo
  case background
  case foreground
  case close
  case intro
  case closeIntro
  case error
  case userCanceled
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension NetworkManager {
  public func omniAddEvent(_ event: IncdOnboarding.Event, value: Swift.Int? = nil, identityID: Swift.String? = nil, eventData: [Swift.String : Any] = [:], completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public struct OmniStartResponse : Swift.Decodable {
  public let interviewId: Swift.String?
  public let token: Swift.String?
  public let interviewCode: Swift.String?
  public let idCaptureTimeout: Swift.Int?
  public let selfieCaptureTimeout: Swift.Int?
  public let idCaptureRetries: Swift.Int?
  public let selfieCaptureRetries: Swift.Int?
  public init(from decoder: Swift.Decoder) throws
}
public enum IncdRegion : Swift.String, Swift.Codable, Swift.CaseIterable {
  case mexico
  case us
  case europe
  case australia
  public var name: Swift.String {
    get
  }
  public var emoji: Swift.String {
    get
  }
  public var code: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [IncdOnboarding.IncdRegion]
  public static var allCases: [IncdOnboarding.IncdRegion] {
    get
  }
}
extension NetworkManager {
  public func omniStart(region: Swift.String? = nil, externalId: Swift.String? = nil, interviewId: Swift.String? = nil, uuid: Swift.String? = nil, configurationId: Swift.String? = nil, redirectionUrl: Swift.String? = nil, customFields: [Swift.String : Swift.String]? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniStartResponse>) -> Swift.Void)
}
public struct OmniGetOCRDataV2Response : Swift.Codable {
  public var ocrData: IncdOnboarding.OmniGetOCRDataResponse?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension NetworkManager {
  public func omniGetOCRDataV2(idCategory: IncdOnboarding.IDCategory = .primary, interviewID: Swift.String? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniGetOCRDataV2Response>) -> Swift.Void)
}
extension NetworkManager {
  public func omniProcessAddress(completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
extension NetworkManager {
  public func omniDeleteCustomer(phone: Swift.String? = nil, customerID: Swift.String? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
extension NetworkManager {
  public func omniAddBackID(idCategory: IncdOnboarding.IDCategory = .primary, imageData: Swift.String, secure: Swift.Bool = false, progressChanged: IncdOnboarding.NetworkRouterProgress? = nil, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniAddIDResponse>) -> Swift.Void)
}
extension NetworkManager {
  public func omniGetAllFlows(completion: @escaping (IncdOnboarding.IncdNetworkResponse<[IncdOnboarding.OmniFlow]>) -> Swift.Void)
}
public struct ThemeConfiguration {
  public var colors: IncdOnboarding.ColorsConfiguration
  public var fonts: IncdOnboarding.FontsConfiguration
  public var buttons: IncdOnboarding.ButtonsConfiguration
  public var labels: IncdOnboarding.LabelsConfiguration
  public init(colors: IncdOnboarding.ColorsConfiguration, fonts: IncdOnboarding.FontsConfiguration, buttons: IncdOnboarding.ButtonsConfiguration, labels: IncdOnboarding.LabelsConfiguration)
}
public struct ColorsConfiguration {
  public var accent: UIKit.UIColor
  public var primary: UIKit.UIColor
  public var background: UIKit.UIColor
  public var secondaryBackground: UIKit.UIColor
  public var success: UIKit.UIColor
  public var error: UIKit.UIColor
  public var warning: UIKit.UIColor
  public init(accent: UIKit.UIColor = .incdAccent, primary: UIKit.UIColor = .incdPrimary, background: UIKit.UIColor = .incdBackground, secondaryBackground: UIKit.UIColor = .incdSecondaryBackground, success: UIKit.UIColor = .incdSuccess, error: UIKit.UIColor = .incdError, warning: UIKit.UIColor = .incdWarning)
}
public struct FontsConfiguration {
  public var buttonBig: UIKit.UIFont
  public var buttonMedium: UIKit.UIFont
  public var title: UIKit.UIFont
  public var hugeTitle: UIKit.UIFont
  public var subtitle: UIKit.UIFont
  public var boldedSubtitle: UIKit.UIFont
  public var smallSubtitle: UIKit.UIFont
  public var info: UIKit.UIFont
  public var body: UIKit.UIFont
  public var boldedBody: UIKit.UIFont
  public var textFieldBig: UIKit.UIFont
  public var textFieldMedium: UIKit.UIFont
  public init(title: UIKit.UIFont = .incdHeadline2, hugeTitle: UIKit.UIFont = .incdBigSpecial, subtitle: UIKit.UIFont = .incdHeadline3, boldedSubtitle: UIKit.UIFont = .incdHeadline3Bold, smallSubtitle: UIKit.UIFont = .incdHeadline4, info: UIKit.UIFont = .incdInfo, body: UIKit.UIFont = .incdBody, boldedBody: UIKit.UIFont = .incdBoldedBody, buttonBig: UIKit.UIFont = .incdBigButton, buttonMedium: UIKit.UIFont = .incdMediumButton, textFieldBig: UIKit.UIFont = .incdBigInput, textFieldMedium: UIKit.UIFont = .incdMediumInput)
}
public struct ButtonsConfiguration {
  public var primary: IncdOnboarding.ButtonConfiguration
  public var secondary: IncdOnboarding.ButtonConfiguration
  public var text: IncdOnboarding.ButtonConfiguration
  public init(primary: IncdOnboarding.ButtonConfiguration = .defaultPrimaryButtonConfig, secondary: IncdOnboarding.ButtonConfiguration = .defaultSecondaryButtonConfig, text: IncdOnboarding.ButtonConfiguration = .defaultTextButtonConfig)
}
public struct LabelsConfiguration {
  public var title: IncdOnboarding.LabelConfiguration
  public var secondaryTitle: IncdOnboarding.LabelConfiguration
  public var subtitle: IncdOnboarding.LabelConfiguration
  public var secondarySubtitle: IncdOnboarding.LabelConfiguration
  public var smallSubtitle: IncdOnboarding.LabelConfiguration
  public var info: IncdOnboarding.LabelConfiguration
  public var secondaryInfo: IncdOnboarding.LabelConfiguration
  public var body: IncdOnboarding.LabelConfiguration
  public var secondaryBody: IncdOnboarding.LabelConfiguration
  public var code: IncdOnboarding.LabelConfiguration
  public init(title: IncdOnboarding.LabelConfiguration = .defaultTitle, secondaryTitle: IncdOnboarding.LabelConfiguration = .defaultSecondaryTitle, subtitle: IncdOnboarding.LabelConfiguration = .defaultSubtitle, secondarySubtitle: IncdOnboarding.LabelConfiguration = .defaultSecondarySubtitle, smallSubtitle: IncdOnboarding.LabelConfiguration = .defaultSmallSubttile, info: IncdOnboarding.LabelConfiguration = .defaultInfo, secondaryInfo: IncdOnboarding.LabelConfiguration = .defaultSecondaryInfo, body: IncdOnboarding.LabelConfiguration = .defaultBody, secondaryBody: IncdOnboarding.LabelConfiguration = .defaultSecondaryBody, code: IncdOnboarding.LabelConfiguration = .defaultCode)
}
public struct ThemedStates<T> {
  public var normal: T
  public var highlighted: T
  public var disabled: T
  public init(normal: T, highlighted: T, disabled: T)
}
@_hasMissingDesignatedInitializers public class IncdOnboardingTheme {
  public static var btnBackgroundColor: UIKit.UIColor
  public static var btnBackgroundColorDisabled: UIKit.UIColor
  public static var btnTitleColor: UIKit.UIColor
  public static var btnCornerRadius: CoreGraphics.CGFloat
  public static var btnTitleFontName: Swift.String
  public static var btnActivityIndicatorColor: UIKit.UIColor?
  public static var labelPhoneTintColor: UIKit.UIColor
  public static var labelPhoneFontName: Swift.String
  public static var labelPhoneTextColor: UIKit.UIColor
  public static var labelPrimaryFontName: Swift.String
  public static var labelPrimaryTextColor: UIKit.UIColor
  public static var labelPrimaryHighlightColor: UIKit.UIColor
  public static var labelSecondaryFontName: Swift.String
  public static var labelSecondaryTextColor: UIKit.UIColor
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IncdOnboardingManager {
  public static let shared: IncdOnboarding.IncdOnboardingManager
  public var presentingViewController: UIKit.UIViewController!
  public var dismissOnCompletion: Swift.Bool
  @objc deinit
}
public class IncdOnboardingConfiguration : IncdOnboarding.IncdOnboardingFlowConfiguration {
  @available(*, deprecated, message: "Provide regionCode instead of region parameter")
  public init(region: IncdOnboarding.IncdRegion? = nil, queue: IncdOnboarding.ConferenceQueue? = nil, waitForTutorials: Swift.Bool? = nil, configurationName: Swift.String = "")
  public init(regionCode: Swift.String? = nil, queue: IncdOnboarding.ConferenceQueue? = nil, waitForTutorials: Swift.Bool? = nil, configurationName: Swift.String = "")
  public init()
  public func isValid() -> Swift.String?
  @objc deinit
  override public init(flowTag: Swift.String)
}
public class IncdOnboardingFlowConfiguration {
  public init(flowTag: Swift.String)
  public func addIntro(checks: [IncdOnboarding.IntroCheck])
  public func addPhone()
  public func addEmail()
  public func addIdScan(showTutorials: Swift.Bool? = nil, idType: IncdOnboarding.IDType? = nil, idCategory: IncdOnboarding.IDCategory = .primary)
  public func addQRScan(showTutorials: Swift.Bool? = nil)
  public func addDocumentScan(showTutorials: Swift.Bool? = nil, showDocumentProviderOptions: Swift.Bool? = nil, documentType: IncdOnboarding.OmniDocumentType)
  public func addCreditCardCCV()
  public func addGeolocation()
  public func addSelfieScan(showTutorials: Swift.Bool? = nil, lensesCheck: Swift.Bool? = nil, brightnessThreshold: Swift.Float? = nil)
  public func addFaceMatch(idCategory: IncdOnboarding.IDCategory = .primary)
  public func addGovernmentValidation()
  public func addCURPValidation()
  public func addSignature(title: Swift.String? = nil, description: Swift.String? = nil, descriptionMaxLines: Swift.Int? = nil, documents: [IncdOnboarding.SignDocument] = [])
  public func addUserConsent(title: Swift.String, content: Swift.String)
  public func addApproval(forceApproval: Swift.Bool? = nil)
  public func addUserScore(userScoreFetchMode resultsMode: IncdOnboarding.UserScoreFetchMode? = nil)
  public func addCaptcha()
  public func addVideoConference(disableMicOnCallStarted: Swift.Bool? = nil)
  public func addVideoSelfie(videoSelfieConfiguration: IncdOnboarding.VideoSelfieConfiguration)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IncdTheme {
  public static var current: IncdOnboarding.ThemeConfiguration
  public static func loadDefaultTheme()
  @objc deinit
}
public enum OnboardingValidationModule {
  case id
  case secondId
  case liveness
  case faceRecognition
  case faceRecognitionSecondId
  case governmentValidation
  case governmentFaceValidation
  case governmentOcrValidation
  case videoSelfie
  public var name: Swift.String {
    get
  }
  public static func getOnboardingValidationModuleBy(name: Swift.String) -> IncdOnboarding.OnboardingValidationModule?
  public static func == (a: IncdOnboarding.OnboardingValidationModule, b: IncdOnboarding.OnboardingValidationModule) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@frozen public enum DocumentScanError {
  case error(_: IncdOnboarding.IncdError)
  case userCancelled
  case permissionsDenied
  public var rawValue: Swift.String {
    get
  }
}
@frozen public struct DocumentScanResult {
  public var documentImage: UIKit.UIImage?
  public var data: Any?
  public var documentType: IncdOnboarding.OmniDocumentType
  public var error: IncdOnboarding.DocumentScanError?
  public var insuranceCardData: IncdOnboarding.OmniGetMedicalOCRDataResponse? {
    get
  }
  public var addressFieldsFromPoa: IncdOnboarding.OCRDataAddress? {
    get
  }
  public init(documentImage: UIKit.UIImage? = nil, data: Any? = nil, documentType: IncdOnboarding.OmniDocumentType, error: IncdOnboarding.DocumentScanError? = nil)
}
@frozen public struct GovernmentValidationResult {
  public var success: Swift.Bool
  public var error: IncdOnboarding.IncdError?
  public init(success: Swift.Bool, error: IncdOnboarding.IncdError? = nil)
}
@frozen public enum SelfieScanMode : Swift.Int, Swift.CaseIterable {
  case enroll
  case login
  public var localizedName: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [IncdOnboarding.SelfieScanMode]
  public static var allCases: [IncdOnboarding.SelfieScanMode] {
    get
  }
}
@available(*, deprecated, message: "\n\nUse `IncdOnboardingManager.shared.startFaceLogin` method and its parameters instead.")
@frozen public struct SelfieLoginInfo {
  internal var customerUUID: Swift.String?
  internal var faceAuthMode: IncdOnboarding.FaceAuthMode?
  internal var spoofThreshold: Swift.Float?
  internal var frThreshold: Swift.Float?
  public init(customerUUID: Swift.String? = nil, faceAuthMode: IncdOnboarding.FaceAuthMode? = nil, spoofThreshold: Swift.Float? = nil, frThreshold: Swift.Float? = nil)
}
@frozen public struct SelfieScanResult {
  public var spoofAttempt: Swift.Bool?
  public var faceLoginResult: IncdOnboarding.FaceLoginResult?
  public var image: UIKit.UIImage?
  public var selfieEncryptedBase64: Swift.String?
  public var error: IncdOnboarding.SelfieScanError?
  public init(spoofAttempt: Swift.Bool? = nil, faceLoginResult: IncdOnboarding.FaceLoginResult? = nil, image: UIKit.UIImage? = nil, selfieEncryptedBase64: Swift.String? = nil, error: IncdOnboarding.SelfieScanError? = nil)
}
@frozen public struct FaceLoginResult {
  public var success: Swift.Bool?
  public var customerUUID: Swift.String?
  public var interviewId: Swift.String?
  public var interviewToken: Swift.String?
  public var token: Swift.String?
  public var transactionId: Swift.String?
  public init(success: Swift.Bool? = nil, customerUUID: Swift.String? = nil, interviewId: Swift.String? = nil, interviewToken: Swift.String? = nil, token: Swift.String? = nil, transactionId: Swift.String? = nil)
}
@frozen public enum SelfieScanError {
  case error(_: IncdOnboarding.IncdError)
  case permissionsDenied
  case spoofDetected
  case lensesDetected
  case tooDark
  case userNotFound
  case userCancelled
  case secondFactorAuthorizationFailed
  case specifiedFaceAuthNotAvailable
  public var rawValue: Swift.String {
    get
  }
}
@frozen public enum IntroCheck : Swift.String {
  case id
  case passport
  case insuranceCard
  case proofOfAddress
  case selfie
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
@frozen public enum IntroError {
  case error(_: IncdOnboarding.IncdError)
  case userCancelled
  public var rawValue: Swift.String {
    get
  }
}
@frozen public struct IntroResult {
  public var success: Swift.Bool
  public var error: IncdOnboarding.IntroError?
  public init(success: Swift.Bool, error: IncdOnboarding.IntroError? = nil)
}
@frozen public enum CaptchaError {
  case error(_: IncdOnboarding.IncdError)
  case wrongCaptchaEntered
  case captchaNotGenerated
  public var rawValue: Swift.String {
    get
  }
}
@frozen public struct CaptchaResult {
  public var captcha: Swift.String?
  public var error: IncdOnboarding.CaptchaError?
  public init(captcha: Swift.String? = nil, error: IncdOnboarding.CaptchaError? = nil)
}
@frozen public struct LoginStepUpResult {
  public var loginStepUpResult: IncdOnboarding.OmniLogin1toNConfirmResponse?
  public var error: Swift.String?
  public init(loginStepUpResult: IncdOnboarding.OmniLogin1toNConfirmResponse? = nil, error: Swift.String? = nil)
}
@frozen public struct GeolocationResult {
  public var addressFields: IncdOnboarding.OCRDataAddress?
  public var error: IncdOnboarding.GeolocationError?
  public init(addressFields: IncdOnboarding.OCRDataAddress? = nil, error: IncdOnboarding.GeolocationError? = nil)
}
@frozen public enum GeolocationError {
  case error(_: IncdOnboarding.IncdError)
  case permissionsDenied
  case noLocationExtracted
  public var rawValue: Swift.String {
    get
  }
}
@frozen public struct SignatureFormResult {
  public var signature: UIKit.UIImage?
  public var signedDocuments: [IncdOnboarding.SignDocument]?
  public var error: IncdOnboarding.SignatureError?
  public init(signature: UIKit.UIImage? = nil, signedDocuments: [IncdOnboarding.SignDocument]? = nil, error: IncdOnboarding.SignatureError? = nil)
}
public enum SignatureError {
  case error(_: IncdOnboarding.IncdError)
  case declinedToSignDocument
  public var rawValue: Swift.String {
    get
  }
}
@frozen public struct UserScore {
  public let idValidation: IncdOnboarding.IDValidation?
  public let liveness: IncdOnboarding.Liveness?
  public let faceRecognition: IncdOnboarding.FaceRecognition?
  public let governmentValidation: IncdOnboarding.GovernmentValidation?
  public let overall: IncdOnboarding.Result?
  public var error: IncdOnboarding.IncdError?
  public init(idValidation: IncdOnboarding.IDValidation? = nil, liveness: IncdOnboarding.Liveness? = nil, faceRecognition: IncdOnboarding.FaceRecognition? = nil, governmentValidation: IncdOnboarding.GovernmentValidation? = nil, overall: IncdOnboarding.Result? = nil, error: IncdOnboarding.IncdError? = nil)
}
@frozen public struct PhoneNumberResult {
  public var phone: Swift.String?
  public var error: IncdOnboarding.IncdError?
  public init(phone: Swift.String? = nil, error: IncdOnboarding.IncdError? = nil)
}
@frozen public struct FaceMatchResult {
  public var faceMatched: Swift.Bool?
  public var idCategory: IncdOnboarding.IDCategory
  public var error: IncdOnboarding.IncdError?
  public var rawValue: Swift.String {
    get
  }
  public init(faceMatched: Swift.Bool? = nil, idCategory: IncdOnboarding.IDCategory, error: IncdOnboarding.IncdError? = nil)
}
public struct QRScanResult {
  public var idCic: Swift.String?
  public var error: IncdOnboarding.IncdError?
  public init(idCic: Swift.String? = nil, error: IncdOnboarding.IncdError? = nil)
}
@frozen public struct CURPValidationResult {
  public var curp: Swift.String?
  public var valid: Swift.Bool?
  public var data: [Swift.String : Any]?
  public var error: IncdOnboarding.IncdError?
  public init(curp: Swift.String? = nil, valid: Swift.Bool? = nil, data: [Swift.String : Any]? = nil, error: IncdOnboarding.IncdError? = nil)
}
@frozen public enum IncdIdValidationStatus : Swift.String {
  case unknown
  case ok
  case errorCropQuality
  case errorClassification
  case noFacesFound
  case errorGlare
  case errorSharpness
  case errorReadability
  case errorTypeMismatch
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@frozen public struct IdCaptureResult {
  public var frontIdImage: UIKit.UIImage?
  public var frontIdBase64: Swift.String?
  public var backIdImage: UIKit.UIImage?
  public var backIdBase64: Swift.String?
}
@frozen public enum IdValidationError {
  case error(_: IncdOnboarding.IncdError)
  case cameraSetupFailed
  case permissionsDenied
  public var rawValue: Swift.String {
    get
  }
}
@frozen public struct IdValidationResult {
  public var idCaptureResult: IncdOnboarding.IdCaptureResult?
  public var frontIdCroppedFace: UIKit.UIImage?
  public var frontIdResult: IncdOnboarding.IncdIdValidationStatus
  public var backIdResult: IncdOnboarding.IncdIdValidationStatus
  public var ocrData: IncdOnboarding.OmniGetOCRDataResponse?
  public var idCategory: IncdOnboarding.IDCategory
  public var extendedOcrJsonData: Foundation.Data?
  public var error: IncdOnboarding.IdValidationError?
  public init(idCaptureResult: IncdOnboarding.IdCaptureResult? = nil, frontIdCroppedFace: UIKit.UIImage? = nil, frontIdResult: IncdOnboarding.IncdIdValidationStatus, backIdResult: IncdOnboarding.IncdIdValidationStatus, ocrData: IncdOnboarding.OmniGetOCRDataResponse? = nil, idCategory: IncdOnboarding.IDCategory = .primary, extendedOcrJsonData: Foundation.Data? = nil, error: IncdOnboarding.IdValidationError? = nil)
}
@frozen public struct ApprovalResult {
  public var uuid: Swift.String?
  public var customerToken: Swift.String?
  public var success: Swift.Bool
  public var error: IncdOnboarding.IncdError?
  public init(uuid: Swift.String? = nil, customerToken: Swift.String? = nil, success: Swift.Bool, error: IncdOnboarding.IncdError? = nil)
}
public enum VideoConferenceError {
  case error(_: IncdOnboarding.IncdError)
  case videoConferenceModuleNotIncluded
  public var rawValue: Swift.String {
    get
  }
}
public protocol IncdOnboardingVideoConferenceDelegate {
  func onVideoConferenceCompleted(_ success: Swift.Bool, _ error: IncdOnboarding.VideoConferenceError?)
  func onEstimatedWaitingTime(_ waitingTimeInSeconds: Swift.Int)
  func onQueuePositionChanged(_ newQueuePosition: Swift.Int)
  func onCaptchaCompleted(_ result: IncdOnboarding.CaptchaResult)
}
public class VideoSelfieConfiguration {
  public enum SelfieMode : Swift.String, Swift.CaseIterable {
    case selfieMatch
    case faceMatch
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public typealias AllCases = [IncdOnboarding.VideoSelfieConfiguration.SelfieMode]
    public static var allCases: [IncdOnboarding.VideoSelfieConfiguration.SelfieMode] {
      get
    }
  }
  public func tutorials(enabled: Swift.Bool)
  public func selfieScan(performLivenessCheck: Swift.Bool, mode: IncdOnboarding.VideoSelfieConfiguration.SelfieMode = .selfieMatch)
  public func idScan(enabled: Swift.Bool, validateId: Swift.Bool = false)
  public func documentScan(enabled: Swift.Bool)
  public func voiceConsent(enabled: Swift.Bool, questionsCount: Swift.Int? = nil)
  public init()
  @objc deinit
}
@frozen public struct VideoSelfieResult {
  public var success: Swift.Bool
  public var error: IncdOnboarding.VideoSelfieError?
  public init(success: Swift.Bool, error: IncdOnboarding.VideoSelfieError? = nil)
}
public enum VideoSelfieError {
  case error(_: IncdOnboarding.IncdError)
  case permissionsDenied
  case selfieNotMatched
  case idNotValid
  case idOCRNotValid
  case idFaceNotMatched
  case audioNotMatched
  case videoUploadError
  case spoofDetected
  public var rawValue: Swift.String {
    get
  }
}
public struct ButtonConfiguration {
  public static let defaultPrimaryButtonConfig: IncdOnboarding.ButtonConfiguration
  public static let defaultSecondaryButtonConfig: IncdOnboarding.ButtonConfiguration
  public static let defaultTextButtonConfig: IncdOnboarding.ButtonConfiguration
  public var states: IncdOnboarding.ThemedStates<IncdOnboarding.ButtonThemedState>
  public var big: IncdOnboarding.ButtonSizeVariant
  public var medium: IncdOnboarding.ButtonSizeVariant
  public init(states: IncdOnboarding.ThemedStates<IncdOnboarding.ButtonThemedState>, big: IncdOnboarding.ButtonSizeVariant, medium: IncdOnboarding.ButtonSizeVariant)
}
public struct ButtonSizeVariant {
  public var height: CoreGraphics.CGFloat?
  public var minWidth: CoreGraphics.CGFloat?
  public var contentInsets: UIKit.UIEdgeInsets?
  public var kerning: Foundation.NSNumber?
  public init(height: CoreGraphics.CGFloat? = nil, minWidth: CoreGraphics.CGFloat? = nil, contentInsets: UIKit.UIEdgeInsets? = nil, kerning: Foundation.NSNumber? = nil)
}
public struct ButtonThemedState {
  public var animateStateChange: Swift.Bool?
  public var alpha: CoreGraphics.CGFloat?
  public var backgroundColor: UIKit.UIColor?
  public var borderColor: UIKit.UIColor?
  public var borderWidth: CoreGraphics.CGFloat?
  public var cornerRadius: CoreGraphics.CGFloat?
  public var shadowColor: CoreGraphics.CGColor?
  public var shadowOffset: CoreGraphics.CGSize?
  public var shadowOpacity: Swift.Float?
  public var shadowRadius: CoreGraphics.CGFloat?
  public var textColor: UIKit.UIColor?
  public var transform: CoreGraphics.CGAffineTransform?
  public init(alpha: CoreGraphics.CGFloat? = nil, animateStateChange: Swift.Bool? = nil, backgroundColor: UIKit.UIColor? = nil, borderColor: UIKit.UIColor? = nil, borderWidth: CoreGraphics.CGFloat? = nil, cornerRadius: CoreGraphics.CGFloat? = nil, shadowColor: CoreGraphics.CGColor? = nil, shadowOffset: CoreGraphics.CGSize? = nil, shadowOpacity: Swift.Float? = nil, shadowRadius: CoreGraphics.CGFloat? = nil, textColor: UIKit.UIColor? = nil, transform: CoreGraphics.CGAffineTransform? = nil)
}
public struct OmniVideoSelfieIdOCRResponse : Swift.Decodable {
  public let success: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniVideoSelfieIdOCR(imageData: Swift.String, secure: Swift.Bool = false, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniVideoSelfieIdOCRResponse>) -> Swift.Void)
}
@frozen public enum UserScoreFetchMode : Swift.Int, Swift.CaseIterable {
  case accurate
  case fast
  public var localizedName: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [IncdOnboarding.UserScoreFetchMode]
  public static var allCases: [IncdOnboarding.UserScoreFetchMode] {
    get
  }
}
public struct LabelConfiguration {
  public static let defaultTitle: IncdOnboarding.LabelConfiguration
  public static let defaultSecondaryTitle: IncdOnboarding.LabelConfiguration
  public static let defaultSubtitle: IncdOnboarding.LabelConfiguration
  public static let defaultSecondarySubtitle: IncdOnboarding.LabelConfiguration
  public static let defaultSmallSubttile: IncdOnboarding.LabelConfiguration
  public static let defaultInfo: IncdOnboarding.LabelConfiguration
  public static let defaultSecondaryInfo: IncdOnboarding.LabelConfiguration
  public static let defaultBody: IncdOnboarding.LabelConfiguration
  public static let defaultSecondaryBody: IncdOnboarding.LabelConfiguration
  public static let defaultCode: IncdOnboarding.LabelConfiguration
  public var textColor: UIKit.UIColor?
  public var kerning: Foundation.NSNumber?
  public init(textColor: UIKit.UIColor? = nil, kerning: Foundation.NSNumber? = nil)
}
public struct OmniAddCURPResponse : Swift.Decodable {
  public let success: Swift.Bool?
  public let curp: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniAddCURP(_ curp: Swift.String?, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniAddCURPResponse>) -> Swift.Void)
}
public struct OmniAddCURPV2Response : Swift.Decodable {
  public let success: Swift.Bool?
  public let curp: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public enum CURPGender : Swift.String, Swift.CaseIterable {
  case male
  case female
  public var genderName: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [IncdOnboarding.CURPGender]
  public static var allCases: [IncdOnboarding.CURPGender] {
    get
  }
}
public struct CURPGenerationData {
  public let name: Swift.String
  public let lastName: Swift.String
  public let secondLastName: Swift.String?
  public let gender: IncdOnboarding.CURPGender
  public let birthdate: Swift.String
  public let birthState: IncdOnboarding.CURPState
}
public enum CURPState : Swift.String, Swift.CaseIterable {
  case bornAbroad
  case aguascalientes
  case bajaCalifornia
  case bajaCaliforniaSur
  case campeche
  case chiapas
  case chihuahua
  case ciudadDeMexico
  case coahuila
  case colima
  case durango
  case guanajuato
  case guerrero
  case hidalgo
  case jalisco
  case mexico
  case michoacan
  case morelos
  case nayarit
  case nuevoLeon
  case oaxaca
  case puebla
  case queretaro
  case quintanaRoo
  case sanLuisPotosi
  case sinaloa
  case sonora
  case tabasco
  case tamaulipas
  case tlaxcala
  case veracruz
  case yucatan
  case zacatecas
  public var stateName: Swift.String {
    get
  }
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [IncdOnboarding.CURPState]
  public static var allCases: [IncdOnboarding.CURPState] {
    get
  }
}
extension NetworkManager {
  public func omniAddCURPV2(data: IncdOnboarding.CURPGenerationData, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniAddCURPV2Response>) -> Swift.Void)
}
public struct IncdNetworkResponse<T> : Swift.Decodable where T : Swift.Decodable {
  public let status: IncdOnboarding.IncdNetworkStatus?
  public let error: IncdOnboarding.IncdNetworkError?
  public let data: T?
  public let rawData: Foundation.Data?
  public init(from decoder: Swift.Decoder) throws
}
public struct IncdNetworkError : Swift.Decodable {
  public let timestamp: Swift.Int?, statusCode: Swift.Int?
  public let error: Swift.String
  public let message: Swift.String?, path: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public enum IncdNetworkStatus : Swift.Int, Swift.Decodable, Swift.CaseIterable {
  case undefined
  case ok
  case requestFailed
  case decodingFailed
  case badResponse
  case missingParameter
  case encodingFailed
  case badURL
  case badRequest
  case unauthorized
  case forbidden
  case notFound
  case methodNotAllowed
  case notAcceptable
  case serverError
  case notImplemented
  case badGateway
  case serviceUnavailable
  case gatewayTimeout
  case versionNotSupported
  case faceCroppingFailed
  case badFaceSize
  case badBlurriness
  case badBrightness
  case badImageSize
  case badImageOrientation
  case badImageCompression
  case userNotFound
  case spoofDetected
  case userAlreadyExists
  case multipleFacesDetected
  case invalidCredentials
  case invalidInterviewCode
  case moduleNotSupported
  case faceNotFound
  case documentNotAligned
  public var isServerCausedError: Swift.Bool {
    get
  }
  public var isClientCausedError: Swift.Bool {
    get
  }
  public var isClientError: Swift.Bool {
    get
  }
  public var isCustomError: Swift.Bool {
    get
  }
  public var isAcceptable: Swift.Bool {
    get
  }
  public var code: Swift.Int {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [IncdOnboarding.IncdNetworkStatus]
  public static var allCases: [IncdOnboarding.IncdNetworkStatus] {
    get
  }
}
public enum SDKMode : Swift.Int {
  case standard
  case captureOnly
  public var localizedName: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum FaceAuthMode {
  case server
  case hybrid
  public static func == (a: IncdOnboarding.FaceAuthMode, b: IncdOnboarding.FaceAuthMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum IncdInitError {
  case invalidInitParams(url: Swift.String?, apiKey: Swift.String?)
  case simulatorDetected
  case testModeEnabled
  public var description: Swift.String {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@frozen public enum IncdError {
  case notInitialized
  case resourcesNotFound
  case simulatorDetected
  case unknown
  public var description: Swift.String {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public static func == (a: IncdOnboarding.IncdError, b: IncdOnboarding.IncdError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@frozen public enum IncdFlowError {
  case error(_: IncdOnboarding.IncdError)
  case moduleNotIncluded
  case permissionsDenied
  case declinedToSignDocument
  case declinedToGiveUserConsent
  case captchaNotVerified(_: Swift.String)
  case videoSelfieNotCompleted(_: Swift.String)
  case sessionAlreadyRunning(_: Swift.String)
  case interrupted
  case userCanceled
  public var description: Swift.String {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@frozen public struct OnboardingSessionResult {
  public var token: Swift.String?
  public var interviewId: Swift.String?
  public var regionCode: Swift.String?
  public var error: IncdOnboarding.IncdError?
  public init(token: Swift.String? = nil, interviewId: Swift.String? = nil, regionCode: Swift.String? = nil, error: IncdOnboarding.IncdError? = nil)
}
public protocol IncdOnboardingDelegate {
  func userCancelledSession()
  func onOnboardingSessionCreated(_ result: IncdOnboarding.OnboardingSessionResult)
  func onAddPhoneNumberCompleted(_ result: IncdOnboarding.PhoneNumberResult)
  func onAddEmailAddressCompleted(_ result: IncdOnboarding.EmailAddressResult)
  func onIdValidationCompleted(_ result: IncdOnboarding.IdValidationResult)
  func onQRScanCompleted(_ result: IncdOnboarding.QRScanResult)
  func onDocumentScanCompleted(_ result: IncdOnboarding.DocumentScanResult)
  func onCreditCardCCVCompleted(_ result: IncdOnboarding.CreditCardCCVResult)
  func onGeolocationCompleted(_ result: IncdOnboarding.GeolocationResult)
  func onSelfieScanCompleted(_ result: IncdOnboarding.SelfieScanResult)
  func onFaceMatchCompleted(_ result: IncdOnboarding.FaceMatchResult)
  func onGovernmentValidationCompleted(_ result: IncdOnboarding.GovernmentValidationResult)
  func onCURPValidationCompleted(_ result: IncdOnboarding.CURPValidationResult)
  func onSignatureCollected(_ result: IncdOnboarding.SignatureFormResult)
  func onUserConsentGiven(_ result: IncdOnboarding.UserConsentResult)
  func onApproveCompleted(_ result: IncdOnboarding.ApprovalResult)
  func onCaptchaCompleted(_ result: IncdOnboarding.CaptchaResult)
  func onVideoConferenceCompleted(_ success: Swift.Bool, _ error: IncdOnboarding.VideoConferenceError?)
  func onQueuePositionChanged(_ newQueuePosition: Swift.Int)
  func onEstimatedWaitingTime(_ waitingTimeInSeconds: Swift.Int)
  func onUserScoreFetched(_ result: IncdOnboarding.UserScore)
  func onOnboardingSectionCompleted(_ flowTag: Swift.String)
  func onVideoSelfieCompleted(_ result: IncdOnboarding.VideoSelfieResult)
  func onSuccess()
  func onError(_ error: IncdOnboarding.IncdFlowError)
}
extension IncdOnboardingDelegate {
  public func userCancelledSession()
  public func onOnboardingSessionCreated(_ result: IncdOnboarding.OnboardingSessionResult)
  public func onAddPhoneNumberCompleted(_ result: IncdOnboarding.PhoneNumberResult)
  public func onAddEmailAddressCompleted(_ result: IncdOnboarding.EmailAddressResult)
  public func onIdValidationCompleted(_ result: IncdOnboarding.IdValidationResult)
  public func onQRScanCompleted(_ result: IncdOnboarding.QRScanResult)
  public func onDocumentScanCompleted(_ result: IncdOnboarding.DocumentScanResult)
  public func onCreditCardCCVCompleted(_ result: IncdOnboarding.CreditCardCCVResult)
  public func onGeolocationCompleted(_ result: IncdOnboarding.GeolocationResult)
  public func onSelfieScanCompleted(_ result: IncdOnboarding.SelfieScanResult)
  public func onFaceMatchCompleted(_ result: IncdOnboarding.FaceMatchResult)
  public func onGovernmentValidationCompleted(_ result: IncdOnboarding.GovernmentValidationResult)
  public func onCURPValidationCompleted(_ result: IncdOnboarding.CURPValidationResult)
  public func onSignatureCollected(_ result: IncdOnboarding.SignatureFormResult)
  public func onUserConsentGiven(_ result: IncdOnboarding.UserConsentResult)
  public func onApproveCompleted(_ result: IncdOnboarding.ApprovalResult)
  public func onUserScoreFetched(_ result: IncdOnboarding.UserScore)
  public func onCaptchaCompleted(_ result: IncdOnboarding.CaptchaResult)
  public func onVideoConferenceCompleted(_ success: Swift.Bool, _ error: IncdOnboarding.VideoConferenceError?)
  public func onVideoSelfieCompleted(_ result: IncdOnboarding.VideoSelfieResult)
  public func onQueuePositionChanged(_ newQueuePosition: Swift.Int)
  public func onEstimatedWaitingTime(_ waitingTimeInSeconds: Swift.Int)
  public func onOnboardingSectionCompleted(_ flowTag: Swift.String)
}
public struct OmniLogin1toNResponse : Swift.Decodable {
  public let customerId: Swift.String?
  public let token: Swift.String?
  public let interviewId: Swift.String?
  public let interviewToken: Swift.String?
  public let transactionId: Swift.String?
  public let spoofAttempt: Swift.Bool?
  public let faceMatch: Swift.Bool?
  public let secondFactor: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniLogin1toN(body: IncdOnboarding.OmniIdentifyBody, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniLogin1toNResponse>) -> Swift.Void)
}
public struct OmniAddVideoSelfieIDResponse : Swift.Decodable {
  public let typeOfId: IncdOnboarding.TypeOfID?
  public let idTypeMatched: Swift.Bool?
  public let faceRecognitionConfidence: Swift.Float?
  public let issueYear: Swift.Int?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniAddVideoSelfieId(imageData: Swift.String, secure: Swift.Bool = false, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniAddVideoSelfieIDResponse>) -> Swift.Void)
}
public class IncdFaceRecognizer {
  public init(withModelName name: Swift.String, forceCPU: Swift.Bool? = nil, useLargeModel: Swift.Bool? = nil)
  public func clearTemplateSet(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func predict(template: Swift.String, completion: @escaping (Swift.Float?) -> Swift.Void)
  public func train(template: Swift.String, templateID: Swift.String, completion: @escaping (Swift.Bool) -> Swift.Void)
  @objc deinit
}
public struct OmniAttachFlowResponse : Swift.Decodable {
  public let flowId: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniAttachFlow(checks: [Swift.String], completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniAttachFlowResponse>) -> Swift.Void)
}
@frozen public struct EmailAddressResult {
  public var email: Swift.String?
  public var error: IncdOnboarding.IncdError?
  public init(email: Swift.String? = nil, error: IncdOnboarding.IncdError? = nil)
}
public protocol IncdOnboardingManagerAPI {
  func initIncdOnboarding(url: Swift.String, apiKey: Swift.String?, loggingEnabled: Swift.Bool, testMode: Swift.Bool, _ completion: ((Swift.Bool?, IncdOnboarding.IncdInitError?) -> ())?)
  func checkOnDemandResourcesAvailablity(completion: @escaping (Swift.Bool) -> Swift.Void)
  func downloadOnDemandResources(showUI: Swift.Bool?, vc: UIKit.UIViewController?, onProgress: ((Swift.Double) -> Swift.Void)?, onCompleted: (() -> Swift.Void)?, onError: ((Swift.Error) -> Swift.Void)?)
  func getRegions(completion: @escaping ([IncdOnboarding.OmniRegion]?, IncdOnboarding.IncdError?) -> Swift.Void)
  func createNewOnboardingSession(config: IncdOnboarding.IncdOnboardingConfiguration, configurationId: Swift.String?, onboardingValidationModules: [IncdOnboarding.OnboardingValidationModule]?, customFields: [Swift.String : Swift.String]?, completion: @escaping (IncdOnboarding.OnboardingSessionResult) -> Swift.Void)
  func startOnboarding(config: IncdOnboarding.IncdOnboardingConfiguration, interviewId: Swift.String?, configurationId: Swift.String?, onboardingValidationModules: [IncdOnboarding.OnboardingValidationModule]?, customFields: [Swift.String : Swift.String]?, delegate: IncdOnboarding.IncdOnboardingDelegate?)
  func setOnboardingSession(config: IncdOnboarding.IncdOnboardingConfiguration, interviewId: Swift.String, onboardingValidationModules: [IncdOnboarding.OnboardingValidationModule]?, completion: @escaping (IncdOnboarding.OnboardingSessionResult) -> Swift.Void)
  func startOnboardingSection(interviewId: Swift.String?, flowConfig: IncdOnboarding.IncdOnboardingFlowConfiguration, delegate: IncdOnboarding.IncdOnboardingDelegate?)
  func dismiss(forceInterrupt: Swift.Bool)
  func forceInterrupt(tryFinishingFlow: Swift.Bool, interviewId: Swift.String?, completion: ((Swift.Bool, IncdOnboarding.IncdError?) -> Swift.Void)?)
  func finishFlow(interviewId: Swift.String?, completion: @escaping (Swift.Bool, IncdOnboarding.IncdError?) -> Swift.Void)
  func startFaceLogin(showTutorials: Swift.Bool?, customerUUID: Swift.String?, lensesCheck: Swift.Bool?, brightnessThreshold: Swift.Float?, completion: @escaping (IncdOnboarding.SelfieScanResult) -> Swift.Void)
  func getUserScore(userScoreFetchMode: IncdOnboarding.UserScoreFetchMode?, interviewId: Swift.String?, completion: @escaping (IncdOnboarding.UserScore) -> ())
}
extension IncdOnboardingManagerAPI {
  public func initIncdOnboarding(url: Swift.String, apiKey: Swift.String?, loggingEnabled: Swift.Bool, testMode: Swift.Bool, _ completion: ((Swift.Bool?, IncdOnboarding.IncdInitError?) -> ())?)
  public func checkOnDemandResourcesAvailablity(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func downloadOnDemandResources(showUI: Swift.Bool?, vc: UIKit.UIViewController?, onProgress: ((Swift.Double) -> Swift.Void)?, onCompleted: (() -> Swift.Void)?, onError: ((Swift.Error) -> Swift.Void)?)
  public func getRegions(completion: @escaping ([IncdOnboarding.OmniRegion]?, IncdOnboarding.IncdError?) -> Swift.Void)
  public func createNewOnboardingSession(config: IncdOnboarding.IncdOnboardingConfiguration, configurationId: Swift.String?, onboardingValidationModules: [IncdOnboarding.OnboardingValidationModule]?, customFields: [Swift.String : Swift.String]?, completion: @escaping (IncdOnboarding.OnboardingSessionResult) -> Swift.Void)
  public func startOnboarding(config: IncdOnboarding.IncdOnboardingConfiguration, interviewId: Swift.String?, configurationId: Swift.String?, onboardingValidationModules: [IncdOnboarding.OnboardingValidationModule]?, customFields: [Swift.String : Swift.String]?, delegate: IncdOnboarding.IncdOnboardingDelegate?)
  public func setOnboardingSession(config: IncdOnboarding.IncdOnboardingConfiguration, interviewId: Swift.String, onboardingValidationModules: [IncdOnboarding.OnboardingValidationModule]?, completion: @escaping (IncdOnboarding.OnboardingSessionResult) -> Swift.Void)
  public func startOnboardingSection(interviewId: Swift.String?, flowConfig: IncdOnboarding.IncdOnboardingFlowConfiguration, delegate: IncdOnboarding.IncdOnboardingDelegate?)
  public func dismiss(forceInterrupt: Swift.Bool)
  public func forceInterrupt(tryFinishingFlow: Swift.Bool, interviewId: Swift.String?, completion: ((Swift.Bool, IncdOnboarding.IncdError?) -> Swift.Void)?)
  public func finishFlow(interviewId: Swift.String?, completion: @escaping (Swift.Bool, IncdOnboarding.IncdError?) -> Swift.Void)
  public func startFaceLogin(showTutorials: Swift.Bool?, customerUUID: Swift.String?, lensesCheck: Swift.Bool?, brightnessThreshold: Swift.Float?, completion: @escaping (IncdOnboarding.SelfieScanResult) -> Swift.Void)
  public func getUserScore(userScoreFetchMode: IncdOnboarding.UserScoreFetchMode?, interviewId: Swift.String?, completion: @escaping (IncdOnboarding.UserScore) -> ())
}
extension IncdOnboardingManager : IncdOnboarding.IncdOnboardingManagerAPI {
  public func initIncdOnboarding(url: Swift.String, apiKey: Swift.String? = nil, loggingEnabled: Swift.Bool = true, testMode: Swift.Bool = false, _ completion: ((Swift.Bool?, IncdOnboarding.IncdInitError?) -> ())? = nil)
  public func checkOnDemandResourcesAvailablity(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func downloadOnDemandResources(showUI: Swift.Bool? = nil, vc: UIKit.UIViewController? = nil, onProgress: ((Swift.Double) -> Swift.Void)? = nil, onCompleted: (() -> Swift.Void)? = nil, onError: ((Swift.Error) -> Swift.Void)? = nil)
  public func getRegions(completion: @escaping ([IncdOnboarding.OmniRegion]?, IncdOnboarding.IncdError?) -> Swift.Void)
  public func createNewOnboardingSession(config: IncdOnboarding.IncdOnboardingConfiguration, configurationId: Swift.String? = nil, onboardingValidationModules: [IncdOnboarding.OnboardingValidationModule]? = nil, customFields: [Swift.String : Swift.String]? = nil, externalId: Swift.String? = nil, completion: @escaping (IncdOnboarding.OnboardingSessionResult) -> Swift.Void)
  public func startOnboarding(config: IncdOnboarding.IncdOnboardingConfiguration, interviewId: Swift.String? = nil, configurationId: Swift.String? = nil, onboardingValidationModules: [IncdOnboarding.OnboardingValidationModule]? = nil, customFields: [Swift.String : Swift.String]? = nil, externalId: Swift.String? = nil, delegate: IncdOnboarding.IncdOnboardingDelegate?)
  public func setOnboardingSession(config: IncdOnboarding.IncdOnboardingConfiguration, interviewId: Swift.String, onboardingValidationModules: [IncdOnboarding.OnboardingValidationModule]? = nil, completion: @escaping (IncdOnboarding.OnboardingSessionResult) -> Swift.Void)
  public func startOnboardingSection(interviewId: Swift.String? = nil, flowConfig: IncdOnboarding.IncdOnboardingFlowConfiguration, delegate: IncdOnboarding.IncdOnboardingDelegate?)
  public func dismiss(forceInterrupt: Swift.Bool = false)
  public func forceInterrupt(tryFinishingFlow: Swift.Bool = true, interviewId: Swift.String? = nil, completion: ((Swift.Bool, IncdOnboarding.IncdError?) -> Swift.Void)? = nil)
  public func finishFlow(interviewId: Swift.String? = nil, completion: @escaping (Swift.Bool, IncdOnboarding.IncdError?) -> Swift.Void)
  public func startFaceLogin(showTutorials: Swift.Bool? = nil, customerUUID: Swift.String? = nil, lensesCheck: Swift.Bool? = nil, brightnessThreshold: Swift.Float? = nil, completion: @escaping (IncdOnboarding.SelfieScanResult) -> Swift.Void)
  public func getUserScore(userScoreFetchMode: IncdOnboarding.UserScoreFetchMode?, interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.UserScore) -> ())
}
extension IncdOnboardingManager {
}
extension IncdOnboardingManager {
  @available(*, deprecated, message: "\n\nAssign the 'vc:' parameter to 'IncdOnboardingManager.shared.presentingViewController' and use startOnboarding(config:configurationId:onboardingValidationModules:customFields:delegate:) instead.")
  public func startOnboarding(vc: UIKit.UIViewController, config: IncdOnboarding.IncdOnboardingConfiguration, configurationId: Swift.String? = nil, onboardingValidationModules: [IncdOnboarding.OnboardingValidationModule]? = nil, customFields: [Swift.String : Swift.String]? = nil, delegate: IncdOnboarding.IncdOnboardingDelegate?)
  @available(*, deprecated, message: "\n\nAssign the 'vc:' parameter to 'IncdOnboardingManager.shared.presentingViewController' and use startOnboardingSection(interviewId:flowConfig:delegate:) instead.")
  public func startOnboardingSection(vc: UIKit.UIViewController, interviewId: Swift.String? = nil, flowConfig: IncdOnboarding.IncdOnboardingFlowConfiguration, delegate: IncdOnboarding.IncdOnboardingDelegate?)
  @available(*, deprecated, message: "\nUse sections API instead and add Intro module via IncdOnboardingFlowConfiguration.addIntro(checks:) method.")
  public func startIntro(checks: [IncdOnboarding.IntroCheck], interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.IntroResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add Phone Number module via IncdOnboardingFlowConfiguration.addPhoneNumber() method.")
  public func startPhoneNumber(interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.PhoneNumberResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add Email Address module via IncdOnboardingFlowConfiguration.addEmail() method.")
  public func startEmailAddress(interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.EmailAddressResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add Id Validation module via IncdOnboardingFlowConfiguration.addIdScan(showTutorials:idType:idCategory:) method.")
  public func startIdValidation(showTutorials: Swift.Bool? = nil, idFrontTutorialTitle: Swift.String? = nil, idType: IncdOnboarding.IDType? = nil, idCategory: IncdOnboarding.IDCategory = .primary, interviewId: Swift.String? = nil, frontShownAsBackCheck: Swift.Bool? = nil, completion: @escaping (IncdOnboarding.IdValidationResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add QR Scan module via IncdOnboardingFlowConfiguration.addQRScan(showTutorials:) method.")
  public func startQrCodeScan(showTutorials: Swift.Bool? = nil, interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.QRScanResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add Document Scan module via IncdOnboardingFlowConfiguration.addDocumentScan(showTutorials:showDocumentProviderOptions:documentType:) method.")
  public func startDocumentValidation(showTutorials: Swift.Bool? = nil, showDocumentProviderOptions: Swift.Bool? = nil, documentType: IncdOnboarding.OmniDocumentType, interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.DocumentScanResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add Credit Card CCV module via IncdOnboardingFlowConfiguration.addCreditCardCCV() method.")
  public func startCreditCardCCV(interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.CreditCardCCVResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add Geolocation module via IncdOnboardingFlowConfiguration.addGeolocation() method.")
  public func startGeolocation(completion: @escaping (IncdOnboarding.GeolocationResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add Selfie Scan module via IncdOnboardingFlowConfiguration.addSelfieScan(showTutorials:lensesCheck:brightnessThreshold:) method.")
  public func startSelfieScan(showTutorials: Swift.Bool? = nil, performLocalLiveness: Swift.Bool? = nil, lensesCheck: Swift.Bool? = nil, brightnessThreshold: Swift.Float? = nil, selfieScanMode: IncdOnboarding.SelfieScanMode? = nil, selfieLoginInfo: IncdOnboarding.SelfieLoginInfo? = nil, interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.SelfieScanResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add Face Match module via IncdOnboardingFlowConfiguration.addFaceMatch(idCategory:) method.")
  public func startFaceMatch(idCategory: IncdOnboarding.IDCategory = .primary, spoofTested: Swift.Bool? = nil, spoofAttempted: Swift.Bool? = nil, imgSelfie: UIKit.UIImage? = nil, imgIdFaceCrop: UIKit.UIImage? = nil, interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.FaceMatchResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add Government Validation module via IncdOnboardingFlowConfiguration.addGovernmentValidation() method.")
  public func startGovernmentValidation(interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.GovernmentValidationResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add CURP Validation module via IncdOnboardingFlowConfiguration.addCURPValidation() method.")
  public func startCURPValidation(interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.CURPValidationResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add Signature module via IncdOnboardingFlowConfiguration.addSignature(title:description:descriptionMaxLines:documents) method.")
  public func startCollectUserSignature(interviewId: Swift.String? = nil, title: Swift.String? = nil, description: Swift.String? = nil, descriptionMaxLines: Swift.Int? = nil, documents: [IncdOnboarding.SignDocument] = [], completion: @escaping (IncdOnboarding.SignatureFormResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add User Score module via IncdOnboardingFlowConfiguration.addUserScore(userScoreFetchMode:) method.")
  public func startUserScore(userScoreFetchMode: IncdOnboarding.UserScoreFetchMode? = .accurate, interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.UserScore) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add Captcha module via IncdOnboardingFlowConfiguration.addCaptcha() method.")
  public func startCaptcha(interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.CaptchaResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add Video Conference module via IncdOnboardingFlowConfiguration.addVideoConference(disableMicOnCallStarted:) method.")
  public func startVideoConference(disableMicOnCallStarted: Swift.Bool? = nil, interviewId: Swift.String? = nil, delegate: IncdOnboarding.IncdOnboardingVideoConferenceDelegate)
  @available(*, deprecated, message: "\n\nUse sections API instead and add Video Selfie module via IncdOnboardingFlowConfiguration.addVideoSelfie(videoSelfieConfiguration:) method.")
  public func startVideoSelfie(videoSelfieConfiguration: IncdOnboarding.VideoSelfieConfiguration, interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.VideoSelfieResult) -> Swift.Void)
  @available(*, deprecated, message: "\n\nUse sections API instead and add Approval module via IncdOnboardingFlowConfiguration.addApproval(forceApproval:) method.")
  public func startApprove(forceApproval: Swift.Bool = false, interviewId: Swift.String? = nil, completion: @escaping (IncdOnboarding.ApprovalResult) -> Swift.Void)
}
extension NetworkManager {
  public func omniAddEmail(email: Swift.String, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public struct SignaturePosition : Swift.Codable {
  public let x: Swift.Int
  public let y: Swift.Int
  public let height: Swift.Int
  public let pageNumber: Swift.Int
  public init(x: Swift.Int, y: Swift.Int, height: Swift.Int, pageNumber: Swift.Int)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension NetworkManager {
  public func omniAttachSignatureToMultiplePDFs(_ contractIDsWithSignaturePositions: [Swift.String : [IncdOnboarding.SignaturePosition]], completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.IncdDefaultResponse>) -> Swift.Void)
}
public enum IncdImageAnalysis {
  case faceBlurriness
  case faceBrightness
  case faceAngle
  case lenses
  public static func == (a: IncdOnboarding.IncdImageAnalysis, b: IncdOnboarding.IncdImageAnalysis) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct IncdFaceAngles {
  public let x: Swift.Float
  public let y: Swift.Float
  public let z: Swift.Float
}
public struct IncdImageAnalysisResult {
  public let brightness: Swift.Float?
  public let blurriness: Swift.Float?
  public let angles: IncdOnboarding.IncdFaceAngles?
  public let hasLenses: Swift.Bool?
}
public class IncdImageAnalyzer {
  public var analysis: [IncdOnboarding.IncdImageAnalysis]
  public init()
  public func blurriness(faceCrop: UIKit.UIImage, completion: @escaping (Swift.Float?) -> Swift.Void)
  public func brightness(faceCrop: UIKit.UIImage, completion: @escaping (Swift.Float?) -> Swift.Void)
  public func faceAngles(allPoints facePoints: [CoreGraphics.CGPoint], frameSize imgSize: CoreGraphics.CGSize, completion: @escaping (IncdOnboarding.IncdFaceAngles?) -> Swift.Void)
  @objc deinit
}
extension IncdOnboardingManager {
  public var incdOnboardingConfigViewController: UIKit.UIViewController {
    get
  }
  public var faceDetectorConfigViewController: UIKit.UIViewController {
    get
  }
  public var showAddressTutorials: Swift.Bool {
    get
    set
  }
  public var showInsuranceTutorials: Swift.Bool {
    get
    set
  }
  public var showSelfieTutorials: Swift.Bool {
    get
    set
  }
  public var selfieMaxRetries: Swift.Int {
    get
    set
  }
  public var selfieTimeout: Swift.Int {
    get
    set
  }
  public var overrideSelfieSettings: Swift.Bool {
    get
    set
  }
  public var showVideoSelfieTutorials: Swift.Bool {
    get
    set
  }
  public var showQRTutorials: Swift.Bool {
    get
    set
  }
  public var showIdTutorials: Swift.Bool {
    get
    set
  }
  public var idMaxRetries: Swift.Int {
    get
    set
  }
  public var overrideIDSettings: Swift.Bool {
    get
    set
  }
  public var idAutoCaptureTimeout: Swift.Int {
    get
    set
  }
  public var idFrontShownAsBackCheck: Swift.Bool {
    get
    set
  }
  public var authorizationCompany: Swift.String? {
    get
    set
  }
  public var videoSelfieLivenessCheck: Swift.Bool {
    get
    set
  }
  public var videoSelfieAskForIdScan: Swift.Bool {
    get
    set
  }
  public var videoSelfieValidateId: Swift.Bool {
    get
    set
  }
  public var videoSelfieAskForProofOfAddress: Swift.Bool {
    get
    set
  }
  public var videoSelfieAskForAuthorization: Swift.Bool {
    get
    set
  }
  public var videoSelfieAskForVoiceConsent: Swift.Bool {
    get
    set
  }
  public var videoSelfieQuestionsCount: Swift.Int {
    get
    set
  }
  public var videoSelfieSelfieMode: IncdOnboarding.VideoSelfieConfiguration.SelfieMode {
    get
    set
  }
  public var showDocumentProviderOptions: Swift.Bool {
    get
    set
  }
  public var forceApproval: Swift.Bool {
    get
    set
  }
  public var waitForTutorials: Swift.Bool {
    get
    set
  }
  public var allowUserToCancel: Swift.Bool {
    get
    set
  }
  public var disableMicOnCallStarted: Swift.Bool {
    get
    set
  }
  public var queue: IncdOnboarding.ConferenceQueue {
    get
    set
  }
  public var regionCode: Swift.String {
    get
    set
  }
  public var sdkMode: IncdOnboarding.SDKMode {
    get
    set
  }
  public var idResultsMode: IncdOnboarding.UserScoreFetchMode {
    get
    set
  }
  public var selfieLocalLiveness: Swift.Bool {
    get
    set
  }
  public func loadDefaultConfiguration()
}
public class IncdMaskDetector {
  public init(withModelName name: Swift.String, forceCPU: Swift.Bool? = nil)
  public func maskDetection(onCroppedFace croppedFace: UIKit.UIImage, completion: @escaping (Swift.Float?) -> Swift.Void)
  public func maskDetection(onCroppedFace croppedFace: UIKit.UIImage) -> Swift.Float?
  @objc deinit
}
public enum IDCaptureMode : Swift.Int {
  case fullIdCapture
  case qrCapture
  public var localizedName: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct OmniIdentifyConfirmResponse : Swift.Decodable {
  public let token: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func omniIdentifyConfirm(verificationCode: Swift.String, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.OmniIdentifyConfirmResponse>) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers public class IncdFaceDetector : ObjectiveC.NSObject {
  weak public var delegate: IncdOnboarding.IncdFDDelegate?
  weak public var previewView: IncdOnboarding.PreviewView?
  public var stopProcessingAfterFirstOKFrame: Swift.Bool
  public var stopProcessingAfterFDonly: Swift.Bool
  public var usesDifferentInput: Swift.Bool
  public var regionOfInterest: CoreGraphics.CGRect
  public var returnEveryCapturedFrame: Swift.Bool
  public var activeResolution: CoreGraphics.CGSize {
    get
  }
  public var isRunning: Swift.Bool {
    get
  }
  public var isReady: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  @objc deinit
  convenience public init(kioskMode: Swift.Bool? = nil)
  public func setup(onPreviewView view: IncdOnboarding.PreviewView?)
  public func start(onPreviewView view: IncdOnboarding.PreviewView? = nil)
  public func stop()
  public func pauseFDProcessing()
  public func resumeFDProcessing()
  public func recalculateRegionOfInterest()
  public func setCustomResolution(_ reso: CoreGraphics.CGSize)
}
public protocol IncdFDDelegate : AnyObject {
  func didDenyPermissions()
  func didStartFrameProcessing()
  func didCaptureFrame(frame: UIKit.UIImage)
  func didProcessFrame(result: IncdOnboarding.IncdFDResult)
  func didDetectFace()
  func didChange(brightness: Swift.Double, exposure: Swift.Double)
  func didConfigureCameraSession(resolutionWidth: Swift.Int, resolutionHeight: Swift.Int, autofocusEnabled: Swift.Bool)
}
extension IncdFDDelegate {
  public func didDenyPermissions()
  public func didStartFrameProcessing()
  public func didCaptureFrame(frame: UIKit.UIImage)
  public func didProcessFrame(result: IncdOnboarding.IncdFDResult)
  public func didDetectFace()
  public func didChange(brightness: Swift.Double, exposure: Swift.Double)
  public func didConfigureCameraSession(resolutionWidth: Swift.Int, resolutionHeight: Swift.Int, autofocusEnabled: Swift.Bool)
}
public struct IncdFDResult {
  public let frame: UIKit.UIImage?
  public let faceCrop: UIKit.UIImage?
  public let state: IncdOnboarding.IncdFDState
  public let value: Any
  public let faceBrightness: Swift.Float?
  public let faceBlurriness: Swift.Float?
}
public enum IncdFDState : Swift.Int {
  case noFaceDetected
  case multipleFacesFound
  case adjustingCamera
  case faceOutsideCircle
  case badFaceQuality
  case tooClose
  case tooFar
  case tooBlurry
  case tooDark
  case eyesClosed
  case badAngleX
  case badAngleY
  case badAngleZ
  case hasLenses
  case hasFaceMask
  case spoofDetected
  case timeout
  case unknownError
  case ok
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct Queue<T> where T : Swift.Equatable {
  public init(capacity: Swift.Int)
  public let capacity: Swift.Int
  public mutating func enqueue(element: T)
  public mutating func dequeue() -> T?
  public func containsSameItems() -> Swift.Bool
}
@frozen public struct CreditCardCCVResult {
  public var ccv: Swift.String?
  public var error: IncdOnboarding.IncdError?
  public init(ccv: Swift.String? = nil, error: IncdOnboarding.IncdError? = nil)
}
@_hasMissingDesignatedInitializers public class IncdIDDetectionResult {
  public var cls: Swift.Float
  public var attrs: [Swift.Float]?
  public var quad: [CoreGraphics.CGPoint]?
  @objc deinit
}
public class IncdIDDetector {
  public init(withModelName name: Swift.String, forceCPU: Swift.Bool? = nil)
  public func idDetection(onFrame frame: UIKit.UIImage, completion: @escaping (IncdOnboarding.IncdIDDetectionResult?) -> Swift.Void)
  public func idDetection(onFrame frame: UIKit.UIImage) -> IncdOnboarding.IncdIDDetectionResult?
  @objc deinit
}
extension IncdFaceDetector : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
public class SignDocument {
  final public let title: Swift.String
  final public let fileURL: Foundation.URL
  final public let signaturePositions: [IncdOnboarding.SignaturePosition]
  public init(title: Swift.String, fileURL: Foundation.URL, signaturePositions: [IncdOnboarding.SignaturePosition])
  @objc deinit
}
extension IncdFaceDetector {
  public func performFaceDetection(_ imageBuffer: CoreVideo.CVImageBuffer, _ currentExifOrientation: ImageIO.CGImagePropertyOrientation)
}
public struct RawDataParameterEncoder : IncdOnboarding.ParameterEncoder {
  public func encode(urlRequest: inout Foundation.URLRequest, with parameters: IncdOnboarding.Parameters) throws
}
public protocol IncdNumericKeypadDelegate : AnyObject {
  func didTapOk(_ keypad: IncdOnboarding.IncdNumericKeypad)
  func didTapBackspace(_ keypad: IncdOnboarding.IncdNumericKeypad)
  func didTapNumber(_ number: Swift.String, keypad: IncdOnboarding.IncdNumericKeypad)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IncdNumericKeypad : UIKit.UIControl {
  public var keypadFont: UIKit.UIFont
  public var okKeyFont: UIKit.UIFont
  public var keyColor: UIKit.UIColor
  public var keyTitleColor: UIKit.UIColor
  public var keyHighlightedColor: UIKit.UIColor
  public var keyHighlightedTitleColor: UIKit.UIColor
  public var okKeyDisabledColor: UIKit.UIColor
  public var okKeyDisabledTitleColor: UIKit.UIColor
  public var okKeyColor: UIKit.UIColor
  public var okKeyTitleColor: UIKit.UIColor
  public var backspaceImage: UIKit.UIImage?
  public var backspaceHighlightedImage: UIKit.UIImage?
  weak public var delegate: IncdOnboarding.IncdNumericKeypadDelegate?
  public func refresh()
  public func enableOkButton(_ isEnabled: Swift.Bool = true)
  @objc deinit
}
@objc open class RPCircularProgress : UIKit.UIView {
  public typealias CompletionBlock = () -> Swift.Void
  open var trackTintColor: UIKit.UIColor {
    get
    set
  }
  open var progressTintColor: UIKit.UIColor {
    get
    set
  }
  open var innerTintColor: UIKit.UIColor? {
    get
    set
  }
  open var roundedCorners: Swift.Bool {
    get
    set
  }
  open var thicknessRatio: CoreGraphics.CGFloat {
    get
    set
  }
  open var clockwiseProgress: Swift.Bool {
    get
    set
  }
  open var timingFunction: QuartzCore.CAMediaTimingFunction
  open var progress: CoreGraphics.CGFloat {
    get
  }
  open var indeterminateProgress: CoreGraphics.CGFloat {
    get
    set
  }
  open var indeterminateDuration: CoreFoundation.CFTimeInterval
  @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc required dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func didMoveToWindow()
  open func enableIndeterminate(_ enabled: Swift.Bool = true, completion: IncdOnboarding.RPCircularProgress.CompletionBlock? = nil)
  open func updateProgress(_ progress: CoreGraphics.CGFloat, animated: Swift.Bool = true, initialDelay: CoreFoundation.CFTimeInterval = 0, duration: CoreFoundation.CFTimeInterval? = nil, completion: IncdOnboarding.RPCircularProgress.CompletionBlock? = nil)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension RPCircularProgress : QuartzCore.CAAnimationDelegate {
  @objc dynamic public func animationDidStop(_ anim: QuartzCore.CAAnimation, finished flag: Swift.Bool)
}
public enum IndicatorType {
  case normal
  case large
  case custom
  public static func == (a: IncdOnboarding.IndicatorType, b: IncdOnboarding.IndicatorType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class IncdActivityIndicator : UIKit.UIView {
  open var type: IncdOnboarding.IndicatorType {
    get
  }
  open var size: CoreGraphics.CGSize {
    get
  }
  open var isAnimating: Swift.Bool {
    get
  }
  open var showPadlock: Swift.Bool {
    get
  }
  open var hidesWhenStopped: Swift.Bool
  required public init(type: IncdOnboarding.IndicatorType = .normal, hidesWhenStopped: Swift.Bool = false, showPadlock: Swift.Bool = true)
  @objc required override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open func startAnimating()
  open func stopAnimating()
  open func successAnimation()
  open func failureAnimation()
  @objc deinit
}
extension UIView {
  public func pinEdgesToSuperview()
  public func prepareForPopInAnimation()
  public func animatePopIn(withDuration duration: Foundation.TimeInterval = 0.3, damping: CoreGraphics.CGFloat = 0.8, initialSpringVelocity: CoreGraphics.CGFloat = 4, _ completion: (() -> Swift.Void)? = nil)
  public func animateVibrationForSuccess(_ completion: (() -> Swift.Void)?)
  public func animateVibrationForFailure(_ completion: (() -> Swift.Void)?)
  public func roundCorners(_ corners: QuartzCore.CACornerMask, radius: CoreGraphics.CGFloat)
}
extension CALayer {
  public func prepareForPopInAnimation()
}
extension UIColor {
  @nonobjc public class var incdAccent: UIKit.UIColor {
    get
  }
  @nonobjc public class var incdPrimary: UIKit.UIColor {
    get
  }
  @nonobjc public class var incdSecondary: UIKit.UIColor {
    get
  }
  @nonobjc public class var incdBackground: UIKit.UIColor {
    get
  }
  @nonobjc public class var incdSecondaryBackground: UIKit.UIColor {
    get
  }
  @nonobjc public class var incdShadow: UIKit.UIColor {
    get
  }
  @nonobjc public class var incdInfo: UIKit.UIColor {
    get
  }
  @nonobjc public class var incdDisabled: UIKit.UIColor {
    get
  }
  @nonobjc public class var incdPlaceholder: UIKit.UIColor {
    get
  }
  @nonobjc public class var incdSuccess: UIKit.UIColor {
    get
  }
  @nonobjc public class var incdError: UIKit.UIColor {
    get
  }
  @nonobjc public class var incdWarning: UIKit.UIColor {
    get
  }
}
extension UIImage {
}
extension UIFont {
  public class var incdHeadline2: UIKit.UIFont {
    get
  }
  public class var incdHeadline3: UIKit.UIFont {
    get
  }
  public class var incdHeadline3Bold: UIKit.UIFont {
    get
  }
  public class var incdHeadline4: UIKit.UIFont {
    get
  }
  public class var incdBody: UIKit.UIFont {
    get
  }
  public class var incdBoldedBody: UIKit.UIFont {
    get
  }
  public class var incdInfo: UIKit.UIFont {
    get
  }
  public class var incdBigSpecial: UIKit.UIFont {
    get
  }
  public class var incdBigButton: UIKit.UIFont {
    get
  }
  public class var incdMediumButton: UIKit.UIFont {
    get
  }
  public class var incdBigInput: UIKit.UIFont {
    get
  }
  public class var incdMediumInput: UIKit.UIFont {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IncdCameraView : UIKit.UIView {
  @objc @IBOutlet weak public var cameraView: IncdOnboarding.PreviewView!
  public func setup(cameraHeight: CoreGraphics.CGFloat? = nil)
  public func showCamera(animated: Swift.Bool? = true)
  public func showFeedback(_ message: Swift.String? = nil, _ isError: Swift.Bool?)
  public func displayStatus(_ message: Swift.String? = nil, _ isError: Swift.Bool?)
  public func cameraHidden() -> Swift.Bool
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class PreviewView : UIKit.UIView {
  public var cropPosition: CoreGraphics.CGPoint
  public var cropDiameter: CoreGraphics.CGFloat?
  public var clippingRect: CoreGraphics.CGRect
  public var videoPreviewLayer: AVFoundation.AVCaptureVideoPreviewLayer {
    get
  }
  public var session: AVFoundation.AVCaptureSession? {
    get
    set
  }
  @objc override dynamic public class var layerClass: Swift.AnyClass {
    @objc get
  }
  public func updateCrop() -> CoreGraphics.CGRect
  public func drawFaceWithLandmarks(face: Vision.VNFaceObservation)
  public func clearDrawing()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension IncdCameraView {
  public func animateSnapshotAndZoomIn(snapshot: UIKit.UIImage?, snapshotDuration: Foundation.TimeInterval)
  public func beginGetReadyAnimation()
  public func endGetReadyAnimation()
  public func animateFaceDetected()
  public func animateWinState(_ completion: (() -> Swift.Void)?)
  public func animateFailState(error: Swift.String? = nil, duration: Swift.Int = 1000, _ completion: (() -> Swift.Void)? = nil)
  public func animateCameraReveal(duration: CoreFoundation.CFTimeInterval)
  public func animateCameraHiding(_ completion: (() -> Swift.Void)? = nil)
}
public struct MockInitResponse : Swift.Decodable {
  public let token: Swift.String?
  public let enrolled: Swift.Bool?
  public let template: Swift.String?
  public let name: Swift.String?
  public let uuid: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func helloMockInit(uuid: Swift.String, returnTemplate: Swift.Bool = false, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.MockInitResponse>) -> Swift.Void)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IncdCameraViewLandscape : IncdOnboarding.IncdCameraView {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class IncdCheckbox : UIKit.UIButton {
  @objc deinit
}
public struct HelloLoginResponse : Swift.Decodable {
  public let confidence: Swift.Float
  public init(from decoder: Swift.Decoder) throws
}
extension NetworkManager {
  public func helloLogin(croppedImageData: Swift.String, imageData: Swift.String? = nil, template: Swift.String? = nil, secure: Swift.Bool = false, completion: @escaping (IncdOnboarding.IncdNetworkResponse<IncdOnboarding.HelloLoginResponse>) -> Swift.Void)
}
extension IncdOnboarding.HeaderFooterType : Swift.Equatable {}
extension IncdOnboarding.HeaderFooterType : Swift.Hashable {}
extension IncdOnboarding.SwipeAction.Style : Swift.Equatable {}
extension IncdOnboarding.SwipeAction.Style : Swift.Hashable {}
extension IncdOnboarding.Direction : Swift.Equatable {}
extension IncdOnboarding.Direction : Swift.Hashable {}
extension IncdOnboarding.RegExprPattern : Swift.Equatable {}
extension IncdOnboarding.RegExprPattern : Swift.Hashable {}
extension IncdOnboarding.RegExprPattern : Swift.RawRepresentable {}
extension IncdOnboarding.TextAreaMode : Swift.Equatable {}
extension IncdOnboarding.TextAreaMode : Swift.Hashable {}
extension IncdOnboarding.ParameterEncoding : Swift.Equatable {}
extension IncdOnboarding.ParameterEncoding : Swift.Hashable {}
extension IncdOnboarding.EncodingError : Swift.Equatable {}
extension IncdOnboarding.EncodingError : Swift.Hashable {}
extension IncdOnboarding.EncodingError : Swift.RawRepresentable {}
extension IncdOnboarding.IncdAPIError : Swift.Equatable {}
extension IncdOnboarding.IncdAPIError : Swift.Hashable {}
extension IncdOnboarding.IncdAPIError : Swift.RawRepresentable {}
extension IncdOnboarding.HTTPMethod : Swift.Equatable {}
extension IncdOnboarding.HTTPMethod : Swift.Hashable {}
extension IncdOnboarding.HTTPMethod : Swift.RawRepresentable {}
extension IncdOnboarding.HealthIDEventType : Swift.Equatable {}
extension IncdOnboarding.HealthIDEventType : Swift.Hashable {}
extension IncdOnboarding.HealthIDEventType : Swift.RawRepresentable {}
extension IncdOnboarding.RiskLevel : Swift.Equatable {}
extension IncdOnboarding.RiskLevel : Swift.Hashable {}
extension IncdOnboarding.RiskLevel : Swift.RawRepresentable {}
extension IncdOnboarding.HealthEndpointStatus : Swift.Equatable {}
extension IncdOnboarding.HealthEndpointStatus : Swift.Hashable {}
extension IncdOnboarding.HealthEndpointStatus : Swift.RawRepresentable {}
extension IncdOnboarding.StatementInstitution : Swift.Equatable {}
extension IncdOnboarding.StatementInstitution : Swift.Hashable {}
extension IncdOnboarding.StatementInstitution : Swift.RawRepresentable {}
extension IncdOnboarding.OmniAddFaceType : Swift.Equatable {}
extension IncdOnboarding.OmniAddFaceType : Swift.Hashable {}
extension IncdOnboarding.OmniAddFaceType : Swift.RawRepresentable {}
extension IncdOnboarding.OmniFlowModuleType : Swift.Equatable {}
extension IncdOnboarding.OmniFlowModuleType : Swift.Hashable {}
extension IncdOnboarding.OmniFlowModuleType : Swift.RawRepresentable {}
extension IncdOnboarding.OmniLivenessSeverity : Swift.Equatable {}
extension IncdOnboarding.OmniLivenessSeverity : Swift.Hashable {}
extension IncdOnboarding.OmniLivenessSeverity : Swift.RawRepresentable {}
extension IncdOnboarding.AutoApproveLevel : Swift.Equatable {}
extension IncdOnboarding.AutoApproveLevel : Swift.Hashable {}
extension IncdOnboarding.AutoApproveLevel : Swift.RawRepresentable {}
extension IncdOnboarding.OmniDocumentType : Swift.Equatable {}
extension IncdOnboarding.OmniDocumentType : Swift.Hashable {}
extension IncdOnboarding.OmniDocumentType : Swift.RawRepresentable {}
extension IncdOnboarding.GovernmentValidationStatus : Swift.Equatable {}
extension IncdOnboarding.GovernmentValidationStatus : Swift.Hashable {}
extension IncdOnboarding.GovernmentValidationStatus : Swift.RawRepresentable {}
extension IncdOnboarding.OmniConfigurationModuleType : Swift.Equatable {}
extension IncdOnboarding.OmniConfigurationModuleType : Swift.Hashable {}
extension IncdOnboarding.OmniConfigurationModuleType : Swift.RawRepresentable {}
extension IncdOnboarding.OmniConfigurationPlatform : Swift.Equatable {}
extension IncdOnboarding.OmniConfigurationPlatform : Swift.Hashable {}
extension IncdOnboarding.OmniConfigurationPlatform : Swift.RawRepresentable {}
extension IncdOnboarding.OmniGetImagesType : Swift.Equatable {}
extension IncdOnboarding.OmniGetImagesType : Swift.Hashable {}
extension IncdOnboarding.OmniGetImagesType : Swift.RawRepresentable {}
extension IncdOnboarding.Status : Swift.Equatable {}
extension IncdOnboarding.Status : Swift.Hashable {}
extension IncdOnboarding.Status : Swift.RawRepresentable {}
extension IncdOnboarding.TypeOfID : Swift.Equatable {}
extension IncdOnboarding.TypeOfID : Swift.Hashable {}
extension IncdOnboarding.TypeOfID : Swift.RawRepresentable {}
extension IncdOnboarding.IDCategory : Swift.Equatable {}
extension IncdOnboarding.IDCategory : Swift.Hashable {}
extension IncdOnboarding.IDCategory : Swift.RawRepresentable {}
extension IncdOnboarding.IDType : Swift.Equatable {}
extension IncdOnboarding.IDType : Swift.Hashable {}
extension IncdOnboarding.ConferenceQueue : Swift.Equatable {}
extension IncdOnboarding.ConferenceQueue : Swift.Hashable {}
extension IncdOnboarding.ConferenceQueue : Swift.RawRepresentable {}
extension IncdOnboarding.OnboardingStatus : Swift.Equatable {}
extension IncdOnboarding.OnboardingStatus : Swift.Hashable {}
extension IncdOnboarding.OnboardingStatus : Swift.RawRepresentable {}
extension IncdOnboarding.ApproveComponent : Swift.Equatable {}
extension IncdOnboarding.ApproveComponent : Swift.Hashable {}
extension IncdOnboarding.ApproveComponent : Swift.RawRepresentable {}
extension IncdOnboarding.Event : Swift.Equatable {}
extension IncdOnboarding.Event : Swift.Hashable {}
extension IncdOnboarding.Event : Swift.RawRepresentable {}
extension IncdOnboarding.IncdRegion : Swift.Equatable {}
extension IncdOnboarding.IncdRegion : Swift.Hashable {}
extension IncdOnboarding.IncdRegion : Swift.RawRepresentable {}
extension IncdOnboarding.OnboardingValidationModule : Swift.Equatable {}
extension IncdOnboarding.OnboardingValidationModule : Swift.Hashable {}
extension IncdOnboarding.SelfieScanMode : Swift.Equatable {}
extension IncdOnboarding.SelfieScanMode : Swift.Hashable {}
extension IncdOnboarding.SelfieScanMode : Swift.RawRepresentable {}
extension IncdOnboarding.IntroCheck : Swift.Equatable {}
extension IncdOnboarding.IntroCheck : Swift.Hashable {}
extension IncdOnboarding.IntroCheck : Swift.RawRepresentable {}
extension IncdOnboarding.IncdIdValidationStatus : Swift.Equatable {}
extension IncdOnboarding.IncdIdValidationStatus : Swift.Hashable {}
extension IncdOnboarding.IncdIdValidationStatus : Swift.RawRepresentable {}
extension IncdOnboarding.VideoSelfieConfiguration.SelfieMode : Swift.Equatable {}
extension IncdOnboarding.VideoSelfieConfiguration.SelfieMode : Swift.Hashable {}
extension IncdOnboarding.VideoSelfieConfiguration.SelfieMode : Swift.RawRepresentable {}
extension IncdOnboarding.UserScoreFetchMode : Swift.Equatable {}
extension IncdOnboarding.UserScoreFetchMode : Swift.Hashable {}
extension IncdOnboarding.UserScoreFetchMode : Swift.RawRepresentable {}
extension IncdOnboarding.CURPGender : Swift.Equatable {}
extension IncdOnboarding.CURPGender : Swift.Hashable {}
extension IncdOnboarding.CURPGender : Swift.RawRepresentable {}
extension IncdOnboarding.CURPState : Swift.Equatable {}
extension IncdOnboarding.CURPState : Swift.Hashable {}
extension IncdOnboarding.CURPState : Swift.RawRepresentable {}
extension IncdOnboarding.IncdNetworkStatus : Swift.Equatable {}
extension IncdOnboarding.IncdNetworkStatus : Swift.Hashable {}
extension IncdOnboarding.IncdNetworkStatus : Swift.RawRepresentable {}
extension IncdOnboarding.SDKMode : Swift.Equatable {}
extension IncdOnboarding.SDKMode : Swift.Hashable {}
extension IncdOnboarding.SDKMode : Swift.RawRepresentable {}
extension IncdOnboarding.FaceAuthMode : Swift.Equatable {}
extension IncdOnboarding.FaceAuthMode : Swift.Hashable {}
extension IncdOnboarding.IncdError : Swift.Equatable {}
extension IncdOnboarding.IncdError : Swift.Hashable {}
extension IncdOnboarding.IncdImageAnalysis : Swift.Equatable {}
extension IncdOnboarding.IncdImageAnalysis : Swift.Hashable {}
extension IncdOnboarding.IDCaptureMode : Swift.Equatable {}
extension IncdOnboarding.IDCaptureMode : Swift.Hashable {}
extension IncdOnboarding.IDCaptureMode : Swift.RawRepresentable {}
extension IncdOnboarding.IncdFDState : Swift.Equatable {}
extension IncdOnboarding.IncdFDState : Swift.Hashable {}
extension IncdOnboarding.IncdFDState : Swift.RawRepresentable {}
extension IncdOnboarding.IndicatorType : Swift.Equatable {}
extension IncdOnboarding.IndicatorType : Swift.Hashable {}
