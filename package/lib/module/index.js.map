{"version":3,"sources":["index.tsx"],"names":["NativeModules","NativeEventEmitter","modulesConfigDefaultConfigEnhancement","resultsConversions","IncodeSdk","stepCompleteListeners","stepUpdateListeners","errorListeners","addListener","toListeners","stepAndListener","module","listener","undefined","ofModule","idx","indexOf","slice","emitter","e","forListener","forEach","fixModuleConfigDefaultValues","config","map","moduleConfig","enhanced","enabled","initialize","testMode","onSessionCreated","subscription","remove","onStepCompleted","onStepError","onStepUpdated","startOnboarding","startOnboardingSection","startFaceLogin","getUserScore","mode"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,kBAAxB,QAAkD,cAAlD;AAqZA,SACEC,qCADF,EAEEC,kBAFF,QAGO,SAHP;;AA4DA,MAAMC,SAAS,GAAG,CAAC,MAAM;AACvB,QAAMC,qBAEL,GAAG,EAFJ;AAIA,QAAMC,mBAEL,GAAG,EAFJ;AAIA,QAAMC,cAEL,GAAG,EAFJ;;AAIA,QAAMC,WAAW,GAAG,CAClBC,WADkB,EAElBC,eAFkB,KAMf;AACH,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAuBF,eAA7B;;AACA,QAAID,WAAW,CAACE,MAAD,CAAX,KAAwBE,SAA5B,EAAuC;AACrCJ,MAAAA,WAAW,CAACE,MAAD,CAAX,GAAsB,EAAtB;AACD;;AAEDF,IAAAA,WAAW,CAACE,MAAD,CAAX,GAAsB,CAAC,GAAGF,WAAW,CAACE,MAAD,CAAf,EAAyBC,QAAzB,CAAtB;AACA,WAAO,MAAM;AACX,YAAME,QAAQ,GAAGL,WAAW,CAACE,MAAD,CAA5B;AACA,YAAMI,GAAG,GAAGD,QAAQ,CAACE,OAAT,CAAiBJ,QAAjB,CAAZ;;AACA,UAAIG,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd;AACD,OALU,CAMX;;;AACAN,MAAAA,WAAW,CAACE,MAAD,CAAX,GAAsB,CACpB,GAAGG,QAAQ,CAACG,KAAT,CAAe,CAAf,EAAkBF,GAAlB,CADiB,EAEpB,GAAGD,QAAQ,CAACG,KAAT,CAAeF,GAAG,GAAG,CAArB,CAFiB,CAAtB;AAID,KAXD;AAYD,GAzBD;;AA2BA,QAAMG,OAAO,GAAG,IAAIjB,kBAAJ,CAAuBD,aAAa,CAACI,SAArC,CAAhB,CAxCuB,CA0CvB;;AACAc,EAAAA,OAAO,CAACV,WAAR,CAAoB,2BAApB,EAAkDW,CAAD,IAA2B;AAC1E,UAAML,QAAQ,GAAGT,qBAAqB,CAACc,CAAC,CAACR,MAAH,CAAtC;AAEA,UAAMS,WAAW,GAAGjB,kBAAkB,CAACgB,CAAD,CAAtC;;AAEA,QAAIL,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACO,OAAT,CAAkBT,QAAD,IACfA,QAAQ,CAACQ,WAAD,CADV;AAGD;AACF,GAVD,EA3CuB,CAuDvB;;AACAF,EAAAA,OAAO,CAACV,WAAR,CAAoB,uBAApB,EAA8CW,CAAD,IAAuB;AAClE,UAAML,QAAQ,GAAGP,cAAc,CAACY,CAAC,CAACR,MAAH,CAA/B;;AACA,QAAIG,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACO,OAAT,CAAkBT,QAAD,IAA2CA,QAAQ,CAACO,CAAD,CAApE;AACD;AACF,GALD,EAxDuB,CA+DvB;;AACAD,EAAAA,OAAO,CAACV,WAAR,CAAoB,wBAApB,EAA+CW,CAAD,IAAyB;AACrE,UAAML,QAAQ,GAAGR,mBAAmB,CAACa,CAAC,CAACR,MAAH,CAApC;;AACA,QAAIG,QAAJ,EAAc;AACZA,MAAAA,QAAQ,CAACO,OAAT,CAAkBT,QAAD,IACfA,QAAQ,CAACO,CAAD,CADV;AAGD;AACF,GAPD;;AASA,QAAMG,4BAA4B,GAChCC,MADmC,KAEb,EACtB,GAAGA,MADmB;AAEtBA,IAAAA,MAAM,EAAEA,MAAM,CAACA,MAAP,CAAcC,GAAd,CAAmBC,YAAD,IAAkB;AAC1C,YAAMC,QAAQ,GAAG,EACf,GAAGD,YADY;AAEfE,QAAAA,OAAO,EACLF,YAAY,CAACE,OAAb,KAAyBd,SAAzB,GAAqC,IAArC,GAA4CY,YAAY,CAACE;AAH5C,OAAjB;AAMA,aAAOzB,qCAAqC,CAACwB,QAAD,CAA5C;AACD,KARO;AAFc,GAFa,CAArC;;AAeA,SAAO,EACL,GAAG1B,aAAa,CAACI,SADZ;AAELwB,IAAAA,UAAU,EAAGL,MAAD,IAAmC;AAC7C,aAAOvB,aAAa,CAACI,SAAd,CAAwBwB,UAAxB,CACLL,MAAM,CAACM,QAAP,KAAoBhB,SAApB,GAAgC;AAAEgB,QAAAA,QAAQ,EAAE;AAAZ,OAAhC,GAAsDN,MADjD,CAAP;AAGD,KANI;AAQLO,IAAAA,gBAAgB,EAAGlB,QAAD,IAAiD;AACjE,YAAMmB,YAAY,GAAGb,OAAO,CAACV,WAAR,CACnB,4BADmB,EAEnBI,QAFmB,CAArB;AAIA,aAAOmB,YAAY,CAACC,MAApB;AACD,KAdI;AAgBLC,IAAAA,eAAe,EACbvB,eADe,IAEW;AAC1B,aAAOF,WAAW,CAACH,qBAAD,EAAwBK,eAAxB,CAAlB;AACD,KApBI;AAsBLwB,IAAAA,WAAW,EACTxB,eADW,IAEe;AAC1B,aAAOF,WAAW,CAACD,cAAD,EAAiBG,eAAjB,CAAlB;AACD,KA1BI;AA4BLyB,IAAAA,aAAa,EACXzB,eADa,IAEa;AAC1B,aAAOF,WAAW,CAACF,mBAAD,EAAsBI,eAAtB,CAAlB;AACD,KAhCI;AAkCL0B,IAAAA,eAAe,EACbb,MADe,IAEiB;AAChC,aAAOvB,aAAa,CAACI,SAAd,CAAwBgC,eAAxB,CACLd,4BAA4B,CAACC,MAAD,CADvB,CAAP;AAGD,KAxCI;AAyCLc,IAAAA,sBAAsB,EACpBd,MADsB,IAEU;AAChC,aAAOvB,aAAa,CAACI,SAAd,CAAwBiC,sBAAxB,CACLf,4BAA4B,CAACC,MAAD,CADvB,CAAP;AAGD,KA/CI;AAgDLe,IAAAA,cAAc,EAAGf,MAAD,IAIgB;AAC9B,aAAOvB,aAAa,CAACI,SAAd,CAAwBkC,cAAxB,CAAuCf,MAAvC,CAAP;AACD,KAtDI;AAuDLgB,IAAAA,YAAY,EAAE,YAET;AAAA,UADHhB,MACG,uEADsC;AAAEiB,QAAAA,IAAI,EAAE;AAAR,OACtC;AACH,aAAOxC,aAAa,CAACI,SAAd,CAAwBmC,YAAxB,CAAqChB,MAArC,CAAP;AACD;AA3DI,GAAP;AA6DD,CArJiB,GAAlB;;AAuJA,eAAenB,SAAf","sourcesContent":["import { NativeModules, NativeEventEmitter } from 'react-native';\n\ntype ModuleEnabled = {\n  /**\n   * Explicitly enable or disable this module in the onboarding process.\n   * Default: true\n   */\n  enabled?: boolean;\n};\n\ntype Module =\n  | 'Phone'\n  | 'DocumentScan'\n  | 'Geolocation'\n  | 'Signature'\n  | 'VideoSelfie'\n  | 'IdScan'\n  | 'Conference'\n  | 'SelfieScan'\n  | 'FaceMatch'\n  | 'QrScan'\n  | 'Captcha'\n  | 'Approve'\n  | 'UserScore'\n  | 'GovernmentValidation'\n  | 'UserConsent';\n\nexport type IncodeModuleConfig =\n  | { module: 'Phone' }\n  | {\n      module: 'DocumentScan';\n      /** defaults to `false` */\n      showTutorial?: boolean;\n      /** defaults to `true` */\n      showDocumentProviderScreen?: boolean;\n    }\n  | { module: 'Geolocation' }\n  | { module: 'Signature' }\n  | {\n      module: 'VideoSelfie';\n\n      /** default: `true` */\n      showTutorial?: boolean;\n      /** default: 'selfieMatch' */\n      selfieScanMode?: 'selfieMatch' | 'faceMatch';\n      /** default: 'false' */\n      selfieLivenessCheck?: boolean;\n      /** default: 'true' */\n      showIdScan?: boolean;\n      /** default: 'true' */\n      showDocumentScan?: boolean;\n      /** default: 'true' */\n      showVoiceConsent?: boolean;\n      /** default: 3 */\n      voiceConsentQuestionsCount?: number;\n    }\n  | {\n      module: 'IdScan';\n      /**\n       * defaults to `true`\n       */\n      showTutorial?: boolean;\n      /** optional. If omitted, the app will display a chooser to the user. */\n      idType?: 'id' | 'passport';\n    }\n  | {\n      module: 'Conference';\n      /**\n       * Defaults to `true`\n       */\n      disableMicOnStart?: boolean;\n    }\n  | {\n      module: 'SelfieScan';\n      /**\n       * Defaults to `true`\n       */\n      showTutorial?: boolean;\n    }\n  | { module: 'FaceMatch' }\n  | { module: 'QrScan' }\n  | { module: 'Captcha' }\n  | {\n      module: 'Approve';\n      /** default: `false` */\n      forceApproval?: boolean;\n    }\n  | {\n      module: 'UserScore';\n      /** default: `accurate` */\n      mode?: 'accurate' | 'fast';\n    }\n  | {\n      module: 'GovernmentValidation';\n    }\n  | {\n      module: 'UserConsent';\n      title: string;\n      content: string;\n    };\n\nexport type OnboardingConfig = {\n  config: (IncodeModuleConfig & ModuleEnabled)[];\n};\n\ntype ResultErrorCodes = 'error' | 'userCancelled' | 'emulatorDetected';\ntype ResultCodes = 'success' | ResultErrorCodes;\n\ntype Address = {\n  city: string;\n  colony: string;\n  postalCode: string;\n  street: string;\n  state: string;\n};\n\ntype IdScanOcrData = any;\n\nexport type OnboardingResponse = {\n  status: 'success' | 'userCancelled';\n};\n\n/**\n * After 3rd failure of taking a shot of the ID\n */\ntype IdValidationFailure =\n  | 'errorClassification'\n  | 'noFacesFound'\n  /** not in android */\n  | 'errorCropQuality'\n  | 'errorGlare'\n  | 'errorReadability'\n  | 'errorSharpness'\n  | 'errorTypeMismatch'\n  /** android only */\n  | 'userCancelled'\n  | 'unknownError'\n  | 'errorClassification'\n  | 'shadow'\n  | 'errorAddress'\n  | 'errorPassportClassification'\n  | 'errorReadability';\n\ntype IdValidationStatus = IdValidationFailure | 'ok';\n\ninterface PhoneStepCompleteEvent {\n  module: 'Phone';\n  result: { phone: string; resultCode: ResultCodes };\n}\n\n//TODO: not really\nexport interface DocumentScanCompleteEvent {\n  module: 'DocumentScan';\n  result: {\n    status: 'error' | 'invalidSession' | 'success' | 'userCancelled';\n    address: string;\n    image: IncdImage;\n    insuranceCard: {\n      copayEr: string;\n      copayOv: string;\n      member: string;\n      memberId: string;\n      provider: string;\n      rxBin: string;\n      rxPcn: string;\n    };\n  };\n}\n\nexport interface GeolocationCompleteEvent {\n  module: 'Geolocation';\n  result: Address;\n}\n\nexport interface SignatureCompleteEvent {\n  module: 'Signature';\n  result: { status: 'success' };\n}\nexport interface VideoSelfieCompleteEvent {\n  module: 'VideoSelfie';\n  result: {\n    // @TODO: define this\n  };\n}\n\nexport interface QrScanCompleteEvent {\n  module: 'QrScan';\n  result: {\n    idCic: string;\n  };\n}\n\nexport interface IdScanCompleteEvent {\n  module: 'IdScan';\n  result: {\n    /**\n     * Not present in case `front.status` or `back.status` is non-`ok`\n     */\n    data?: IdScanOcrData;\n    extendedOcrData: string;\n    images?: {\n      front: IncdImage;\n      back: IncdImage;\n    };\n    status: {\n      front: IdValidationStatus;\n      back: IdValidationStatus;\n    };\n  };\n}\n\nexport interface ConferenceCompleteEvent {\n  module: 'Conference';\n  result: {\n    status: 'success';\n  };\n}\n\nexport type IncdImage = {\n  /** 64-bit encoded image data */\n  pngBase64?: string;\n};\nexport interface SelfieScanCompleteEvent {\n  module: 'SelfieScan';\n  result: {\n    status: 'success';\n    spoofAttempt: boolean;\n    image: IncdImage;\n  };\n}\nexport interface FaceMatchCompleteEvent {\n  module: 'FaceMatch';\n  result: {\n    status: 'matched' | 'mismatch';\n  };\n}\n\nexport interface UserScoreCompleteEvent {\n  module: 'UserScore';\n  result: UserScore;\n}\n\nexport interface CaptchaCompleteEvent {\n  module: 'UserScore';\n  result: {\n    status: 'success';\n    response: string;\n  };\n}\n\nexport type ApprovalResult = {\n  approved: 'approved' | 'failed';\n  id: string;\n  customerToken: string;\n};\n\nexport type FaceLoginResult = { faceMatched: boolean; spoofAttempt: boolean };\n\nexport interface ApproveCompleteEvent {\n  module: 'Approve';\n  result: ApprovalResult;\n}\n\nexport interface UserConsentCompleteEvent {\n  module: 'UserConsent';\n  result: { status: 'success' };\n}\n\nexport type StepCompletedEvent =\n  | PhoneStepCompleteEvent\n  | DocumentScanCompleteEvent\n  | GeolocationCompleteEvent\n  | SignatureCompleteEvent\n  | VideoSelfieCompleteEvent\n  | QrScanCompleteEvent\n  | IdScanCompleteEvent\n  | ConferenceCompleteEvent\n  | SelfieScanCompleteEvent\n  | FaceMatchCompleteEvent\n  | UserScoreCompleteEvent\n  | CaptchaCompleteEvent\n  | ApproveCompleteEvent\n  | UserConsentCompleteEvent;\n\ntype PhoneStepErrorEvent = {\n  module: 'Phone';\n  status: 'userCancelled' | 'invalidSession' | 'error';\n};\ntype QRScanErrorEvent = {\n  module: 'QrScan';\n  result: {\n    status: 'userCancelled' | 'invalidSession' | 'error';\n  };\n};\ntype DocumentScanErrorEvent = {\n  module: 'DocumentScan';\n  status: 'permissionsDenied' | 'simulatorDetected' | 'unknown';\n};\ntype GeolocationErrorEvent = {\n  module: 'Geolocation';\n  status: 'unknownError' | 'permissionsDenied' | 'noLocationExtracted';\n};\ntype SignatureErrorEvent = {\n  module: 'Signature';\n  status: 'error' | 'invalidSession';\n};\n\ntype IdScanErrorEvent = {\n  module: 'IdScan';\n  data?: IdScanOcrData;\n  status: {\n    front: IdValidationStatus;\n    back: IdValidationStatus;\n  };\n};\n\ntype ConferenceErrorEvent = {\n  module: 'Conference';\n  result: {\n    status: 'userCancelled' | 'invalidSession' | 'error';\n  };\n};\n\ntype SelfieScanErrorEvent = {\n  module: 'SelfieScan';\n  status: 'none' | 'permissionsDenied' | 'simulatorDetected' | 'spoofDetected';\n};\n\ntype FaceMatchErrorEvent = {\n  module: 'FaceMatch';\n  status: 'simulatorDetected' | 'unknownError';\n};\n\ntype UserScoreErrorEvent = {\n  module: 'UserScore';\n  status: 'warning' | 'unknown' | 'manual' | 'fail';\n};\n\ntype CaptchaErrorEvent = {\n  module: 'Captcha';\n  status: ResultErrorCodes;\n};\n\ntype VideoScanErrorEvent = { module: 'VideoSelfie' };\n\nexport type StepErrorEvent =\n  | PhoneStepErrorEvent\n  | QRScanErrorEvent\n  | DocumentScanErrorEvent\n  | GeolocationErrorEvent\n  | SignatureErrorEvent\n  | VideoScanErrorEvent\n  | IdScanErrorEvent\n  | ConferenceErrorEvent\n  | SelfieScanErrorEvent\n  | FaceMatchErrorEvent\n  | CaptchaErrorEvent\n  | UserScoreErrorEvent;\n\nexport type ConferenceStepUpdateEvent = { module: 'Conference'; result: {} };\nexport type StepUpdatedEvent = ConferenceStepUpdateEvent;\n\nexport type StepUpdateListener = {\n  module: 'Conference';\n  listener: (e: ConferenceStepUpdateEvent) => void;\n};\nexport interface UserScore {\n  overallScore: string;\n  status: 'ok' | 'warn' | 'unknown' | 'fail' | 'manual';\n  facialRecognitionScore: string;\n  existingUser: boolean;\n  idVerificationScore: string;\n  livenessOverallScore: string;\n}\n\nexport type StepCompleteListener =\n  | { module: 'Phone'; listener: (e: PhoneStepCompleteEvent) => void }\n  | { module: 'DocumentScan'; listener: (e: DocumentScanCompleteEvent) => void }\n  | { module: 'Geolocation'; listener: (e: GeolocationCompleteEvent) => void }\n  | { module: 'Signature'; listener: (e: SignatureCompleteEvent) => void }\n  | { module: 'VideoSelfie'; listener: (e: VideoSelfieCompleteEvent) => void }\n  | { module: 'IdScan'; listener: (e: IdScanCompleteEvent) => void }\n  | { module: 'Conference'; listener: (e: ConferenceCompleteEvent) => void }\n  | { module: 'SelfieScan'; listener: (e: SelfieScanCompleteEvent) => void }\n  | { module: 'FaceMatch'; listener: (e: FaceMatchCompleteEvent) => void }\n  | { module: 'QrScan'; listener: (e: QrScanCompleteEvent) => void }\n  | { module: 'Approve'; listener: (e: ApproveCompleteEvent) => void }\n  | { module: 'Captcha'; listener: (e: CaptchaCompleteEvent) => void }\n  | { module: 'UserScore'; listener: (e: UserScoreCompleteEvent) => void }\n  | { module: 'UserConsent'; listener: (e: UserConsentCompleteEvent) => void };\n\nexport type StepErrorListener =\n  | { module: 'Phone'; listener: (e: PhoneStepErrorEvent) => void }\n  | { module: 'DocumentScan'; listener: (e: DocumentScanErrorEvent) => void }\n  | { module: 'Geolocation'; listener: (e: GeolocationErrorEvent) => void }\n  | { module: 'Signature'; listener: (e: SignatureErrorEvent) => void }\n  | { module: 'VideoSelfie'; listener: (e: VideoScanErrorEvent) => void }\n  | { module: 'IdScan'; listener: (e: IdScanErrorEvent) => void }\n  | { module: 'Conference'; listener: (e: ConferenceErrorEvent) => void }\n  | { module: 'SelfieScan'; listener: (e: SelfieScanErrorEvent) => void }\n  | { module: 'FaceMatch'; listener: (e: FaceMatchErrorEvent) => void }\n  | { module: 'QrScan'; listener: (e: QRScanErrorEvent) => void }\n  | { module: 'Captcha'; listener: (e: CaptchaErrorEvent) => void }\n  | { module: 'UserScore'; listener: (e: UserScoreErrorEvent) => void };\n\nimport {\n  modulesConfigDefaultConfigEnhancement,\n  resultsConversions,\n} from './utils';\n\ntype IncodeSdkType = {\n  initialize({\n    testMode,\n    apiConfig,\n    disableHookCheck,\n    sdkMode,\n  }: {\n    testMode?: boolean;\n    apiConfig: {\n      key: string;\n      url: string;\n      conferenceUrl?: string;\n      regionCode?: 'ALL' | 'MX';\n    };\n    disableHookCheck?: boolean;\n    sdkMode?: 'standard' | 'captureOnly';\n  }): Promise<void>;\n  startOnboarding({\n    config,\n    interviewId,\n    configurationId,\n  }: {\n    config: (IncodeModuleConfig & ModuleEnabled)[];\n    interviewId?: string;\n    configurationId?: string;\n  }): Promise<OnboardingResponse>;\n  /**\n   *\n   * @param stepAndListener\n   * @returns the unregister callback\n   */\n  onStepCompleted: (e: StepCompleteListener) => StepEventUnsubscriber;\n  onStepUpdated: (\n    listener: (e: StepUpdatedEvent) => void\n  ) => StepEventUnsubscriber;\n  onStepError: (e: StepErrorListener) => StepEventUnsubscriber;\n  onSessionCreated: (\n    listener: (e: { interviewId: Number }) => void\n  ) => StepEventUnsubscriber;\n  approve: (args: { forceApproval: boolean }) => Promise<ApprovalResult>;\n  startFaceLogin: (args: {\n    showTutorials: boolean;\n    customerToken: string;\n    customerUUID: string;\n  }) => Promise<FaceLoginResult>;\n  getUserScore: (config?: { mode?: 'accurate' | 'fast' }) => Promise<UserScore>;\n  createOnboardingSession(config: {\n    verifers?: Module[];\n  }): Promise<{ token: string; interviewId: string; regionId: string }>;\n  startOnboardingSection(config: OnboardingConfig): Promise<OnboardingResponse>;\n  finishOnboardingFlow(): Promise<any>;\n};\n\ntype StepEventUnsubscriber = () => void;\n\nconst IncodeSdk = (() => {\n  const stepCompleteListeners: {\n    [module: string]: any[];\n  } = {};\n\n  const stepUpdateListeners: {\n    [module: string]: any[];\n  } = {};\n\n  const errorListeners: {\n    [module: string]: any[];\n  } = {};\n\n  const addListener = (\n    toListeners: { [module: string]: any[] },\n    stepAndListener:\n      | StepCompleteListener\n      | StepErrorListener\n      | StepUpdateListener\n  ) => {\n    const { module, listener } = stepAndListener;\n    if (toListeners[module] === undefined) {\n      toListeners[module] = [];\n    }\n\n    toListeners[module] = [...toListeners[module], listener];\n    return () => {\n      const ofModule = toListeners[module];\n      const idx = ofModule.indexOf(listener);\n      if (idx === -1) {\n        return;\n      }\n      //removes the listeners\n      toListeners[module] = [\n        ...ofModule.slice(0, idx),\n        ...ofModule.slice(idx + 1),\n      ];\n    };\n  };\n\n  const emitter = new NativeEventEmitter(NativeModules.IncodeSdk);\n\n  // complete listener\n  emitter.addListener('ONBOARDING_STEP_COMPLETED', (e: StepCompletedEvent) => {\n    const ofModule = stepCompleteListeners[e.module];\n\n    const forListener = resultsConversions(e);\n\n    if (ofModule) {\n      ofModule.forEach((listener: (_: StepCompletedEvent) => void) =>\n        listener(forListener)\n      );\n    }\n  });\n\n  // error listener\n  emitter.addListener('ONBOARDING_STEP_ERROR', (e: StepErrorEvent) => {\n    const ofModule = errorListeners[e.module];\n    if (ofModule) {\n      ofModule.forEach((listener: (_: StepErrorEvent) => void) => listener(e));\n    }\n  });\n\n  // error listener\n  emitter.addListener('ONBOARDING_STEP_UPDATE', (e: StepUpdatedEvent) => {\n    const ofModule = stepUpdateListeners[e.module];\n    if (ofModule) {\n      ofModule.forEach((listener: (_: StepUpdatedEvent) => void) =>\n        listener(e)\n      );\n    }\n  });\n\n  const fixModuleConfigDefaultValues = (\n    config: OnboardingConfig\n  ): OnboardingConfig => ({\n    ...config,\n    config: config.config.map((moduleConfig) => {\n      const enhanced = {\n        ...moduleConfig,\n        enabled:\n          moduleConfig.enabled === undefined ? true : moduleConfig.enabled,\n      };\n\n      return modulesConfigDefaultConfigEnhancement(enhanced);\n    }),\n  });\n\n  return {\n    ...NativeModules.IncodeSdk,\n    initialize: (config: { testMode: boolean }) => {\n      return NativeModules.IncodeSdk.initialize(\n        config.testMode === undefined ? { testMode: false } : config\n      );\n    },\n\n    onSessionCreated: (listener: () => void): StepEventUnsubscriber => {\n      const subscription = emitter.addListener(\n        'ONBOARDING_SESSION_CREATED',\n        listener\n      );\n      return subscription.remove;\n    },\n\n    onStepCompleted: (\n      stepAndListener: StepCompleteListener\n    ): StepEventUnsubscriber => {\n      return addListener(stepCompleteListeners, stepAndListener);\n    },\n\n    onStepError: (\n      stepAndListener: StepErrorListener\n    ): StepEventUnsubscriber => {\n      return addListener(errorListeners, stepAndListener);\n    },\n\n    onStepUpdated: (\n      stepAndListener: StepUpdateListener\n    ): StepEventUnsubscriber => {\n      return addListener(stepUpdateListeners, stepAndListener);\n    },\n\n    startOnboarding: (\n      config: OnboardingConfig\n    ): Promise<OnboardingResponse> => {\n      return NativeModules.IncodeSdk.startOnboarding(\n        fixModuleConfigDefaultValues(config)\n      );\n    },\n    startOnboardingSection: (\n      config: OnboardingConfig\n    ): Promise<OnboardingResponse> => {\n      return NativeModules.IncodeSdk.startOnboardingSection(\n        fixModuleConfigDefaultValues(config)\n      );\n    },\n    startFaceLogin: (config: {\n      showTutorials: boolean;\n      customerToken: string;\n      customerUUID: string;\n    }): Promise<FaceLoginResult> => {\n      return NativeModules.IncodeSdk.startFaceLogin(config);\n    },\n    getUserScore: (\n      config: { mode?: 'accurate' | 'fast' } = { mode: 'accurate' }\n    ) => {\n      return NativeModules.IncodeSdk.getUserScore(config);\n    },\n  };\n})();\n\nexport default IncodeSdk as IncodeSdkType;\n"]}